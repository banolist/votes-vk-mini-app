/* eslint-disable */
import { DocumentTypeDecoration } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
  Int64: { input: any; output: any; }
  /** The builtin Map type */
  Map: { input: any; output: any; }
  /** The builtin Time type */
  Time: { input: any; output: any; }
  Uint: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

export type AssignTariffInput = {
  duration: Scalars['Uint']['input'];
  tariffID: Scalars['ID']['input'];
  userID: Scalars['ID']['input'];
};

export type CalcSubscriptionPriceInput = {
  promocode?: InputMaybe<Scalars['String']['input']>;
  tariffId: Scalars['ID']['input'];
};

export type CategoryCommunityDirection = {
  __typename?: 'CategoryCommunityDirection';
  label: Scalars['String']['output'];
  options: Array<CommunityDirection>;
};

export type CheckPromocodeResponse = {
  __typename?: 'CheckPromocodeResponse';
  discount: Scalars['Uint']['output'];
  maxDurationMonths?: Maybe<Scalars['Uint']['output']>;
  promocodeResult: UserPromocodeResult;
};

export type CommunityDirection = Node & {
  __typename?: 'CommunityDirection';
  direction: Scalars['String']['output'];
  eventTargetAudience?: Maybe<Array<OrganizatorEvent>>;
  expertProfileRequestAsNew?: Maybe<Array<ExpertProfileRequest>>;
  expertProfileRequestAsOld?: Maybe<Array<ExpertProfileRequest>>;
  expertProfiles?: Maybe<Array<ExpertProfile>>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  targetNotification?: Maybe<Array<Notification>>;
};

/**
 * CommunityDirectionWhereInput is used for filtering CommunityDirection objects.
 * Input was generated by ent.
 */
export type CommunityDirectionWhereInput = {
  and?: InputMaybe<Array<CommunityDirectionWhereInput>>;
  /** direction field predicates */
  direction?: InputMaybe<Scalars['String']['input']>;
  directionContains?: InputMaybe<Scalars['String']['input']>;
  directionContainsFold?: InputMaybe<Scalars['String']['input']>;
  directionEqualFold?: InputMaybe<Scalars['String']['input']>;
  directionGT?: InputMaybe<Scalars['String']['input']>;
  directionGTE?: InputMaybe<Scalars['String']['input']>;
  directionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  directionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  directionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  directionLT?: InputMaybe<Scalars['String']['input']>;
  directionLTE?: InputMaybe<Scalars['String']['input']>;
  directionNEQ?: InputMaybe<Scalars['String']['input']>;
  directionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** event_target_audience edge predicates */
  hasEventTargetAudience?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventTargetAudienceWith?: InputMaybe<Array<OrganizatorEventWhereInput>>;
  /** expert_profile_request_as_new edge predicates */
  hasExpertProfileRequestAsNew?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfileRequestAsNewWith?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** expert_profile_request_as_old edge predicates */
  hasExpertProfileRequestAsOld?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfileRequestAsOldWith?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** expert_profiles edge predicates */
  hasExpertProfiles?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfilesWith?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** target_notification edge predicates */
  hasTargetNotification?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetNotificationWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CommunityDirectionWhereInput>;
  or?: InputMaybe<Array<CommunityDirectionWhereInput>>;
};

export type CreateChildOrganizatorEventInput = {
  duration: Scalars['Uint']['input'];
  promoWord: Scalars['String']['input'];
  startAt: Scalars['Time']['input'];
};

/**
 * CreateCommunityDirectionInput is used for create CommunityDirection object.
 * Input was generated by ent.
 */
export type CreateCommunityDirectionInput = {
  direction: Scalars['String']['input'];
  eventTargetAudienceIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  expertProfileIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  expertProfileRequestAsNewIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  expertProfileRequestAsOldIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  name: Scalars['String']['input'];
  targetNotificationIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type CreateEventRequestInput = {
  event: EventInput;
  representativeForUser?: InputMaybe<Scalars['ID']['input']>;
  type: EventType;
};

export type CreateEventResponseInput = {
  eventID: Scalars['ID']['input'];
  expertID: Scalars['ID']['input'];
};

export type CreateExpertInput = {
  about: Scalars['String']['input'];
  communityDirections: Array<Scalars['ID']['input']>;
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  referUsername?: InputMaybe<Scalars['String']['input']>;
  region: Scalars['ID']['input'];
  simpleSpeechLink: Scalars['String']['input'];
  socialMediaLink: Scalars['String']['input'];
};

/**
 * CreateExpertProfileRequestInput is used for create ExpertProfileRequest object.
 * Input was generated by ent.
 */
export type CreateExpertProfileRequestInput = {
  newAbout?: InputMaybe<Scalars['String']['input']>;
  newCommunityDirectionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  newFirstName?: InputMaybe<Scalars['String']['input']>;
  newLastName?: InputMaybe<Scalars['String']['input']>;
  newReferUsername?: InputMaybe<Scalars['String']['input']>;
  newRegalia?: InputMaybe<Scalars['String']['input']>;
  newRegionID?: InputMaybe<Scalars['ID']['input']>;
  newSimpleSpeechLink?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLink?: InputMaybe<Scalars['String']['input']>;
  oldAbout?: InputMaybe<Scalars['String']['input']>;
  oldCommunityDirectionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  oldFirstName?: InputMaybe<Scalars['String']['input']>;
  oldLastName?: InputMaybe<Scalars['String']['input']>;
  oldReferUsername?: InputMaybe<Scalars['String']['input']>;
  oldRegalia?: InputMaybe<Scalars['String']['input']>;
  oldRegionID?: InputMaybe<Scalars['ID']['input']>;
  oldSimpleSpeechLink?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLink?: InputMaybe<Scalars['String']['input']>;
  requestID: Scalars['ID']['input'];
};

export type CreateInviteToOrganizatorEvent = {
  create: CreateChildOrganizatorEventInput;
  eventID: Scalars['ID']['input'];
  expertID: Scalars['ID']['input'];
};

/**
 * CreateNotificationActionInput is used for create NotificationAction object.
 * Input was generated by ent.
 */
export type CreateNotificationActionInput = {
  label: Scalars['String']['input'];
  notificationID: Scalars['ID']['input'];
  payload?: InputMaybe<Scalars['Map']['input']>;
  type: NotificationActionType;
  variant: NotificationActionVariant;
};

/**
 * CreateNotificationInput is used for create Notification object.
 * Input was generated by ent.
 */
export type CreateNotificationInput = {
  actionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  directionTargetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  expertAuditoryIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  expiresAt?: InputMaybe<Scalars['Time']['input']>;
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  level?: InputMaybe<NotificationLevel>;
  message: Scalars['String']['input'];
  regionTargetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  targetRights?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
};

/**
 * CreateOrganizatorInput is used for create Organizator object.
 * Input was generated by ent.
 */
export type CreateOrganizatorInput = {
  organizationName: Scalars['String']['input'];
  organizationURL?: InputMaybe<Scalars['String']['input']>;
};

export type CreatePaymentLinkEvent = {
  email: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  returnURL: Scalars['String']['input'];
};

export type CreatePreExpertInput = {
  targetExpertID: Scalars['ID']['input'];
};

/**
 * CreateProfileRequestInput is used for create ProfileRequest object.
 * Input was generated by ent.
 */
export type CreateProfileRequestInput = {
  changeType: ProfileRequestChangeType;
  creatorID: Scalars['ID']['input'];
  expertRequestID?: InputMaybe<Scalars['ID']['input']>;
  organizatorRequestID?: InputMaybe<Scalars['ID']['input']>;
  type: ProfileRequestType;
  verifiedAdminID?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * CreatePromocodeInput is used for create Promocode object.
 * Input was generated by ent.
 */
export type CreatePromocodeInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  discount: Scalars['Int']['input'];
  endAt: Scalars['Time']['input'];
  maxCountActivations: Scalars['Int']['input'];
  maxMouthSubscriptionDuration?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivations?: InputMaybe<Scalars['Int']['input']>;
  startAt: Scalars['Time']['input'];
  tariffIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  usesUserIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateRepresentativeExpertRequestInput is used for create RepresentativeExpertRequest object.
 * Input was generated by ent.
 */
export type CreateRepresentativeExpertRequestInput = {
  representativeUserID: Scalars['ID']['input'];
  targetUserID: Scalars['ID']['input'];
  type: RepresentativeExpertRequestType;
};

/**
 * CreateTariffSubscriptionInput is used for create TariffSubscription object.
 * Input was generated by ent.
 */
export type CreateTariffSubscriptionInput = {
  endAt?: InputMaybe<Scalars['Time']['input']>;
  paymentMouthSum?: InputMaybe<Scalars['Float']['input']>;
  startAt?: InputMaybe<Scalars['Time']['input']>;
  tariffID: Scalars['ID']['input'];
  userID: Scalars['ID']['input'];
};

/**
 * CreateTariffSubscriptionLogInput is used for create TariffSubscriptionLog object.
 * Input was generated by ent.
 */
export type CreateTariffSubscriptionLogInput = {
  endAt?: InputMaybe<Scalars['Time']['input']>;
  paymentMouthSum?: InputMaybe<Scalars['Float']['input']>;
  startAt?: InputMaybe<Scalars['Time']['input']>;
  tariffID: Scalars['ID']['input'];
  userID: Scalars['ID']['input'];
};

/**
 * CreateUserBlockInput is used for create UserBlock object.
 * Input was generated by ent.
 */
export type CreateUserBlockInput = {
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  enabled: Scalars['Boolean']['input'];
  reason: Scalars['String']['input'];
  userID: Scalars['ID']['input'];
};

/**
 * CreateUserNotificationInput is used for create UserNotification object.
 * Input was generated by ent.
 */
export type CreateUserNotificationInput = {
  readAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateVerifyExpertRequestInput is used for create VerifyExpertRequest object.
 * Input was generated by ent.
 */
export type CreateVerifyExpertRequestInput = {
  creatorID: Scalars['ID']['input'];
  expiresAt: Scalars['Time']['input'];
  status?: InputMaybe<VerifyExpertRequestStatus>;
  voteIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type CreateVoteInput = {
  eventID?: InputMaybe<Scalars['ID']['input']>;
  feedback: Scalars['String']['input'];
  isLike?: InputMaybe<Scalars['Boolean']['input']>;
  targetExpertID?: InputMaybe<Scalars['ID']['input']>;
  targetOrganizatorID?: InputMaybe<Scalars['ID']['input']>;
  typeRating: VoteTypeRating;
  userID?: InputMaybe<Scalars['ID']['input']>;
};

export type DeleteVote = {
  id: Scalars['ID']['input'];
  reason: Scalars['String']['input'];
};

export type DeleteVoteInput = {
  eventID?: InputMaybe<Scalars['ID']['input']>;
  feedback: Scalars['String']['input'];
  targetExpertID?: InputMaybe<Scalars['ID']['input']>;
  targetOrganizatorID?: InputMaybe<Scalars['ID']['input']>;
  typeRating: VoteTypeRating;
  userID?: InputMaybe<Scalars['ID']['input']>;
};

export type Event = Node & {
  __typename?: 'Event';
  children?: Maybe<Array<Event>>;
  createdAt: Scalars['Time']['output'];
  creator: User;
  deleteAtLimitVotes?: Maybe<Scalars['Time']['output']>;
  deletedAt?: Maybe<Scalars['Time']['output']>;
  description: Scalars['String']['output'];
  duration: Scalars['Int']['output'];
  endTime: Scalars['Time']['output'];
  eventRequest?: Maybe<EventRequest>;
  expertEvent?: Maybe<ExpertEvent>;
  expertResponses?: Maybe<Array<ExpertResponseToEvent>>;
  id: Scalars['ID']['output'];
  myExpertVote: VoteType;
  organizatorEvent?: Maybe<OrganizatorEvent>;
  parent?: Maybe<Event>;
  promoWords?: Maybe<Array<EventPromoWord>>;
  promoWorld?: Maybe<Scalars['String']['output']>;
  representativeUser?: Maybe<User>;
  startTime: Scalars['Time']['output'];
  status: EventStatus;
  title: Scalars['String']['output'];
  type: EventType;
  updatedAt: Scalars['Time']['output'];
  votes?: Maybe<Array<Vote>>;
};

/** A connection to a list of items. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

export type EventExpertInput = {
  commentToListener?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  promoWord?: InputMaybe<Scalars['String']['input']>;
};

export type EventInput = {
  description: Scalars['String']['input'];
  duration: Scalars['Int']['input'];
  expert?: InputMaybe<EventExpertInput>;
  organizator?: InputMaybe<EventOrganizatorInput>;
  startAt: Scalars['Time']['input'];
  title: Scalars['String']['input'];
};

/** Ordering options for Event connections */
export type EventOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Events. */
  field: EventOrderField;
};

/** Properties by which Event connections can be ordered. */
export enum EventOrderField {
  CreatedAt = 'CREATED_AT',
  StartTime = 'START_TIME',
  UpdatedAt = 'UPDATED_AT'
}

export type EventOrganizatorInput = {
  feeType: OrganizatorEventFeeType;
  place?: InputMaybe<Scalars['String']['input']>;
  speakerBenefits: Scalars['String']['input'];
  targetAudience?: InputMaybe<Array<Scalars['ID']['input']>>;
  topic: Scalars['String']['input'];
  transferPaid: Scalars['Boolean']['input'];
  verificationMode: OrganizatorEventVerificationMode;
};

export type EventPromoWord = Node & {
  __typename?: 'EventPromoWord';
  createdAt: Scalars['Time']['output'];
  event: Event;
  expert: User;
  id: Scalars['ID']['output'];
  promoWorld: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
};

/** A connection to a list of items. */
export type EventPromoWordConnection = {
  __typename?: 'EventPromoWordConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventPromoWordEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EventPromoWordEdge = {
  __typename?: 'EventPromoWordEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<EventPromoWord>;
};

/** Ordering options for EventPromoWord connections */
export type EventPromoWordOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order EventPromoWords. */
  field: EventPromoWordOrderField;
};

/** Properties by which EventPromoWord connections can be ordered. */
export enum EventPromoWordOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * EventPromoWordWhereInput is used for filtering EventPromoWord objects.
 * Input was generated by ent.
 */
export type EventPromoWordWhereInput = {
  and?: InputMaybe<Array<EventPromoWordWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** event edge predicates */
  hasEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** expert edge predicates */
  hasExpert?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<EventPromoWordWhereInput>;
  or?: InputMaybe<Array<EventPromoWordWhereInput>>;
  /** promo_world field predicates */
  promoWorld?: InputMaybe<Scalars['String']['input']>;
  promoWorldContains?: InputMaybe<Scalars['String']['input']>;
  promoWorldContainsFold?: InputMaybe<Scalars['String']['input']>;
  promoWorldEqualFold?: InputMaybe<Scalars['String']['input']>;
  promoWorldGT?: InputMaybe<Scalars['String']['input']>;
  promoWorldGTE?: InputMaybe<Scalars['String']['input']>;
  promoWorldHasPrefix?: InputMaybe<Scalars['String']['input']>;
  promoWorldHasSuffix?: InputMaybe<Scalars['String']['input']>;
  promoWorldIn?: InputMaybe<Array<Scalars['String']['input']>>;
  promoWorldLT?: InputMaybe<Scalars['String']['input']>;
  promoWorldLTE?: InputMaybe<Scalars['String']['input']>;
  promoWorldNEQ?: InputMaybe<Scalars['String']['input']>;
  promoWorldNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type EventRequest = Node & {
  __typename?: 'EventRequest';
  createdAt: Scalars['Time']['output'];
  creator: User;
  event: Event;
  id: Scalars['ID']['output'];
  notification?: Maybe<Notification>;
  rejectComment?: Maybe<Scalars['String']['output']>;
  status: EventRequestStatus;
  updatedAt: Scalars['Time']['output'];
  verifiedAt?: Maybe<Scalars['Time']['output']>;
  verifiedUser?: Maybe<Array<User>>;
};

/** A connection to a list of items. */
export type EventRequestConnection = {
  __typename?: 'EventRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventRequestEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EventRequestEdge = {
  __typename?: 'EventRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<EventRequest>;
};

/** Ordering options for EventRequest connections */
export type EventRequestOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order EventRequests. */
  field: EventRequestOrderField;
};

/** Properties by which EventRequest connections can be ordered. */
export enum EventRequestOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** EventRequestStatus is enum for the field status */
export enum EventRequestStatus {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected',
  WaitPay = 'wait_pay'
}

/**
 * EventRequestWhereInput is used for filtering EventRequest objects.
 * Input was generated by ent.
 */
export type EventRequestWhereInput = {
  and?: InputMaybe<Array<EventRequestWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** creator edge predicates */
  hasCreator?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatorWith?: InputMaybe<Array<UserWhereInput>>;
  /** event edge predicates */
  hasEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** notification edge predicates */
  hasNotification?: InputMaybe<Scalars['Boolean']['input']>;
  hasNotificationWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** verified_user edge predicates */
  hasVerifiedUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifiedUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<EventRequestWhereInput>;
  or?: InputMaybe<Array<EventRequestWhereInput>>;
  /** reject_comment field predicates */
  rejectComment?: InputMaybe<Scalars['String']['input']>;
  rejectCommentContains?: InputMaybe<Scalars['String']['input']>;
  rejectCommentContainsFold?: InputMaybe<Scalars['String']['input']>;
  rejectCommentEqualFold?: InputMaybe<Scalars['String']['input']>;
  rejectCommentGT?: InputMaybe<Scalars['String']['input']>;
  rejectCommentGTE?: InputMaybe<Scalars['String']['input']>;
  rejectCommentHasPrefix?: InputMaybe<Scalars['String']['input']>;
  rejectCommentHasSuffix?: InputMaybe<Scalars['String']['input']>;
  rejectCommentIn?: InputMaybe<Array<Scalars['String']['input']>>;
  rejectCommentIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  rejectCommentLT?: InputMaybe<Scalars['String']['input']>;
  rejectCommentLTE?: InputMaybe<Scalars['String']['input']>;
  rejectCommentNEQ?: InputMaybe<Scalars['String']['input']>;
  rejectCommentNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  rejectCommentNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** status field predicates */
  status?: InputMaybe<EventRequestStatus>;
  statusIn?: InputMaybe<Array<EventRequestStatus>>;
  statusNEQ?: InputMaybe<EventRequestStatus>;
  statusNotIn?: InputMaybe<Array<EventRequestStatus>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** verified_at field predicates */
  verifiedAt?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtGT?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  verifiedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  verifiedAtLT?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  verifiedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

/** EventStatus is enum for the field status */
export enum EventStatus {
  Accepted = 'accepted',
  Pending = 'pending',
  Rejected = 'rejected'
}

/** EventType is enum for the field type */
export enum EventType {
  Children = 'children',
  Expert = 'expert',
  Organizer = 'organizer'
}

/**
 * EventWhereInput is used for filtering Event objects.
 * Input was generated by ent.
 */
export type EventWhereInput = {
  and?: InputMaybe<Array<EventWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** delete_at_limit_votes field predicates */
  deleteAtLimitVotes?: InputMaybe<Scalars['Time']['input']>;
  deleteAtLimitVotesGT?: InputMaybe<Scalars['Time']['input']>;
  deleteAtLimitVotesGTE?: InputMaybe<Scalars['Time']['input']>;
  deleteAtLimitVotesIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deleteAtLimitVotesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deleteAtLimitVotesLT?: InputMaybe<Scalars['Time']['input']>;
  deleteAtLimitVotesLTE?: InputMaybe<Scalars['Time']['input']>;
  deleteAtLimitVotesNEQ?: InputMaybe<Scalars['Time']['input']>;
  deleteAtLimitVotesNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deleteAtLimitVotesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** duration field predicates */
  duration?: InputMaybe<Scalars['Int']['input']>;
  durationGT?: InputMaybe<Scalars['Int']['input']>;
  durationGTE?: InputMaybe<Scalars['Int']['input']>;
  durationIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  durationLT?: InputMaybe<Scalars['Int']['input']>;
  durationLTE?: InputMaybe<Scalars['Int']['input']>;
  durationNEQ?: InputMaybe<Scalars['Int']['input']>;
  durationNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** end_time field predicates */
  endTime?: InputMaybe<Scalars['Time']['input']>;
  endTimeGT?: InputMaybe<Scalars['Time']['input']>;
  endTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  endTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endTimeLT?: InputMaybe<Scalars['Time']['input']>;
  endTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  endTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  endTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** children edge predicates */
  hasChildren?: InputMaybe<Scalars['Boolean']['input']>;
  hasChildrenWith?: InputMaybe<Array<EventWhereInput>>;
  /** creator edge predicates */
  hasCreator?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatorWith?: InputMaybe<Array<UserWhereInput>>;
  /** event_request edge predicates */
  hasEventRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventRequestWith?: InputMaybe<Array<EventRequestWhereInput>>;
  /** expert_event edge predicates */
  hasExpertEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertEventWith?: InputMaybe<Array<ExpertEventWhereInput>>;
  /** expert_responses edge predicates */
  hasExpertResponses?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertResponsesWith?: InputMaybe<Array<ExpertResponseToEventWhereInput>>;
  /** organizator_event edge predicates */
  hasOrganizatorEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasOrganizatorEventWith?: InputMaybe<Array<OrganizatorEventWhereInput>>;
  /** parent edge predicates */
  hasParent?: InputMaybe<Scalars['Boolean']['input']>;
  hasParentWith?: InputMaybe<Array<EventWhereInput>>;
  /** promo_words edge predicates */
  hasPromoWords?: InputMaybe<Scalars['Boolean']['input']>;
  hasPromoWordsWith?: InputMaybe<Array<EventPromoWordWhereInput>>;
  /** representative_user edge predicates */
  hasRepresentativeUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasRepresentativeUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** votes edge predicates */
  hasVotes?: InputMaybe<Scalars['Boolean']['input']>;
  hasVotesWith?: InputMaybe<Array<VoteWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<EventWhereInput>;
  or?: InputMaybe<Array<EventWhereInput>>;
  /** promo_world field predicates */
  promoWorld?: InputMaybe<Scalars['String']['input']>;
  promoWorldContains?: InputMaybe<Scalars['String']['input']>;
  promoWorldContainsFold?: InputMaybe<Scalars['String']['input']>;
  promoWorldEqualFold?: InputMaybe<Scalars['String']['input']>;
  promoWorldGT?: InputMaybe<Scalars['String']['input']>;
  promoWorldGTE?: InputMaybe<Scalars['String']['input']>;
  promoWorldHasPrefix?: InputMaybe<Scalars['String']['input']>;
  promoWorldHasSuffix?: InputMaybe<Scalars['String']['input']>;
  promoWorldIn?: InputMaybe<Array<Scalars['String']['input']>>;
  promoWorldIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  promoWorldLT?: InputMaybe<Scalars['String']['input']>;
  promoWorldLTE?: InputMaybe<Scalars['String']['input']>;
  promoWorldNEQ?: InputMaybe<Scalars['String']['input']>;
  promoWorldNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  promoWorldNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** start_time field predicates */
  startTime?: InputMaybe<Scalars['Time']['input']>;
  startTimeGT?: InputMaybe<Scalars['Time']['input']>;
  startTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  startTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startTimeLT?: InputMaybe<Scalars['Time']['input']>;
  startTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  startTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  startTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** status field predicates */
  status?: InputMaybe<EventStatus>;
  statusIn?: InputMaybe<Array<EventStatus>>;
  statusNEQ?: InputMaybe<EventStatus>;
  statusNotIn?: InputMaybe<Array<EventStatus>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** type field predicates */
  type?: InputMaybe<EventType>;
  typeIn?: InputMaybe<Array<EventType>>;
  typeNEQ?: InputMaybe<EventType>;
  typeNotIn?: InputMaybe<Array<EventType>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type ExpertEvent = Node & {
  __typename?: 'ExpertEvent';
  commentToListener?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['Time']['output']>;
  event: Event;
  id: Scalars['ID']['output'];
  link?: Maybe<Scalars['String']['output']>;
  promoWord?: Maybe<Scalars['String']['output']>;
};

/**
 * ExpertEventWhereInput is used for filtering ExpertEvent objects.
 * Input was generated by ent.
 */
export type ExpertEventWhereInput = {
  and?: InputMaybe<Array<ExpertEventWhereInput>>;
  /** comment_to_listener field predicates */
  commentToListener?: InputMaybe<Scalars['String']['input']>;
  commentToListenerContains?: InputMaybe<Scalars['String']['input']>;
  commentToListenerContainsFold?: InputMaybe<Scalars['String']['input']>;
  commentToListenerEqualFold?: InputMaybe<Scalars['String']['input']>;
  commentToListenerGT?: InputMaybe<Scalars['String']['input']>;
  commentToListenerGTE?: InputMaybe<Scalars['String']['input']>;
  commentToListenerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  commentToListenerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  commentToListenerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  commentToListenerIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  commentToListenerLT?: InputMaybe<Scalars['String']['input']>;
  commentToListenerLTE?: InputMaybe<Scalars['String']['input']>;
  commentToListenerNEQ?: InputMaybe<Scalars['String']['input']>;
  commentToListenerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  commentToListenerNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** event edge predicates */
  hasEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** link field predicates */
  link?: InputMaybe<Scalars['String']['input']>;
  linkContains?: InputMaybe<Scalars['String']['input']>;
  linkContainsFold?: InputMaybe<Scalars['String']['input']>;
  linkEqualFold?: InputMaybe<Scalars['String']['input']>;
  linkGT?: InputMaybe<Scalars['String']['input']>;
  linkGTE?: InputMaybe<Scalars['String']['input']>;
  linkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  linkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  linkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  linkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  linkLT?: InputMaybe<Scalars['String']['input']>;
  linkLTE?: InputMaybe<Scalars['String']['input']>;
  linkNEQ?: InputMaybe<Scalars['String']['input']>;
  linkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  linkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<ExpertEventWhereInput>;
  or?: InputMaybe<Array<ExpertEventWhereInput>>;
  /** promo_word field predicates */
  promoWord?: InputMaybe<Scalars['String']['input']>;
  promoWordContains?: InputMaybe<Scalars['String']['input']>;
  promoWordContainsFold?: InputMaybe<Scalars['String']['input']>;
  promoWordEqualFold?: InputMaybe<Scalars['String']['input']>;
  promoWordGT?: InputMaybe<Scalars['String']['input']>;
  promoWordGTE?: InputMaybe<Scalars['String']['input']>;
  promoWordHasPrefix?: InputMaybe<Scalars['String']['input']>;
  promoWordHasSuffix?: InputMaybe<Scalars['String']['input']>;
  promoWordIn?: InputMaybe<Array<Scalars['String']['input']>>;
  promoWordIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  promoWordLT?: InputMaybe<Scalars['String']['input']>;
  promoWordLTE?: InputMaybe<Scalars['String']['input']>;
  promoWordNEQ?: InputMaybe<Scalars['String']['input']>;
  promoWordNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  promoWordNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ExpertProfile = Node & {
  __typename?: 'ExpertProfile';
  about?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  communityDirections?: Maybe<Array<CommunityDirection>>;
  countEvents: Scalars['Int']['output'];
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  events?: Maybe<Array<Event>>;
  expertProfileRequests?: Maybe<Array<ExpertProfileRequest>>;
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  myExpertVote: VoteType;
  myPeopleVote: VoteType;
  negativePeopleVotes: Scalars['Int']['output'];
  negativeVotes: Scalars['Int']['output'];
  negative_people_votes: Scalars['Int']['output'];
  negative_votes: Scalars['Int']['output'];
  peopleRatingEnabled: Scalars['Boolean']['output'];
  peopleVotesCount: Scalars['Int']['output'];
  positivePeopleVotes: Scalars['Int']['output'];
  positiveVotes: Scalars['Int']['output'];
  positive_people_votes: Scalars['Int']['output'];
  positive_votes: Scalars['Int']['output'];
  referUsername?: Maybe<Scalars['String']['output']>;
  region: Region;
  simpleSpeechLink?: Maybe<Scalars['String']['output']>;
  socialMediaLink?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['Time']['output'];
  user: User;
  verifiedAt?: Maybe<Scalars['Time']['output']>;
  verifyExpertRequests?: Maybe<Array<VerifyExpertRequest>>;
  verifyExpertsVotes?: Maybe<Array<VoteVerifyExpert>>;
  votes?: Maybe<Array<Vote>>;
  votesCount: Scalars['Int']['output'];
};

/** A connection to a list of items. */
export type ExpertProfileConnection = {
  __typename?: 'ExpertProfileConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ExpertProfileEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ExpertProfileEdge = {
  __typename?: 'ExpertProfileEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ExpertProfile>;
};

/** Ordering options for ExpertProfile connections */
export type ExpertProfileOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order ExpertProfiles. */
  field: ExpertProfileOrderField;
};

/** Properties by which ExpertProfile connections can be ordered. */
export enum ExpertProfileOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type ExpertProfileRequest = Node & {
  __typename?: 'ExpertProfileRequest';
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  newAbout?: Maybe<Scalars['String']['output']>;
  newCommunityDirections?: Maybe<Array<CommunityDirection>>;
  newFirstName?: Maybe<Scalars['String']['output']>;
  newLastName?: Maybe<Scalars['String']['output']>;
  newReferUsername?: Maybe<Scalars['String']['output']>;
  newRegalia?: Maybe<Scalars['String']['output']>;
  newRegion?: Maybe<Region>;
  newSimpleSpeechLink?: Maybe<Scalars['String']['output']>;
  newSocialMediaLink?: Maybe<Scalars['String']['output']>;
  oldAbout?: Maybe<Scalars['String']['output']>;
  oldCommunityDirections?: Maybe<Array<CommunityDirection>>;
  oldFirstName?: Maybe<Scalars['String']['output']>;
  oldLastName?: Maybe<Scalars['String']['output']>;
  oldReferUsername?: Maybe<Scalars['String']['output']>;
  oldRegalia?: Maybe<Scalars['String']['output']>;
  oldRegion?: Maybe<Region>;
  oldSimpleSpeechLink?: Maybe<Scalars['String']['output']>;
  oldSocialMediaLink?: Maybe<Scalars['String']['output']>;
  request: ProfileRequest;
  updatedAt: Scalars['Time']['output'];
};

/** Ordering options for ExpertProfileRequest connections */
export type ExpertProfileRequestOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order ExpertProfileRequests. */
  field: ExpertProfileRequestOrderField;
};

/** Properties by which ExpertProfileRequest connections can be ordered. */
export enum ExpertProfileRequestOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * ExpertProfileRequestWhereInput is used for filtering ExpertProfileRequest objects.
 * Input was generated by ent.
 */
export type ExpertProfileRequestWhereInput = {
  and?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_community_directions edge predicates */
  hasNewCommunityDirections?: InputMaybe<Scalars['Boolean']['input']>;
  hasNewCommunityDirectionsWith?: InputMaybe<Array<CommunityDirectionWhereInput>>;
  /** new_region edge predicates */
  hasNewRegion?: InputMaybe<Scalars['Boolean']['input']>;
  hasNewRegionWith?: InputMaybe<Array<RegionWhereInput>>;
  /** old_community_directions edge predicates */
  hasOldCommunityDirections?: InputMaybe<Scalars['Boolean']['input']>;
  hasOldCommunityDirectionsWith?: InputMaybe<Array<CommunityDirectionWhereInput>>;
  /** old_region edge predicates */
  hasOldRegion?: InputMaybe<Scalars['Boolean']['input']>;
  hasOldRegionWith?: InputMaybe<Array<RegionWhereInput>>;
  /** request edge predicates */
  hasRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasRequestWith?: InputMaybe<Array<ProfileRequestWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** new_about field predicates */
  newAbout?: InputMaybe<Scalars['String']['input']>;
  newAboutContains?: InputMaybe<Scalars['String']['input']>;
  newAboutContainsFold?: InputMaybe<Scalars['String']['input']>;
  newAboutEqualFold?: InputMaybe<Scalars['String']['input']>;
  newAboutGT?: InputMaybe<Scalars['String']['input']>;
  newAboutGTE?: InputMaybe<Scalars['String']['input']>;
  newAboutHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newAboutHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newAboutIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newAboutIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newAboutLT?: InputMaybe<Scalars['String']['input']>;
  newAboutLTE?: InputMaybe<Scalars['String']['input']>;
  newAboutNEQ?: InputMaybe<Scalars['String']['input']>;
  newAboutNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newAboutNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_first_name field predicates */
  newFirstName?: InputMaybe<Scalars['String']['input']>;
  newFirstNameContains?: InputMaybe<Scalars['String']['input']>;
  newFirstNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  newFirstNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  newFirstNameGT?: InputMaybe<Scalars['String']['input']>;
  newFirstNameGTE?: InputMaybe<Scalars['String']['input']>;
  newFirstNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newFirstNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newFirstNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newFirstNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newFirstNameLT?: InputMaybe<Scalars['String']['input']>;
  newFirstNameLTE?: InputMaybe<Scalars['String']['input']>;
  newFirstNameNEQ?: InputMaybe<Scalars['String']['input']>;
  newFirstNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newFirstNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_last_name field predicates */
  newLastName?: InputMaybe<Scalars['String']['input']>;
  newLastNameContains?: InputMaybe<Scalars['String']['input']>;
  newLastNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  newLastNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  newLastNameGT?: InputMaybe<Scalars['String']['input']>;
  newLastNameGTE?: InputMaybe<Scalars['String']['input']>;
  newLastNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newLastNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newLastNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newLastNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newLastNameLT?: InputMaybe<Scalars['String']['input']>;
  newLastNameLTE?: InputMaybe<Scalars['String']['input']>;
  newLastNameNEQ?: InputMaybe<Scalars['String']['input']>;
  newLastNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newLastNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_refer_username field predicates */
  newReferUsername?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameContains?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameGT?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameGTE?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newReferUsernameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newReferUsernameLT?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameLTE?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameNEQ?: InputMaybe<Scalars['String']['input']>;
  newReferUsernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newReferUsernameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_regalia field predicates */
  newRegalia?: InputMaybe<Scalars['String']['input']>;
  newRegaliaContains?: InputMaybe<Scalars['String']['input']>;
  newRegaliaContainsFold?: InputMaybe<Scalars['String']['input']>;
  newRegaliaEqualFold?: InputMaybe<Scalars['String']['input']>;
  newRegaliaGT?: InputMaybe<Scalars['String']['input']>;
  newRegaliaGTE?: InputMaybe<Scalars['String']['input']>;
  newRegaliaHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newRegaliaHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newRegaliaIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newRegaliaIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newRegaliaLT?: InputMaybe<Scalars['String']['input']>;
  newRegaliaLTE?: InputMaybe<Scalars['String']['input']>;
  newRegaliaNEQ?: InputMaybe<Scalars['String']['input']>;
  newRegaliaNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newRegaliaNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_simple_speech_link field predicates */
  newSimpleSpeechLink?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkContains?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkGT?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkGTE?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newSimpleSpeechLinkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newSimpleSpeechLinkLT?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkLTE?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  newSimpleSpeechLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newSimpleSpeechLinkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** new_social_media_link field predicates */
  newSocialMediaLink?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkContains?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkGT?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkGTE?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newSocialMediaLinkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newSocialMediaLinkLT?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkLTE?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  newSocialMediaLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newSocialMediaLinkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<ExpertProfileRequestWhereInput>;
  /** old_about field predicates */
  oldAbout?: InputMaybe<Scalars['String']['input']>;
  oldAboutContains?: InputMaybe<Scalars['String']['input']>;
  oldAboutContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldAboutEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldAboutGT?: InputMaybe<Scalars['String']['input']>;
  oldAboutGTE?: InputMaybe<Scalars['String']['input']>;
  oldAboutHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldAboutHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldAboutIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldAboutIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldAboutLT?: InputMaybe<Scalars['String']['input']>;
  oldAboutLTE?: InputMaybe<Scalars['String']['input']>;
  oldAboutNEQ?: InputMaybe<Scalars['String']['input']>;
  oldAboutNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldAboutNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_first_name field predicates */
  oldFirstName?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameContains?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameGT?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameGTE?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldFirstNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldFirstNameLT?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameLTE?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameNEQ?: InputMaybe<Scalars['String']['input']>;
  oldFirstNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldFirstNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_last_name field predicates */
  oldLastName?: InputMaybe<Scalars['String']['input']>;
  oldLastNameContains?: InputMaybe<Scalars['String']['input']>;
  oldLastNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldLastNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldLastNameGT?: InputMaybe<Scalars['String']['input']>;
  oldLastNameGTE?: InputMaybe<Scalars['String']['input']>;
  oldLastNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldLastNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldLastNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldLastNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldLastNameLT?: InputMaybe<Scalars['String']['input']>;
  oldLastNameLTE?: InputMaybe<Scalars['String']['input']>;
  oldLastNameNEQ?: InputMaybe<Scalars['String']['input']>;
  oldLastNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldLastNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_refer_username field predicates */
  oldReferUsername?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameContains?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameGT?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameGTE?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldReferUsernameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldReferUsernameLT?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameLTE?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameNEQ?: InputMaybe<Scalars['String']['input']>;
  oldReferUsernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldReferUsernameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_regalia field predicates */
  oldRegalia?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaContains?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaGT?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaGTE?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldRegaliaIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldRegaliaLT?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaLTE?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaNEQ?: InputMaybe<Scalars['String']['input']>;
  oldRegaliaNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldRegaliaNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_simple_speech_link field predicates */
  oldSimpleSpeechLink?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkContains?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkGT?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkGTE?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldSimpleSpeechLinkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldSimpleSpeechLinkLT?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkLTE?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  oldSimpleSpeechLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldSimpleSpeechLinkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_social_media_link field predicates */
  oldSocialMediaLink?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkContains?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkGT?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkGTE?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldSocialMediaLinkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldSocialMediaLinkLT?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkLTE?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  oldSocialMediaLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldSocialMediaLinkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/**
 * ExpertProfileWhereInput is used for filtering ExpertProfile objects.
 * Input was generated by ent.
 */
export type ExpertProfileWhereInput = {
  /** about field predicates */
  about?: InputMaybe<Scalars['String']['input']>;
  aboutContains?: InputMaybe<Scalars['String']['input']>;
  aboutContainsFold?: InputMaybe<Scalars['String']['input']>;
  aboutEqualFold?: InputMaybe<Scalars['String']['input']>;
  aboutGT?: InputMaybe<Scalars['String']['input']>;
  aboutGTE?: InputMaybe<Scalars['String']['input']>;
  aboutHasPrefix?: InputMaybe<Scalars['String']['input']>;
  aboutHasSuffix?: InputMaybe<Scalars['String']['input']>;
  aboutIn?: InputMaybe<Array<Scalars['String']['input']>>;
  aboutIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  aboutLT?: InputMaybe<Scalars['String']['input']>;
  aboutLTE?: InputMaybe<Scalars['String']['input']>;
  aboutNEQ?: InputMaybe<Scalars['String']['input']>;
  aboutNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  aboutNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** community_directions edge predicates */
  hasCommunityDirections?: InputMaybe<Scalars['Boolean']['input']>;
  hasCommunityDirectionsWith?: InputMaybe<Array<CommunityDirectionWhereInput>>;
  /** events edge predicates */
  hasEvents?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventsWith?: InputMaybe<Array<EventWhereInput>>;
  /** expert_profile_requests edge predicates */
  hasExpertProfileRequests?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfileRequestsWith?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** region edge predicates */
  hasRegion?: InputMaybe<Scalars['Boolean']['input']>;
  hasRegionWith?: InputMaybe<Array<RegionWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** verify_expert_requests edge predicates */
  hasVerifyExpertRequests?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifyExpertRequestsWith?: InputMaybe<Array<VerifyExpertRequestWhereInput>>;
  /** verify_experts_votes edge predicates */
  hasVerifyExpertsVotes?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifyExpertsVotesWith?: InputMaybe<Array<VoteVerifyExpertWhereInput>>;
  /** votes edge predicates */
  hasVotes?: InputMaybe<Scalars['Boolean']['input']>;
  hasVotesWith?: InputMaybe<Array<VoteWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** negative_people_votes field predicates */
  negativePeopleVotes?: InputMaybe<Scalars['Int']['input']>;
  negativePeopleVotesGT?: InputMaybe<Scalars['Int']['input']>;
  negativePeopleVotesGTE?: InputMaybe<Scalars['Int']['input']>;
  negativePeopleVotesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  negativePeopleVotesLT?: InputMaybe<Scalars['Int']['input']>;
  negativePeopleVotesLTE?: InputMaybe<Scalars['Int']['input']>;
  negativePeopleVotesNEQ?: InputMaybe<Scalars['Int']['input']>;
  negativePeopleVotesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** negative_votes field predicates */
  negativeVotes?: InputMaybe<Scalars['Int']['input']>;
  negativeVotesGT?: InputMaybe<Scalars['Int']['input']>;
  negativeVotesGTE?: InputMaybe<Scalars['Int']['input']>;
  negativeVotesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  negativeVotesLT?: InputMaybe<Scalars['Int']['input']>;
  negativeVotesLTE?: InputMaybe<Scalars['Int']['input']>;
  negativeVotesNEQ?: InputMaybe<Scalars['Int']['input']>;
  negativeVotesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  not?: InputMaybe<ExpertProfileWhereInput>;
  or?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** people_rating_enabled field predicates */
  peopleRatingEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  peopleRatingEnabledNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** positive_people_votes field predicates */
  positivePeopleVotes?: InputMaybe<Scalars['Int']['input']>;
  positivePeopleVotesGT?: InputMaybe<Scalars['Int']['input']>;
  positivePeopleVotesGTE?: InputMaybe<Scalars['Int']['input']>;
  positivePeopleVotesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  positivePeopleVotesLT?: InputMaybe<Scalars['Int']['input']>;
  positivePeopleVotesLTE?: InputMaybe<Scalars['Int']['input']>;
  positivePeopleVotesNEQ?: InputMaybe<Scalars['Int']['input']>;
  positivePeopleVotesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** positive_votes field predicates */
  positiveVotes?: InputMaybe<Scalars['Int']['input']>;
  positiveVotesGT?: InputMaybe<Scalars['Int']['input']>;
  positiveVotesGTE?: InputMaybe<Scalars['Int']['input']>;
  positiveVotesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  positiveVotesLT?: InputMaybe<Scalars['Int']['input']>;
  positiveVotesLTE?: InputMaybe<Scalars['Int']['input']>;
  positiveVotesNEQ?: InputMaybe<Scalars['Int']['input']>;
  positiveVotesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** refer_username field predicates */
  referUsername?: InputMaybe<Scalars['String']['input']>;
  referUsernameContains?: InputMaybe<Scalars['String']['input']>;
  referUsernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  referUsernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  referUsernameGT?: InputMaybe<Scalars['String']['input']>;
  referUsernameGTE?: InputMaybe<Scalars['String']['input']>;
  referUsernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  referUsernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  referUsernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  referUsernameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  referUsernameLT?: InputMaybe<Scalars['String']['input']>;
  referUsernameLTE?: InputMaybe<Scalars['String']['input']>;
  referUsernameNEQ?: InputMaybe<Scalars['String']['input']>;
  referUsernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  referUsernameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** simple_speech_link field predicates */
  simpleSpeechLink?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkContains?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkGT?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkGTE?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  simpleSpeechLinkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  simpleSpeechLinkLT?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkLTE?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  simpleSpeechLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  simpleSpeechLinkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** social_media_link field predicates */
  socialMediaLink?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkContains?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkGT?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkGTE?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  socialMediaLinkIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  socialMediaLinkLT?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkLTE?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  socialMediaLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  socialMediaLinkNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** verified_at field predicates */
  verifiedAt?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtGT?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  verifiedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  verifiedAtLT?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  verifiedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  verifiedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ExpertResponseToEvent = Node & {
  __typename?: 'ExpertResponseToEvent';
  childEvent?: Maybe<Event>;
  createdAt: Scalars['Time']['output'];
  event: Event;
  expressAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  status: ExpertResponseToEventStatus;
  target: User;
  type: ExpertResponseToEventType;
  updatedAt: Scalars['Time']['output'];
  user: User;
};

/** A connection to a list of items. */
export type ExpertResponseToEventConnection = {
  __typename?: 'ExpertResponseToEventConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ExpertResponseToEventEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ExpertResponseToEventEdge = {
  __typename?: 'ExpertResponseToEventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ExpertResponseToEvent>;
};

/** Ordering options for ExpertResponseToEvent connections */
export type ExpertResponseToEventOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order ExpertResponseToEvents. */
  field: ExpertResponseToEventOrderField;
};

/** Properties by which ExpertResponseToEvent connections can be ordered. */
export enum ExpertResponseToEventOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** ExpertResponseToEventStatus is enum for the field status */
export enum ExpertResponseToEventStatus {
  Accepted = 'accepted',
  Pending = 'pending',
  Rejected = 'rejected'
}

/** ExpertResponseToEventType is enum for the field type */
export enum ExpertResponseToEventType {
  Invitation = 'invitation',
  Request = 'request'
}

/**
 * ExpertResponseToEventWhereInput is used for filtering ExpertResponseToEvent objects.
 * Input was generated by ent.
 */
export type ExpertResponseToEventWhereInput = {
  and?: InputMaybe<Array<ExpertResponseToEventWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** express_at field predicates */
  expressAt?: InputMaybe<Scalars['Time']['input']>;
  expressAtGT?: InputMaybe<Scalars['Time']['input']>;
  expressAtGTE?: InputMaybe<Scalars['Time']['input']>;
  expressAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  expressAtLT?: InputMaybe<Scalars['Time']['input']>;
  expressAtLTE?: InputMaybe<Scalars['Time']['input']>;
  expressAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  expressAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** child_event edge predicates */
  hasChildEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasChildEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** event edge predicates */
  hasEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** target edge predicates */
  hasTarget?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetWith?: InputMaybe<Array<UserWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ExpertResponseToEventWhereInput>;
  or?: InputMaybe<Array<ExpertResponseToEventWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<ExpertResponseToEventStatus>;
  statusIn?: InputMaybe<Array<ExpertResponseToEventStatus>>;
  statusNEQ?: InputMaybe<ExpertResponseToEventStatus>;
  statusNotIn?: InputMaybe<Array<ExpertResponseToEventStatus>>;
  /** type field predicates */
  type?: InputMaybe<ExpertResponseToEventType>;
  typeIn?: InputMaybe<Array<ExpertResponseToEventType>>;
  typeNEQ?: InputMaybe<ExpertResponseToEventType>;
  typeNotIn?: InputMaybe<Array<ExpertResponseToEventType>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  acceptEvent: Scalars['Boolean']['output'];
  acceptInviteOrganizatorEvent?: Maybe<Scalars['Boolean']['output']>;
  acceptPlatformRights: Scalars['Boolean']['output'];
  acceptProfileRequest: ProfileRequest;
  acceptRepresentativeExpertRequest: Scalars['Boolean']['output'];
  acceptRepresentativeRequest?: Maybe<Scalars['Boolean']['output']>;
  acceptResponOrganizatorEvent: Event;
  assignAdminRights: User;
  assignTariff?: Maybe<Scalars['Boolean']['output']>;
  blockUser: Scalars['Boolean']['output'];
  createChildrenEvent: Event;
  createEventRequest: EventRequest;
  createInviteToOrganizatorEvent: ExpertResponseToEvent;
  createNotification?: Maybe<Scalars['ID']['output']>;
  createPaidLinkEvent: Scalars['String']['output'];
  createProfileRequest: ProfileRequest;
  createPromocode: Promocode;
  createRepresentativeExpertRequest: PreExpertRequest;
  createRepresentativeRequest?: Maybe<Scalars['ID']['output']>;
  createVerifyExpertRequest: VerifyExpertRequest;
  createVote: Vote;
  deleteEventRequest?: Maybe<Scalars['Boolean']['output']>;
  deleteMyProfileExpert?: Maybe<Scalars['Boolean']['output']>;
  deleteMyProfileOrganizator?: Maybe<Scalars['Boolean']['output']>;
  deleteMyProfileUser?: Maybe<Scalars['Boolean']['output']>;
  deleteVerification?: Maybe<Scalars['Boolean']['output']>;
  deleteVote?: Maybe<Scalars['Boolean']['output']>;
  platformRightsTextWrite: Scalars['Boolean']['output'];
  readAllNotifications?: Maybe<Scalars['Boolean']['output']>;
  readNotification?: Maybe<Scalars['Boolean']['output']>;
  rejectEvent: Scalars['Boolean']['output'];
  rejectInviteOrganizatorEvent?: Maybe<Scalars['Boolean']['output']>;
  rejectProfileRequest?: Maybe<Scalars['Boolean']['output']>;
  rejectRepresentativeExpertRequest: Scalars['Boolean']['output'];
  rejectRepresentativeRequest?: Maybe<Scalars['Boolean']['output']>;
  rejectRespondOrganizatorEvent: ExpertResponseToEvent;
  removeAdminRights: User;
  respondToOrganizatorEvent: ExpertResponseToEvent;
  setSettings: SettingsValues;
  submitTariff: SubmitTariffResponse;
  unblockUser: Scalars['Boolean']['output'];
  updateTariff: Tariff;
  validateEventRequest: Scalars['Boolean']['output'];
  verifiesUser?: Maybe<Scalars['Boolean']['output']>;
  voteVerifyExpert: VoteVerifyExpert;
};


export type MutationAcceptEventArgs = {
  eventId: Scalars['ID']['input'];
  withPayment?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationAcceptInviteOrganizatorEventArgs = {
  requestID: Scalars['ID']['input'];
};


export type MutationAcceptPlatformRightsArgs = {
  data: AcceptPlatformRightsInput;
};


export type MutationAcceptProfileRequestArgs = {
  requestId: Scalars['ID']['input'];
};


export type MutationAcceptRepresentativeExpertRequestArgs = {
  requestId: Scalars['ID']['input'];
};


export type MutationAcceptRepresentativeRequestArgs = {
  requestID: Scalars['ID']['input'];
};


export type MutationAcceptResponOrganizatorEventArgs = {
  data: CreateChildOrganizatorEventInput;
  responceID: Scalars['ID']['input'];
};


export type MutationAssignAdminRightsArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationAssignTariffArgs = {
  data: AssignTariffInput;
};


export type MutationBlockUserArgs = {
  input: CreateUserBlockInput;
};


export type MutationCreateChildrenEventArgs = {
  data?: InputMaybe<CreateChildrenEventInput>;
};


export type MutationCreateEventRequestArgs = {
  event: CreateEventRequestInput;
};


export type MutationCreateInviteToOrganizatorEventArgs = {
  data: CreateInviteToOrganizatorEvent;
};


export type MutationCreateNotificationArgs = {
  data: CreateNotificationInput;
};


export type MutationCreatePaidLinkEventArgs = {
  data: CreatePaymentLinkEvent;
};


export type MutationCreateProfileRequestArgs = {
  input: ProfileCreateInput;
};


export type MutationCreatePromocodeArgs = {
  data: CreatePromocodeInput;
};


export type MutationCreateRepresentativeExpertRequestArgs = {
  expertID: Scalars['ID']['input'];
};


export type MutationCreateRepresentativeRequestArgs = {
  data: CreateRepresentativeExpertRequestInput;
};


export type MutationCreateVoteArgs = {
  data: CreateVoteInput;
};


export type MutationDeleteEventRequestArgs = {
  requestID: Scalars['ID']['input'];
};


export type MutationDeleteVerificationArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationDeleteVoteArgs = {
  id: DeleteVoteInput;
};


export type MutationPlatformRightsTextWriteArgs = {
  text: Scalars['String']['input'];
};


export type MutationReadNotificationArgs = {
  id?: InputMaybe<Array<Scalars['ID']['input']>>;
};


export type MutationRejectEventArgs = {
  eventId: Scalars['ID']['input'];
  reason: Scalars['String']['input'];
};


export type MutationRejectInviteOrganizatorEventArgs = {
  requestID: Scalars['ID']['input'];
};


export type MutationRejectProfileRequestArgs = {
  reason: Scalars['String']['input'];
  requestId: Scalars['ID']['input'];
};


export type MutationRejectRepresentativeExpertRequestArgs = {
  requestId: Scalars['ID']['input'];
};


export type MutationRejectRepresentativeRequestArgs = {
  requestID: Scalars['ID']['input'];
};


export type MutationRejectRespondOrganizatorEventArgs = {
  responceID: Scalars['ID']['input'];
};


export type MutationRemoveAdminRightsArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationRespondToOrganizatorEventArgs = {
  eventID: Scalars['ID']['input'];
};


export type MutationSetSettingsArgs = {
  data: SettingsValuesInput;
};


export type MutationSubmitTariffArgs = {
  data: SubmitTariffInput;
};


export type MutationUnblockUserArgs = {
  userId: Scalars['ID']['input'];
};


export type MutationUpdateTariffArgs = {
  data: UpdateTariffInput;
  id: Scalars['ID']['input'];
};


export type MutationValidateEventRequestArgs = {
  eventID: CreateEventRequestInput;
};


export type MutationVerifiesUserArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationVoteVerifyExpertArgs = {
  vote: VoteVerifyExpertInput;
};

export type NewNotification = {
  __typename?: 'NewNotification';
  actions?: Maybe<Array<NewNotificationAction>>;
  id?: Maybe<Scalars['ID']['output']>;
  level?: Maybe<NotificationLevel>;
  message: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export type NewNotificationAction = {
  __typename?: 'NewNotificationAction';
  label: Scalars['String']['output'];
  payload?: Maybe<Scalars['Map']['output']>;
  type: NotificationActionType;
  variant: NotificationActionVariant;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

export type Notification = Node & {
  __typename?: 'Notification';
  actions?: Maybe<Array<NotificationAction>>;
  author?: Maybe<User>;
  createdAt: Scalars['Time']['output'];
  directionTargets?: Maybe<Array<CommunityDirection>>;
  eventRequest?: Maybe<EventRequest>;
  expertAuditory?: Maybe<Array<User>>;
  expiresAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  isGlobal: Scalars['Boolean']['output'];
  level: NotificationLevel;
  message: Scalars['String']['output'];
  regionTargets?: Maybe<Array<Region>>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  targetRights?: Maybe<Scalars['Int']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
  userNotification?: Maybe<Array<UserNotification>>;
};

export type NotificationAction = Node & {
  __typename?: 'NotificationAction';
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
  notification: Notification;
  payload?: Maybe<Scalars['Map']['output']>;
  type: NotificationActionType;
  updatedAt: Scalars['Time']['output'];
  variant: NotificationActionVariant;
};

/** A connection to a list of items. */
export type NotificationActionConnection = {
  __typename?: 'NotificationActionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NotificationActionEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type NotificationActionEdge = {
  __typename?: 'NotificationActionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<NotificationAction>;
};

/** Ordering options for NotificationAction connections */
export type NotificationActionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order NotificationActions. */
  field: NotificationActionOrderField;
};

/** Properties by which NotificationAction connections can be ordered. */
export enum NotificationActionOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** NotificationActionType is enum for the field type */
export enum NotificationActionType {
  ApiCall = 'API_CALL',
  Dismiss = 'DISMISS',
  Navigate = 'NAVIGATE'
}

/** NotificationActionVariant is enum for the field variant */
export enum NotificationActionVariant {
  Accent = 'accent',
  Ghost = 'ghost',
  Primary = 'primary',
  Secondary = 'secondary'
}

/**
 * NotificationActionWhereInput is used for filtering NotificationAction objects.
 * Input was generated by ent.
 */
export type NotificationActionWhereInput = {
  and?: InputMaybe<Array<NotificationActionWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** notification edge predicates */
  hasNotification?: InputMaybe<Scalars['Boolean']['input']>;
  hasNotificationWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** label field predicates */
  label?: InputMaybe<Scalars['String']['input']>;
  labelContains?: InputMaybe<Scalars['String']['input']>;
  labelContainsFold?: InputMaybe<Scalars['String']['input']>;
  labelEqualFold?: InputMaybe<Scalars['String']['input']>;
  labelGT?: InputMaybe<Scalars['String']['input']>;
  labelGTE?: InputMaybe<Scalars['String']['input']>;
  labelHasPrefix?: InputMaybe<Scalars['String']['input']>;
  labelHasSuffix?: InputMaybe<Scalars['String']['input']>;
  labelIn?: InputMaybe<Array<Scalars['String']['input']>>;
  labelLT?: InputMaybe<Scalars['String']['input']>;
  labelLTE?: InputMaybe<Scalars['String']['input']>;
  labelNEQ?: InputMaybe<Scalars['String']['input']>;
  labelNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<NotificationActionWhereInput>;
  or?: InputMaybe<Array<NotificationActionWhereInput>>;
  /** type field predicates */
  type?: InputMaybe<NotificationActionType>;
  typeIn?: InputMaybe<Array<NotificationActionType>>;
  typeNEQ?: InputMaybe<NotificationActionType>;
  typeNotIn?: InputMaybe<Array<NotificationActionType>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** variant field predicates */
  variant?: InputMaybe<NotificationActionVariant>;
  variantIn?: InputMaybe<Array<NotificationActionVariant>>;
  variantNEQ?: InputMaybe<NotificationActionVariant>;
  variantNotIn?: InputMaybe<Array<NotificationActionVariant>>;
};

/** A connection to a list of items. */
export type NotificationConnection = {
  __typename?: 'NotificationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NotificationEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type NotificationEdge = {
  __typename?: 'NotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Notification>;
};

/** NotificationLevel is enum for the field level */
export enum NotificationLevel {
  Error = 'error',
  Info = 'info',
  Success = 'success',
  Warning = 'warning'
}

/** Ordering options for Notification connections */
export type NotificationOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Notifications. */
  field: NotificationOrderField;
};

/** Properties by which Notification connections can be ordered. */
export enum NotificationOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * NotificationWhereInput is used for filtering Notification objects.
 * Input was generated by ent.
 */
export type NotificationWhereInput = {
  and?: InputMaybe<Array<NotificationWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** expires_at field predicates */
  expiresAt?: InputMaybe<Scalars['Time']['input']>;
  expiresAtGT?: InputMaybe<Scalars['Time']['input']>;
  expiresAtGTE?: InputMaybe<Scalars['Time']['input']>;
  expiresAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  expiresAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  expiresAtLT?: InputMaybe<Scalars['Time']['input']>;
  expiresAtLTE?: InputMaybe<Scalars['Time']['input']>;
  expiresAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  expiresAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  expiresAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** actions edge predicates */
  hasActions?: InputMaybe<Scalars['Boolean']['input']>;
  hasActionsWith?: InputMaybe<Array<NotificationActionWhereInput>>;
  /** author edge predicates */
  hasAuthor?: InputMaybe<Scalars['Boolean']['input']>;
  hasAuthorWith?: InputMaybe<Array<UserWhereInput>>;
  /** direction_targets edge predicates */
  hasDirectionTargets?: InputMaybe<Scalars['Boolean']['input']>;
  hasDirectionTargetsWith?: InputMaybe<Array<CommunityDirectionWhereInput>>;
  /** event_request edge predicates */
  hasEventRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventRequestWith?: InputMaybe<Array<EventRequestWhereInput>>;
  /** expert_auditory edge predicates */
  hasExpertAuditory?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertAuditoryWith?: InputMaybe<Array<UserWhereInput>>;
  /** region_targets edge predicates */
  hasRegionTargets?: InputMaybe<Scalars['Boolean']['input']>;
  hasRegionTargetsWith?: InputMaybe<Array<RegionWhereInput>>;
  /** user_notification edge predicates */
  hasUserNotification?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserNotificationWith?: InputMaybe<Array<UserNotificationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** is_global field predicates */
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  isGlobalNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** level field predicates */
  level?: InputMaybe<NotificationLevel>;
  levelIn?: InputMaybe<Array<NotificationLevel>>;
  levelNEQ?: InputMaybe<NotificationLevel>;
  levelNotIn?: InputMaybe<Array<NotificationLevel>>;
  /** message field predicates */
  message?: InputMaybe<Scalars['String']['input']>;
  messageContains?: InputMaybe<Scalars['String']['input']>;
  messageContainsFold?: InputMaybe<Scalars['String']['input']>;
  messageEqualFold?: InputMaybe<Scalars['String']['input']>;
  messageGT?: InputMaybe<Scalars['String']['input']>;
  messageGTE?: InputMaybe<Scalars['String']['input']>;
  messageHasPrefix?: InputMaybe<Scalars['String']['input']>;
  messageHasSuffix?: InputMaybe<Scalars['String']['input']>;
  messageIn?: InputMaybe<Array<Scalars['String']['input']>>;
  messageLT?: InputMaybe<Scalars['String']['input']>;
  messageLTE?: InputMaybe<Scalars['String']['input']>;
  messageNEQ?: InputMaybe<Scalars['String']['input']>;
  messageNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<NotificationWhereInput>;
  or?: InputMaybe<Array<NotificationWhereInput>>;
  /** target_rights field predicates */
  targetRights?: InputMaybe<Scalars['Int']['input']>;
  targetRightsGT?: InputMaybe<Scalars['Int']['input']>;
  targetRightsGTE?: InputMaybe<Scalars['Int']['input']>;
  targetRightsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  targetRightsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  targetRightsLT?: InputMaybe<Scalars['Int']['input']>;
  targetRightsLTE?: InputMaybe<Scalars['Int']['input']>;
  targetRightsNEQ?: InputMaybe<Scalars['Int']['input']>;
  targetRightsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  targetRightsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

export type Organizator = Node & {
  __typename?: 'Organizator';
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  myOrganizatorVote: VoteType;
  organizationName: Scalars['String']['output'];
  organizationURL?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['Time']['output'];
  user: User;
  vote?: Maybe<Array<Vote>>;
};

export type OrganizatorEvent = Node & {
  __typename?: 'OrganizatorEvent';
  deletedAt?: Maybe<Scalars['Time']['output']>;
  event: Event;
  feeType: OrganizatorEventFeeType;
  id: Scalars['ID']['output'];
  place?: Maybe<Scalars['String']['output']>;
  speakerBenefits: Scalars['String']['output'];
  targetAudience?: Maybe<Array<CommunityDirection>>;
  topic: Scalars['String']['output'];
  transferPaid: Scalars['Boolean']['output'];
  verificationMode: OrganizatorEventVerificationMode;
};

/** OrganizatorEventFeeType is enum for the field fee_type */
export enum OrganizatorEventFeeType {
  Free = 'free',
  Negotiable = 'negotiable',
  Paid = 'paid'
}

/** OrganizatorEventVerificationMode is enum for the field verification_mode */
export enum OrganizatorEventVerificationMode {
  All = 'all',
  VerifiedOnly = 'verified_only'
}

/**
 * OrganizatorEventWhereInput is used for filtering OrganizatorEvent objects.
 * Input was generated by ent.
 */
export type OrganizatorEventWhereInput = {
  and?: InputMaybe<Array<OrganizatorEventWhereInput>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** fee_type field predicates */
  feeType?: InputMaybe<OrganizatorEventFeeType>;
  feeTypeIn?: InputMaybe<Array<OrganizatorEventFeeType>>;
  feeTypeNEQ?: InputMaybe<OrganizatorEventFeeType>;
  feeTypeNotIn?: InputMaybe<Array<OrganizatorEventFeeType>>;
  /** event edge predicates */
  hasEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** target_audience edge predicates */
  hasTargetAudience?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetAudienceWith?: InputMaybe<Array<CommunityDirectionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<OrganizatorEventWhereInput>;
  or?: InputMaybe<Array<OrganizatorEventWhereInput>>;
  /** place field predicates */
  place?: InputMaybe<Scalars['String']['input']>;
  placeContains?: InputMaybe<Scalars['String']['input']>;
  placeContainsFold?: InputMaybe<Scalars['String']['input']>;
  placeEqualFold?: InputMaybe<Scalars['String']['input']>;
  placeGT?: InputMaybe<Scalars['String']['input']>;
  placeGTE?: InputMaybe<Scalars['String']['input']>;
  placeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  placeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  placeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  placeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  placeLT?: InputMaybe<Scalars['String']['input']>;
  placeLTE?: InputMaybe<Scalars['String']['input']>;
  placeNEQ?: InputMaybe<Scalars['String']['input']>;
  placeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  placeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** speaker_benefits field predicates */
  speakerBenefits?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsContains?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsContainsFold?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsEqualFold?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsGT?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsGTE?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  speakerBenefitsLT?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsLTE?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsNEQ?: InputMaybe<Scalars['String']['input']>;
  speakerBenefitsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** topic field predicates */
  topic?: InputMaybe<Scalars['String']['input']>;
  topicContains?: InputMaybe<Scalars['String']['input']>;
  topicContainsFold?: InputMaybe<Scalars['String']['input']>;
  topicEqualFold?: InputMaybe<Scalars['String']['input']>;
  topicGT?: InputMaybe<Scalars['String']['input']>;
  topicGTE?: InputMaybe<Scalars['String']['input']>;
  topicHasPrefix?: InputMaybe<Scalars['String']['input']>;
  topicHasSuffix?: InputMaybe<Scalars['String']['input']>;
  topicIn?: InputMaybe<Array<Scalars['String']['input']>>;
  topicLT?: InputMaybe<Scalars['String']['input']>;
  topicLTE?: InputMaybe<Scalars['String']['input']>;
  topicNEQ?: InputMaybe<Scalars['String']['input']>;
  topicNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** transfer_paid field predicates */
  transferPaid?: InputMaybe<Scalars['Boolean']['input']>;
  transferPaidNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** verification_mode field predicates */
  verificationMode?: InputMaybe<OrganizatorEventVerificationMode>;
  verificationModeIn?: InputMaybe<Array<OrganizatorEventVerificationMode>>;
  verificationModeNEQ?: InputMaybe<OrganizatorEventVerificationMode>;
  verificationModeNotIn?: InputMaybe<Array<OrganizatorEventVerificationMode>>;
};

/** Ordering options for Organizator connections */
export type OrganizatorOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Organizators. */
  field: OrganizatorOrderField;
};

/** Properties by which Organizator connections can be ordered. */
export enum OrganizatorOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type OrganizatorProfileRequest = Node & {
  __typename?: 'OrganizatorProfileRequest';
  id: Scalars['ID']['output'];
  newOrganizationName: Scalars['String']['output'];
  newOrganizationURL?: Maybe<Scalars['String']['output']>;
  oldOrganizationName?: Maybe<Scalars['String']['output']>;
  oldOrganizationURL?: Maybe<Scalars['String']['output']>;
  request: ProfileRequest;
};

/**
 * OrganizatorProfileRequestWhereInput is used for filtering OrganizatorProfileRequest objects.
 * Input was generated by ent.
 */
export type OrganizatorProfileRequestWhereInput = {
  and?: InputMaybe<Array<OrganizatorProfileRequestWhereInput>>;
  /** request edge predicates */
  hasRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasRequestWith?: InputMaybe<Array<ProfileRequestWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** new_organization_name field predicates */
  newOrganizationName?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameContains?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameGT?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameGTE?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newOrganizationNameLT?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameLTE?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameNEQ?: InputMaybe<Scalars['String']['input']>;
  newOrganizationNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** new_organization_url field predicates */
  newOrganizationURL?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLContains?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLGT?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLGTE?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newOrganizationURLIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newOrganizationURLLT?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLLTE?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLNEQ?: InputMaybe<Scalars['String']['input']>;
  newOrganizationURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  newOrganizationURLNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<OrganizatorProfileRequestWhereInput>;
  /** old_organization_name field predicates */
  oldOrganizationName?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameContains?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameGT?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameGTE?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldOrganizationNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldOrganizationNameLT?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameLTE?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameNEQ?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldOrganizationNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** old_organization_url field predicates */
  oldOrganizationURL?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLContains?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLGT?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLGTE?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldOrganizationURLIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldOrganizationURLLT?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLLTE?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLNEQ?: InputMaybe<Scalars['String']['input']>;
  oldOrganizationURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  oldOrganizationURLNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<OrganizatorProfileRequestWhereInput>>;
};

/**
 * OrganizatorWhereInput is used for filtering Organizator objects.
 * Input was generated by ent.
 */
export type OrganizatorWhereInput = {
  and?: InputMaybe<Array<OrganizatorWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** vote edge predicates */
  hasVote?: InputMaybe<Scalars['Boolean']['input']>;
  hasVoteWith?: InputMaybe<Array<VoteWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<OrganizatorWhereInput>;
  or?: InputMaybe<Array<OrganizatorWhereInput>>;
  /** organization_name field predicates */
  organizationName?: InputMaybe<Scalars['String']['input']>;
  organizationNameContains?: InputMaybe<Scalars['String']['input']>;
  organizationNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  organizationNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  organizationNameGT?: InputMaybe<Scalars['String']['input']>;
  organizationNameGTE?: InputMaybe<Scalars['String']['input']>;
  organizationNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  organizationNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  organizationNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  organizationNameLT?: InputMaybe<Scalars['String']['input']>;
  organizationNameLTE?: InputMaybe<Scalars['String']['input']>;
  organizationNameNEQ?: InputMaybe<Scalars['String']['input']>;
  organizationNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** organization_url field predicates */
  organizationURL?: InputMaybe<Scalars['String']['input']>;
  organizationURLContains?: InputMaybe<Scalars['String']['input']>;
  organizationURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  organizationURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  organizationURLGT?: InputMaybe<Scalars['String']['input']>;
  organizationURLGTE?: InputMaybe<Scalars['String']['input']>;
  organizationURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  organizationURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  organizationURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  organizationURLIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  organizationURLLT?: InputMaybe<Scalars['String']['input']>;
  organizationURLLTE?: InputMaybe<Scalars['String']['input']>;
  organizationURLNEQ?: InputMaybe<Scalars['String']['input']>;
  organizationURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  organizationURLNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type PaymentLink = Node & {
  __typename?: 'PaymentLink';
  amount: Scalars['Int']['output'];
  createdAt: Scalars['Time']['output'];
  entityID: Scalars['Int']['output'];
  entityType: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  orderID: Scalars['String']['output'];
  paymentLink: Scalars['String']['output'];
  promocodeID: Scalars['Int']['output'];
  sum: Scalars['Float']['output'];
  updatedAt: Scalars['Time']['output'];
  user: User;
  userID: Scalars['ID']['output'];
  version: Scalars['String']['output'];
};

/** Ordering options for PaymentLink connections */
export type PaymentLinkOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order PaymentLinks. */
  field: PaymentLinkOrderField;
};

/** Properties by which PaymentLink connections can be ordered. */
export enum PaymentLinkOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * PaymentLinkWhereInput is used for filtering PaymentLink objects.
 * Input was generated by ent.
 */
export type PaymentLinkWhereInput = {
  /** amount field predicates */
  amount?: InputMaybe<Scalars['Int']['input']>;
  amountGT?: InputMaybe<Scalars['Int']['input']>;
  amountGTE?: InputMaybe<Scalars['Int']['input']>;
  amountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  amountLT?: InputMaybe<Scalars['Int']['input']>;
  amountLTE?: InputMaybe<Scalars['Int']['input']>;
  amountNEQ?: InputMaybe<Scalars['Int']['input']>;
  amountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<PaymentLinkWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** entity_id field predicates */
  entityID?: InputMaybe<Scalars['Int']['input']>;
  entityIDGT?: InputMaybe<Scalars['Int']['input']>;
  entityIDGTE?: InputMaybe<Scalars['Int']['input']>;
  entityIDIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  entityIDLT?: InputMaybe<Scalars['Int']['input']>;
  entityIDLTE?: InputMaybe<Scalars['Int']['input']>;
  entityIDNEQ?: InputMaybe<Scalars['Int']['input']>;
  entityIDNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** entity_type field predicates */
  entityType?: InputMaybe<Scalars['String']['input']>;
  entityTypeContains?: InputMaybe<Scalars['String']['input']>;
  entityTypeContainsFold?: InputMaybe<Scalars['String']['input']>;
  entityTypeEqualFold?: InputMaybe<Scalars['String']['input']>;
  entityTypeGT?: InputMaybe<Scalars['String']['input']>;
  entityTypeGTE?: InputMaybe<Scalars['String']['input']>;
  entityTypeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  entityTypeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  entityTypeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  entityTypeLT?: InputMaybe<Scalars['String']['input']>;
  entityTypeLTE?: InputMaybe<Scalars['String']['input']>;
  entityTypeNEQ?: InputMaybe<Scalars['String']['input']>;
  entityTypeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<PaymentLinkWhereInput>;
  or?: InputMaybe<Array<PaymentLinkWhereInput>>;
  /** order_id field predicates */
  orderID?: InputMaybe<Scalars['String']['input']>;
  orderIDContains?: InputMaybe<Scalars['String']['input']>;
  orderIDContainsFold?: InputMaybe<Scalars['String']['input']>;
  orderIDEqualFold?: InputMaybe<Scalars['String']['input']>;
  orderIDGT?: InputMaybe<Scalars['String']['input']>;
  orderIDGTE?: InputMaybe<Scalars['String']['input']>;
  orderIDHasPrefix?: InputMaybe<Scalars['String']['input']>;
  orderIDHasSuffix?: InputMaybe<Scalars['String']['input']>;
  orderIDIn?: InputMaybe<Array<Scalars['String']['input']>>;
  orderIDLT?: InputMaybe<Scalars['String']['input']>;
  orderIDLTE?: InputMaybe<Scalars['String']['input']>;
  orderIDNEQ?: InputMaybe<Scalars['String']['input']>;
  orderIDNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** payment_link field predicates */
  paymentLink?: InputMaybe<Scalars['String']['input']>;
  paymentLinkContains?: InputMaybe<Scalars['String']['input']>;
  paymentLinkContainsFold?: InputMaybe<Scalars['String']['input']>;
  paymentLinkEqualFold?: InputMaybe<Scalars['String']['input']>;
  paymentLinkGT?: InputMaybe<Scalars['String']['input']>;
  paymentLinkGTE?: InputMaybe<Scalars['String']['input']>;
  paymentLinkHasPrefix?: InputMaybe<Scalars['String']['input']>;
  paymentLinkHasSuffix?: InputMaybe<Scalars['String']['input']>;
  paymentLinkIn?: InputMaybe<Array<Scalars['String']['input']>>;
  paymentLinkLT?: InputMaybe<Scalars['String']['input']>;
  paymentLinkLTE?: InputMaybe<Scalars['String']['input']>;
  paymentLinkNEQ?: InputMaybe<Scalars['String']['input']>;
  paymentLinkNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** promocode_id field predicates */
  promocodeID?: InputMaybe<Scalars['Int']['input']>;
  promocodeIDGT?: InputMaybe<Scalars['Int']['input']>;
  promocodeIDGTE?: InputMaybe<Scalars['Int']['input']>;
  promocodeIDIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  promocodeIDLT?: InputMaybe<Scalars['Int']['input']>;
  promocodeIDLTE?: InputMaybe<Scalars['Int']['input']>;
  promocodeIDNEQ?: InputMaybe<Scalars['Int']['input']>;
  promocodeIDNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** sum field predicates */
  sum?: InputMaybe<Scalars['Float']['input']>;
  sumGT?: InputMaybe<Scalars['Float']['input']>;
  sumGTE?: InputMaybe<Scalars['Float']['input']>;
  sumIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  sumLT?: InputMaybe<Scalars['Float']['input']>;
  sumLTE?: InputMaybe<Scalars['Float']['input']>;
  sumNEQ?: InputMaybe<Scalars['Float']['input']>;
  sumNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** user_id field predicates */
  userID?: InputMaybe<Scalars['ID']['input']>;
  userIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  userIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  userIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** version field predicates */
  version?: InputMaybe<Scalars['String']['input']>;
  versionContains?: InputMaybe<Scalars['String']['input']>;
  versionContainsFold?: InputMaybe<Scalars['String']['input']>;
  versionEqualFold?: InputMaybe<Scalars['String']['input']>;
  versionGT?: InputMaybe<Scalars['String']['input']>;
  versionGTE?: InputMaybe<Scalars['String']['input']>;
  versionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  versionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  versionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  versionLT?: InputMaybe<Scalars['String']['input']>;
  versionLTE?: InputMaybe<Scalars['String']['input']>;
  versionNEQ?: InputMaybe<Scalars['String']['input']>;
  versionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type PreExpertRequest = Node & {
  __typename?: 'PreExpertRequest';
  creator: User;
  deletedAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  status: PreExpertRequestStatus;
  target: User;
};

/** A connection to a list of items. */
export type PreExpertRequestConnection = {
  __typename?: 'PreExpertRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PreExpertRequestEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PreExpertRequestEdge = {
  __typename?: 'PreExpertRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<PreExpertRequest>;
};

/** PreExpertRequestStatus is enum for the field status */
export enum PreExpertRequestStatus {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected'
}

/**
 * PreExpertRequestWhereInput is used for filtering PreExpertRequest objects.
 * Input was generated by ent.
 */
export type PreExpertRequestWhereInput = {
  and?: InputMaybe<Array<PreExpertRequestWhereInput>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** creator edge predicates */
  hasCreator?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatorWith?: InputMaybe<Array<UserWhereInput>>;
  /** target edge predicates */
  hasTarget?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<PreExpertRequestWhereInput>;
  or?: InputMaybe<Array<PreExpertRequestWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<PreExpertRequestStatus>;
  statusIn?: InputMaybe<Array<PreExpertRequestStatus>>;
  statusNEQ?: InputMaybe<PreExpertRequestStatus>;
  statusNotIn?: InputMaybe<Array<PreExpertRequestStatus>>;
};

export type ProfileCreate = {
  __typename?: 'ProfileCreate';
  communityDirections: Array<Scalars['Int']['output']>;
  referUsername?: Maybe<Scalars['String']['output']>;
  regalia?: Maybe<Scalars['String']['output']>;
  region: Scalars['Int']['output'];
  simpleSpeechLink?: Maybe<Scalars['String']['output']>;
  socialMediaLink?: Maybe<Scalars['String']['output']>;
};

export type ProfileCreateInput = {
  changeType: ProfileRequestChangeType;
  expert?: InputMaybe<CreateExpertInput>;
  organizator?: InputMaybe<CreateOrganizatorInput>;
  preExpert?: InputMaybe<CreatePreExpertInput>;
  type: ProfileRequestType;
};

export type ProfileRequest = Node & {
  __typename?: 'ProfileRequest';
  adminComment?: Maybe<Scalars['String']['output']>;
  changeType: ProfileRequestChangeType;
  createdAt: Scalars['Time']['output'];
  creator: User;
  deletedAt?: Maybe<Scalars['Time']['output']>;
  expertRequest?: Maybe<ExpertProfileRequest>;
  id: Scalars['ID']['output'];
  organizatorRequest?: Maybe<OrganizatorProfileRequest>;
  status: ProfileRequestStatus;
  type: ProfileRequestType;
  updatedAt: Scalars['Time']['output'];
  verifiedAdmin?: Maybe<User>;
};

/** ProfileRequestChangeType is enum for the field change_type */
export enum ProfileRequestChangeType {
  Create = 'create',
  Update = 'update'
}

/** A connection to a list of items. */
export type ProfileRequestConnection = {
  __typename?: 'ProfileRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProfileRequestEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ProfileRequestEdge = {
  __typename?: 'ProfileRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ProfileRequest>;
};

/** Ordering options for ProfileRequest connections */
export type ProfileRequestOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order ProfileRequests. */
  field: ProfileRequestOrderField;
};

/** Properties by which ProfileRequest connections can be ordered. */
export enum ProfileRequestOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** ProfileRequestStatus is enum for the field status */
export enum ProfileRequestStatus {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected'
}

/** ProfileRequestType is enum for the field type */
export enum ProfileRequestType {
  Expert = 'expert',
  Organizator = 'organizator',
  PreExpert = 'pre_expert'
}

/**
 * ProfileRequestWhereInput is used for filtering ProfileRequest objects.
 * Input was generated by ent.
 */
export type ProfileRequestWhereInput = {
  /** admin_comment field predicates */
  adminComment?: InputMaybe<Scalars['String']['input']>;
  adminCommentContains?: InputMaybe<Scalars['String']['input']>;
  adminCommentContainsFold?: InputMaybe<Scalars['String']['input']>;
  adminCommentEqualFold?: InputMaybe<Scalars['String']['input']>;
  adminCommentGT?: InputMaybe<Scalars['String']['input']>;
  adminCommentGTE?: InputMaybe<Scalars['String']['input']>;
  adminCommentHasPrefix?: InputMaybe<Scalars['String']['input']>;
  adminCommentHasSuffix?: InputMaybe<Scalars['String']['input']>;
  adminCommentIn?: InputMaybe<Array<Scalars['String']['input']>>;
  adminCommentIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  adminCommentLT?: InputMaybe<Scalars['String']['input']>;
  adminCommentLTE?: InputMaybe<Scalars['String']['input']>;
  adminCommentNEQ?: InputMaybe<Scalars['String']['input']>;
  adminCommentNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  adminCommentNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<ProfileRequestWhereInput>>;
  /** change_type field predicates */
  changeType?: InputMaybe<ProfileRequestChangeType>;
  changeTypeIn?: InputMaybe<Array<ProfileRequestChangeType>>;
  changeTypeNEQ?: InputMaybe<ProfileRequestChangeType>;
  changeTypeNotIn?: InputMaybe<Array<ProfileRequestChangeType>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** creator edge predicates */
  hasCreator?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatorWith?: InputMaybe<Array<UserWhereInput>>;
  /** expert_request edge predicates */
  hasExpertRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertRequestWith?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** organizator_request edge predicates */
  hasOrganizatorRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasOrganizatorRequestWith?: InputMaybe<Array<OrganizatorProfileRequestWhereInput>>;
  /** verified_admin edge predicates */
  hasVerifiedAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifiedAdminWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ProfileRequestWhereInput>;
  or?: InputMaybe<Array<ProfileRequestWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<ProfileRequestStatus>;
  statusIn?: InputMaybe<Array<ProfileRequestStatus>>;
  statusNEQ?: InputMaybe<ProfileRequestStatus>;
  statusNotIn?: InputMaybe<Array<ProfileRequestStatus>>;
  /** type field predicates */
  type?: InputMaybe<ProfileRequestType>;
  typeIn?: InputMaybe<Array<ProfileRequestType>>;
  typeNEQ?: InputMaybe<ProfileRequestType>;
  typeNotIn?: InputMaybe<Array<ProfileRequestType>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Promocode = Node & {
  __typename?: 'Promocode';
  activatedCount: Scalars['Int']['output'];
  active: Scalars['Boolean']['output'];
  code: Scalars['String']['output'];
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  discount: Scalars['Int']['output'];
  endAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  maxCountActivations: Scalars['Int']['output'];
  maxMouthSubscriptionDuration: Scalars['Int']['output'];
  maxUserCountActivations: Scalars['Int']['output'];
  startAt: Scalars['Time']['output'];
  tariffs?: Maybe<Array<Tariff>>;
  updatedAt: Scalars['Time']['output'];
  usesUsers?: Maybe<Array<User>>;
};

/** A connection to a list of items. */
export type PromocodeConnection = {
  __typename?: 'PromocodeConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PromocodeEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PromocodeEdge = {
  __typename?: 'PromocodeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Promocode>;
};

/** Ordering options for Promocode connections */
export type PromocodeOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Promocodes. */
  field: PromocodeOrderField;
};

/** Properties by which Promocode connections can be ordered. */
export enum PromocodeOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * PromocodeWhereInput is used for filtering Promocode objects.
 * Input was generated by ent.
 */
export type PromocodeWhereInput = {
  /** active field predicates */
  active?: InputMaybe<Scalars['Boolean']['input']>;
  activeNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<PromocodeWhereInput>>;
  /** code field predicates */
  code?: InputMaybe<Scalars['String']['input']>;
  codeContains?: InputMaybe<Scalars['String']['input']>;
  codeContainsFold?: InputMaybe<Scalars['String']['input']>;
  codeEqualFold?: InputMaybe<Scalars['String']['input']>;
  codeGT?: InputMaybe<Scalars['String']['input']>;
  codeGTE?: InputMaybe<Scalars['String']['input']>;
  codeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  codeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  codeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  codeLT?: InputMaybe<Scalars['String']['input']>;
  codeLTE?: InputMaybe<Scalars['String']['input']>;
  codeNEQ?: InputMaybe<Scalars['String']['input']>;
  codeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** discount field predicates */
  discount?: InputMaybe<Scalars['Int']['input']>;
  discountGT?: InputMaybe<Scalars['Int']['input']>;
  discountGTE?: InputMaybe<Scalars['Int']['input']>;
  discountIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  discountLT?: InputMaybe<Scalars['Int']['input']>;
  discountLTE?: InputMaybe<Scalars['Int']['input']>;
  discountNEQ?: InputMaybe<Scalars['Int']['input']>;
  discountNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** end_at field predicates */
  endAt?: InputMaybe<Scalars['Time']['input']>;
  endAtGT?: InputMaybe<Scalars['Time']['input']>;
  endAtGTE?: InputMaybe<Scalars['Time']['input']>;
  endAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endAtLT?: InputMaybe<Scalars['Time']['input']>;
  endAtLTE?: InputMaybe<Scalars['Time']['input']>;
  endAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  endAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** tariffs edge predicates */
  hasTariffs?: InputMaybe<Scalars['Boolean']['input']>;
  hasTariffsWith?: InputMaybe<Array<TariffWhereInput>>;
  /** uses_users edge predicates */
  hasUsesUsers?: InputMaybe<Scalars['Boolean']['input']>;
  hasUsesUsersWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** max_count_activations field predicates */
  maxCountActivations?: InputMaybe<Scalars['Int']['input']>;
  maxCountActivationsGT?: InputMaybe<Scalars['Int']['input']>;
  maxCountActivationsGTE?: InputMaybe<Scalars['Int']['input']>;
  maxCountActivationsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  maxCountActivationsLT?: InputMaybe<Scalars['Int']['input']>;
  maxCountActivationsLTE?: InputMaybe<Scalars['Int']['input']>;
  maxCountActivationsNEQ?: InputMaybe<Scalars['Int']['input']>;
  maxCountActivationsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** max_mouth_subscription_duration field predicates */
  maxMouthSubscriptionDuration?: InputMaybe<Scalars['Int']['input']>;
  maxMouthSubscriptionDurationGT?: InputMaybe<Scalars['Int']['input']>;
  maxMouthSubscriptionDurationGTE?: InputMaybe<Scalars['Int']['input']>;
  maxMouthSubscriptionDurationIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  maxMouthSubscriptionDurationLT?: InputMaybe<Scalars['Int']['input']>;
  maxMouthSubscriptionDurationLTE?: InputMaybe<Scalars['Int']['input']>;
  maxMouthSubscriptionDurationNEQ?: InputMaybe<Scalars['Int']['input']>;
  maxMouthSubscriptionDurationNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** max_user_count_activations field predicates */
  maxUserCountActivations?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivationsGT?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivationsGTE?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivationsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  maxUserCountActivationsLT?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivationsLTE?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivationsNEQ?: InputMaybe<Scalars['Int']['input']>;
  maxUserCountActivationsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  not?: InputMaybe<PromocodeWhereInput>;
  or?: InputMaybe<Array<PromocodeWhereInput>>;
  /** start_at field predicates */
  startAt?: InputMaybe<Scalars['Time']['input']>;
  startAtGT?: InputMaybe<Scalars['Time']['input']>;
  startAtGTE?: InputMaybe<Scalars['Time']['input']>;
  startAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startAtLT?: InputMaybe<Scalars['Time']['input']>;
  startAtLTE?: InputMaybe<Scalars['Time']['input']>;
  startAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  startAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Query = {
  __typename?: 'Query';
  ProfileRequest: ProfileRequest;
  analisticVotes?: Maybe<Array<Vote>>;
  analisticVotesHistory?: Maybe<Array<VoteHistory>>;
  calcSubscriptionPrice?: Maybe<Scalars['Float']['output']>;
  checkCanUsePromocode: Scalars['Boolean']['output'];
  checkPromocode: CheckPromocodeResponse;
  communityDirections: Array<CommunityDirection>;
  communityDirectionsCategorized: Array<CategoryCommunityDirection>;
  event: Event;
  eventPromoWords: EventPromoWordConnection;
  eventRequest: EventRequest;
  eventRequests: EventRequestConnection;
  events: EventConnection;
  expertProfile: ExpertProfile;
  expertProfileRequests: Array<ExpertProfileRequest>;
  expertProfiles: ExpertProfileConnection;
  expertReportStatistic: Scalars['String']['output'];
  expertRepresentativeEvents: EventConnection;
  expertResponseToEvents: ExpertResponseToEventConnection;
  inputEvent: Event;
  mailingUsersStatistic: Scalars['Boolean']['output'];
  me: User;
  myEventRequests: EventRequestConnection;
  myNotifications: UserNotificationConnection;
  myProfileRequest?: Maybe<ProfileRequest>;
  myResponseToEvent: ExpertResponseToEvent;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  notificationActions: NotificationActionConnection;
  notifications: NotificationConnection;
  organizatorProfileRequests: Array<OrganizatorProfileRequest>;
  pendingverifyExpertRequest?: Maybe<Array<VerifyExpertRequest>>;
  platformRightsText: Scalars['String']['output'];
  preExpertRequests: PreExpertRequestConnection;
  profileRequests: ProfileRequestConnection;
  promocodes: PromocodeConnection;
  regions: Array<Region>;
  representativeExpertRequests: RepresentativeExpertRequestConnection;
  representativeExperts: UserConnection;
  searchExpertToOrganizatorEvent: Array<User>;
  settings: SettingsValues;
  statistic: Statistic;
  tariffSubscriptionLogs: Array<TariffSubscriptionLog>;
  tariffSubscriptions: Array<TariffSubscription>;
  tariffs: Array<Tariff>;
  user: User;
  userBlocks: Array<UserBlock>;
  userNotifications: UserNotificationConnection;
  userPlatforms: Array<UserPlatform>;
  userTariffLimits: Tariff;
  users: UserConnection;
  verifyExpertRequest: VerifyExpertRequest;
  verifyExpertRequests: Array<VerifyExpertRequest>;
  voteHistories: Array<VoteHistory>;
  voteVerifyExperts: Array<VoteVerifyExpert>;
  votes: Array<Vote>;
  votesVerifyExpert?: Maybe<Array<VoteVerifyExpert>>;
};


export type QueryProfileRequestArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAnalisticVotesArgs = {
  eventID: Scalars['ID']['input'];
};


export type QueryAnalisticVotesHistoryArgs = {
  eventID: Scalars['ID']['input'];
};


export type QueryCalcSubscriptionPriceArgs = {
  data: CalcSubscriptionPriceInput;
};


export type QueryCheckCanUsePromocodeArgs = {
  promocode: Scalars['String']['input'];
};


export type QueryCheckPromocodeArgs = {
  code: Scalars['String']['input'];
};


export type QueryEventArgs = {
  id: Scalars['ID']['input'];
};


export type QueryEventPromoWordsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EventPromoWordOrder>;
  where?: InputMaybe<EventPromoWordWhereInput>;
};


export type QueryEventRequestArgs = {
  id: Scalars['ID']['input'];
};


export type QueryEventRequestsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EventRequestOrder>;
  where?: InputMaybe<EventRequestWhereInput>;
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EventOrder>;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryExpertProfileArgs = {
  id: Scalars['ID']['input'];
};


export type QueryExpertProfilesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ExpertProfileOrder>;
  where?: InputMaybe<ExpertProfileWhereInput>;
};


export type QueryExpertReportStatisticArgs = {
  expertId: Scalars['ID']['input'];
};


export type QueryExpertRepresentativeEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  expertID?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryExpertResponseToEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ExpertResponseToEventOrder>;
  where?: InputMaybe<ExpertResponseToEventWhereInput>;
};


export type QueryInputEventArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
  promoWord?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMailingUsersStatisticArgs = {
  context?: InputMaybe<RoleContext>;
};


export type QueryMyEventRequestsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EventRequestOrder>;
  where?: InputMaybe<EventRequestWhereInput>;
};


export type QueryMyNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotificationWhereInput>;
};


export type QueryMyProfileRequestArgs = {
  type: ProfileRequestType;
};


export type QueryMyResponseToEventArgs = {
  eventID: Scalars['ID']['input'];
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryNotificationActionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<NotificationActionOrder>;
  where?: InputMaybe<NotificationActionWhereInput>;
};


export type QueryNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<NotificationOrder>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryPendingverifyExpertRequestArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
};


export type QueryPreExpertRequestsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PreExpertRequestWhereInput>;
};


export type QueryProfileRequestsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ProfileRequestOrder>;
  where?: InputMaybe<ProfileRequestWhereInput>;
};


export type QueryPromocodesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PromocodeOrder>;
  where?: InputMaybe<PromocodeWhereInput>;
};


export type QueryRepresentativeExpertRequestsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<RepresentativeExpertRequestOrder>;
  where?: InputMaybe<RepresentativeExpertRequestWhereInput>;
};


export type QueryRepresentativeExpertsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  expertID?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QuerySearchExpertToOrganizatorEventArgs = {
  query: Scalars['String']['input'];
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUserNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserNotificationOrder>;
  where?: InputMaybe<UserNotificationWhereInput>;
};


export type QueryUserTariffLimitsArgs = {
  userID: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryVerifyExpertRequestArgs = {
  id: Scalars['ID']['input'];
};


export type QueryVotesVerifyExpertArgs = {
  limit: Scalars['Int']['input'];
  offset: Scalars['Int']['input'];
};

export type Region = Node & {
  __typename?: 'Region';
  expertProfileRequestAsNew?: Maybe<Array<ExpertProfileRequest>>;
  expertProfileRequestAsOld?: Maybe<Array<ExpertProfileRequest>>;
  expertProfiles?: Maybe<Array<ExpertProfile>>;
  id: Scalars['ID']['output'];
  regionName: Scalars['String']['output'];
  regionTargets?: Maybe<Array<Notification>>;
};

/**
 * RegionWhereInput is used for filtering Region objects.
 * Input was generated by ent.
 */
export type RegionWhereInput = {
  and?: InputMaybe<Array<RegionWhereInput>>;
  /** expert_profile_request_as_new edge predicates */
  hasExpertProfileRequestAsNew?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfileRequestAsNewWith?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** expert_profile_request_as_old edge predicates */
  hasExpertProfileRequestAsOld?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfileRequestAsOldWith?: InputMaybe<Array<ExpertProfileRequestWhereInput>>;
  /** expert_profiles edge predicates */
  hasExpertProfiles?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfilesWith?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** region_targets edge predicates */
  hasRegionTargets?: InputMaybe<Scalars['Boolean']['input']>;
  hasRegionTargetsWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<RegionWhereInput>;
  or?: InputMaybe<Array<RegionWhereInput>>;
  /** region_name field predicates */
  regionName?: InputMaybe<Scalars['String']['input']>;
  regionNameContains?: InputMaybe<Scalars['String']['input']>;
  regionNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  regionNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  regionNameGT?: InputMaybe<Scalars['String']['input']>;
  regionNameGTE?: InputMaybe<Scalars['String']['input']>;
  regionNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  regionNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  regionNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  regionNameLT?: InputMaybe<Scalars['String']['input']>;
  regionNameLTE?: InputMaybe<Scalars['String']['input']>;
  regionNameNEQ?: InputMaybe<Scalars['String']['input']>;
  regionNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RepresentativeExpertRequest = Node & {
  __typename?: 'RepresentativeExpertRequest';
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  representativeUser: User;
  status: RepresentativeExpertRequestStatus;
  targetUser: User;
  type: RepresentativeExpertRequestType;
  updatedAt: Scalars['Time']['output'];
};

/** A connection to a list of items. */
export type RepresentativeExpertRequestConnection = {
  __typename?: 'RepresentativeExpertRequestConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RepresentativeExpertRequestEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type RepresentativeExpertRequestEdge = {
  __typename?: 'RepresentativeExpertRequestEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<RepresentativeExpertRequest>;
};

/** Ordering options for RepresentativeExpertRequest connections */
export type RepresentativeExpertRequestOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order RepresentativeExpertRequests. */
  field: RepresentativeExpertRequestOrderField;
};

/** Properties by which RepresentativeExpertRequest connections can be ordered. */
export enum RepresentativeExpertRequestOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** RepresentativeExpertRequestStatus is enum for the field status */
export enum RepresentativeExpertRequestStatus {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected'
}

/** RepresentativeExpertRequestType is enum for the field type */
export enum RepresentativeExpertRequestType {
  Invite = 'invite',
  Request = 'request'
}

/**
 * RepresentativeExpertRequestWhereInput is used for filtering RepresentativeExpertRequest objects.
 * Input was generated by ent.
 */
export type RepresentativeExpertRequestWhereInput = {
  and?: InputMaybe<Array<RepresentativeExpertRequestWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** representative_user edge predicates */
  hasRepresentativeUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasRepresentativeUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** target_user edge predicates */
  hasTargetUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<RepresentativeExpertRequestWhereInput>;
  or?: InputMaybe<Array<RepresentativeExpertRequestWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<RepresentativeExpertRequestStatus>;
  statusIn?: InputMaybe<Array<RepresentativeExpertRequestStatus>>;
  statusNEQ?: InputMaybe<RepresentativeExpertRequestStatus>;
  statusNotIn?: InputMaybe<Array<RepresentativeExpertRequestStatus>>;
  /** type field predicates */
  type?: InputMaybe<RepresentativeExpertRequestType>;
  typeIn?: InputMaybe<Array<RepresentativeExpertRequestType>>;
  typeNEQ?: InputMaybe<RepresentativeExpertRequestType>;
  typeNotIn?: InputMaybe<Array<RepresentativeExpertRequestType>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export enum RoleContext {
  Admin = 'admin',
  Expert = 'expert',
  User = 'user'
}

export type SettingsValues = {
  __typename?: 'SettingsValues';
  notificationsFromAppEnabled: Scalars['Boolean']['output'];
  notificationsFromExperts: Scalars['Boolean']['output'];
  peopleRatingEnabled: Scalars['Boolean']['output'];
};

export type SettingsValuesInput = {
  notificationsFromAppEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  notificationsFromExperts?: InputMaybe<Scalars['Boolean']['input']>;
  peopleRatingEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Statistic = {
  __typename?: 'Statistic';
  eventsCount: Scalars['Int']['output'];
  eventsHoursCount: Scalars['Int']['output'];
  usersCount: Scalars['Int']['output'];
  votesCount: Scalars['Int']['output'];
};

export type SubmitTariffInput = {
  durationMonths?: InputMaybe<Scalars['Uint']['input']>;
  email: Scalars['String']['input'];
  promocode?: InputMaybe<Scalars['String']['input']>;
  tariffID: Scalars['ID']['input'];
};

export type SubmitTariffResponse = {
  __typename?: 'SubmitTariffResponse';
  discount: Scalars['Float']['output'];
  openedByPromocode: Scalars['Boolean']['output'];
  paymentLink: Scalars['String']['output'];
  promocodeResult: UserPromocodeResult;
};

export type Subscription = {
  __typename?: 'Subscription';
  notificationAdded: NewNotification;
};

export type Tariff = Node & {
  __typename?: 'Tariff';
  active: Scalars['Boolean']['output'];
  activeWordDurationHours: Scalars['Int']['output'];
  countExpertsInCreateCommunity: Scalars['Int']['output'];
  createProfessionalCommunities: Scalars['Int']['output'];
  createdAt: Scalars['Time']['output'];
  eventsPerMonth: Scalars['Int']['output'];
  family: TariffTariffFamily;
  freeEventResponses: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  joinProfessionalCommunities: Scalars['Int']['output'];
  mailingPerMonth: Scalars['Int']['output'];
  numberExpertsManagedByOneRepresentative: Scalars['Int']['output'];
  organizerExpertsOnEvent: Scalars['Int']['output'];
  organizerFeeEventMailingPriceExpert: Scalars['Float']['output'];
  organizerInviteMailingPriceExpert: Scalars['Float']['output'];
  organizerPerEvent: Scalars['Int']['output'];
  organizerRequestExpertAboutPrice: Scalars['Float']['output'];
  paidEventResponsesPerMonth: Scalars['Int']['output'];
  paidRequestPublicationPrice: Scalars['Float']['output'];
  price: Scalars['Float']['output'];
  promocodes?: Maybe<Array<Promocode>>;
  referralBonus: Scalars['Int']['output'];
  referralPrice: Scalars['Int']['output'];
  tariffSubscriptions?: Maybe<Array<TariffSubscription>>;
  tariffSubscriptionsLog?: Maybe<Array<TariffSubscriptionLog>>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
  votesPerEvent: Scalars['Int']['output'];
};

/** Ordering options for Tariff connections */
export type TariffOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Tariffs. */
  field: TariffOrderField;
};

/** Properties by which Tariff connections can be ordered. */
export enum TariffOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type TariffSubscription = Node & {
  __typename?: 'TariffSubscription';
  createdAt: Scalars['Time']['output'];
  endAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  paymentMouthSum?: Maybe<Scalars['Float']['output']>;
  startAt: Scalars['Time']['output'];
  tariff: Tariff;
  updatedAt: Scalars['Time']['output'];
  user: User;
};

export type TariffSubscriptionLog = Node & {
  __typename?: 'TariffSubscriptionLog';
  createdAt: Scalars['Time']['output'];
  endAt?: Maybe<Scalars['Time']['output']>;
  id: Scalars['ID']['output'];
  paymentMouthSum?: Maybe<Scalars['Float']['output']>;
  startAt: Scalars['Time']['output'];
  tariff: Tariff;
  updatedAt: Scalars['Time']['output'];
  user: User;
};

/** Ordering options for TariffSubscriptionLog connections */
export type TariffSubscriptionLogOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order TariffSubscriptionLogs. */
  field: TariffSubscriptionLogOrderField;
};

/** Properties by which TariffSubscriptionLog connections can be ordered. */
export enum TariffSubscriptionLogOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * TariffSubscriptionLogWhereInput is used for filtering TariffSubscriptionLog objects.
 * Input was generated by ent.
 */
export type TariffSubscriptionLogWhereInput = {
  and?: InputMaybe<Array<TariffSubscriptionLogWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** end_at field predicates */
  endAt?: InputMaybe<Scalars['Time']['input']>;
  endAtGT?: InputMaybe<Scalars['Time']['input']>;
  endAtGTE?: InputMaybe<Scalars['Time']['input']>;
  endAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  endAtLT?: InputMaybe<Scalars['Time']['input']>;
  endAtLTE?: InputMaybe<Scalars['Time']['input']>;
  endAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  endAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tariff edge predicates */
  hasTariff?: InputMaybe<Scalars['Boolean']['input']>;
  hasTariffWith?: InputMaybe<Array<TariffWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<TariffSubscriptionLogWhereInput>;
  or?: InputMaybe<Array<TariffSubscriptionLogWhereInput>>;
  /** payment_mouth_sum field predicates */
  paymentMouthSum?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumGT?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumGTE?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  paymentMouthSumIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  paymentMouthSumLT?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumLTE?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumNEQ?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  paymentMouthSumNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** start_at field predicates */
  startAt?: InputMaybe<Scalars['Time']['input']>;
  startAtGT?: InputMaybe<Scalars['Time']['input']>;
  startAtGTE?: InputMaybe<Scalars['Time']['input']>;
  startAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startAtLT?: InputMaybe<Scalars['Time']['input']>;
  startAtLTE?: InputMaybe<Scalars['Time']['input']>;
  startAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  startAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** Ordering options for TariffSubscription connections */
export type TariffSubscriptionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order TariffSubscriptions. */
  field: TariffSubscriptionOrderField;
};

/** Properties by which TariffSubscription connections can be ordered. */
export enum TariffSubscriptionOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * TariffSubscriptionWhereInput is used for filtering TariffSubscription objects.
 * Input was generated by ent.
 */
export type TariffSubscriptionWhereInput = {
  and?: InputMaybe<Array<TariffSubscriptionWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** end_at field predicates */
  endAt?: InputMaybe<Scalars['Time']['input']>;
  endAtGT?: InputMaybe<Scalars['Time']['input']>;
  endAtGTE?: InputMaybe<Scalars['Time']['input']>;
  endAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  endAtLT?: InputMaybe<Scalars['Time']['input']>;
  endAtLTE?: InputMaybe<Scalars['Time']['input']>;
  endAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  endAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** tariff edge predicates */
  hasTariff?: InputMaybe<Scalars['Boolean']['input']>;
  hasTariffWith?: InputMaybe<Array<TariffWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<TariffSubscriptionWhereInput>;
  or?: InputMaybe<Array<TariffSubscriptionWhereInput>>;
  /** payment_mouth_sum field predicates */
  paymentMouthSum?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumGT?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumGTE?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  paymentMouthSumIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  paymentMouthSumLT?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumLTE?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumNEQ?: InputMaybe<Scalars['Float']['input']>;
  paymentMouthSumNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  paymentMouthSumNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** start_at field predicates */
  startAt?: InputMaybe<Scalars['Time']['input']>;
  startAtGT?: InputMaybe<Scalars['Time']['input']>;
  startAtGTE?: InputMaybe<Scalars['Time']['input']>;
  startAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startAtLT?: InputMaybe<Scalars['Time']['input']>;
  startAtLTE?: InputMaybe<Scalars['Time']['input']>;
  startAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  startAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** TariffTariffFamily is enum for the field family */
export enum TariffTariffFamily {
  Pro = 'pro',
  Standard = 'standard',
  Start = 'start',
  Unlimited = 'unlimited'
}

/**
 * TariffWhereInput is used for filtering Tariff objects.
 * Input was generated by ent.
 */
export type TariffWhereInput = {
  /** active field predicates */
  active?: InputMaybe<Scalars['Boolean']['input']>;
  activeNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** active_word_duration_hours field predicates */
  activeWordDurationHours?: InputMaybe<Scalars['Int']['input']>;
  activeWordDurationHoursGT?: InputMaybe<Scalars['Int']['input']>;
  activeWordDurationHoursGTE?: InputMaybe<Scalars['Int']['input']>;
  activeWordDurationHoursIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  activeWordDurationHoursLT?: InputMaybe<Scalars['Int']['input']>;
  activeWordDurationHoursLTE?: InputMaybe<Scalars['Int']['input']>;
  activeWordDurationHoursNEQ?: InputMaybe<Scalars['Int']['input']>;
  activeWordDurationHoursNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  and?: InputMaybe<Array<TariffWhereInput>>;
  /** count_experts_in_create_community field predicates */
  countExpertsInCreateCommunity?: InputMaybe<Scalars['Int']['input']>;
  countExpertsInCreateCommunityGT?: InputMaybe<Scalars['Int']['input']>;
  countExpertsInCreateCommunityGTE?: InputMaybe<Scalars['Int']['input']>;
  countExpertsInCreateCommunityIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  countExpertsInCreateCommunityLT?: InputMaybe<Scalars['Int']['input']>;
  countExpertsInCreateCommunityLTE?: InputMaybe<Scalars['Int']['input']>;
  countExpertsInCreateCommunityNEQ?: InputMaybe<Scalars['Int']['input']>;
  countExpertsInCreateCommunityNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** create_professional_communities field predicates */
  createProfessionalCommunities?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunitiesGT?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunitiesGTE?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunitiesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  createProfessionalCommunitiesLT?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunitiesLTE?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunitiesNEQ?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunitiesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** events_per_month field predicates */
  eventsPerMonth?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonthGT?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonthGTE?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonthIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  eventsPerMonthLT?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonthLTE?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonthNEQ?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonthNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** family field predicates */
  family?: InputMaybe<TariffTariffFamily>;
  familyIn?: InputMaybe<Array<TariffTariffFamily>>;
  familyNEQ?: InputMaybe<TariffTariffFamily>;
  familyNotIn?: InputMaybe<Array<TariffTariffFamily>>;
  /** free_event_responses field predicates */
  freeEventResponses?: InputMaybe<Scalars['Int']['input']>;
  freeEventResponsesGT?: InputMaybe<Scalars['Int']['input']>;
  freeEventResponsesGTE?: InputMaybe<Scalars['Int']['input']>;
  freeEventResponsesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  freeEventResponsesLT?: InputMaybe<Scalars['Int']['input']>;
  freeEventResponsesLTE?: InputMaybe<Scalars['Int']['input']>;
  freeEventResponsesNEQ?: InputMaybe<Scalars['Int']['input']>;
  freeEventResponsesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** promocodes edge predicates */
  hasPromocodes?: InputMaybe<Scalars['Boolean']['input']>;
  hasPromocodesWith?: InputMaybe<Array<PromocodeWhereInput>>;
  /** tariff_subscriptions edge predicates */
  hasTariffSubscriptions?: InputMaybe<Scalars['Boolean']['input']>;
  /** tariff_subscriptions_log edge predicates */
  hasTariffSubscriptionsLog?: InputMaybe<Scalars['Boolean']['input']>;
  hasTariffSubscriptionsLogWith?: InputMaybe<Array<TariffSubscriptionLogWhereInput>>;
  hasTariffSubscriptionsWith?: InputMaybe<Array<TariffSubscriptionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** join_professional_communities field predicates */
  joinProfessionalCommunities?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunitiesGT?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunitiesGTE?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunitiesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  joinProfessionalCommunitiesLT?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunitiesLTE?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunitiesNEQ?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunitiesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** mailing_per_month field predicates */
  mailingPerMonth?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonthGT?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonthGTE?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonthIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  mailingPerMonthLT?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonthLTE?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonthNEQ?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonthNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  not?: InputMaybe<TariffWhereInput>;
  /** number_experts_managed_by_one_representative field predicates */
  numberExpertsManagedByOneRepresentative?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentativeGT?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentativeGTE?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentativeIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  numberExpertsManagedByOneRepresentativeLT?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentativeLTE?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentativeNEQ?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentativeNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  or?: InputMaybe<Array<TariffWhereInput>>;
  /** organizer_experts_on_event field predicates */
  organizerExpertsOnEvent?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEventGT?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEventGTE?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEventIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  organizerExpertsOnEventLT?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEventLTE?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEventNEQ?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEventNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** organizer_fee_event_mailing_price_expert field predicates */
  organizerFeeEventMailingPriceExpert?: InputMaybe<Scalars['Float']['input']>;
  organizerFeeEventMailingPriceExpertGT?: InputMaybe<Scalars['Float']['input']>;
  organizerFeeEventMailingPriceExpertGTE?: InputMaybe<Scalars['Float']['input']>;
  organizerFeeEventMailingPriceExpertIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  organizerFeeEventMailingPriceExpertLT?: InputMaybe<Scalars['Float']['input']>;
  organizerFeeEventMailingPriceExpertLTE?: InputMaybe<Scalars['Float']['input']>;
  organizerFeeEventMailingPriceExpertNEQ?: InputMaybe<Scalars['Float']['input']>;
  organizerFeeEventMailingPriceExpertNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** organizer_invite_mailing_price_expert field predicates */
  organizerInviteMailingPriceExpert?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpertGT?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpertGTE?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpertIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  organizerInviteMailingPriceExpertLT?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpertLTE?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpertNEQ?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpertNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** organizer_per_event field predicates */
  organizerPerEvent?: InputMaybe<Scalars['Int']['input']>;
  organizerPerEventGT?: InputMaybe<Scalars['Int']['input']>;
  organizerPerEventGTE?: InputMaybe<Scalars['Int']['input']>;
  organizerPerEventIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  organizerPerEventLT?: InputMaybe<Scalars['Int']['input']>;
  organizerPerEventLTE?: InputMaybe<Scalars['Int']['input']>;
  organizerPerEventNEQ?: InputMaybe<Scalars['Int']['input']>;
  organizerPerEventNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** organizer_request_expert_about_price field predicates */
  organizerRequestExpertAboutPrice?: InputMaybe<Scalars['Float']['input']>;
  organizerRequestExpertAboutPriceGT?: InputMaybe<Scalars['Float']['input']>;
  organizerRequestExpertAboutPriceGTE?: InputMaybe<Scalars['Float']['input']>;
  organizerRequestExpertAboutPriceIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  organizerRequestExpertAboutPriceLT?: InputMaybe<Scalars['Float']['input']>;
  organizerRequestExpertAboutPriceLTE?: InputMaybe<Scalars['Float']['input']>;
  organizerRequestExpertAboutPriceNEQ?: InputMaybe<Scalars['Float']['input']>;
  organizerRequestExpertAboutPriceNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** paid_event_responses_per_month field predicates */
  paidEventResponsesPerMonth?: InputMaybe<Scalars['Int']['input']>;
  paidEventResponsesPerMonthGT?: InputMaybe<Scalars['Int']['input']>;
  paidEventResponsesPerMonthGTE?: InputMaybe<Scalars['Int']['input']>;
  paidEventResponsesPerMonthIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  paidEventResponsesPerMonthLT?: InputMaybe<Scalars['Int']['input']>;
  paidEventResponsesPerMonthLTE?: InputMaybe<Scalars['Int']['input']>;
  paidEventResponsesPerMonthNEQ?: InputMaybe<Scalars['Int']['input']>;
  paidEventResponsesPerMonthNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** paid_request_publication_price field predicates */
  paidRequestPublicationPrice?: InputMaybe<Scalars['Float']['input']>;
  paidRequestPublicationPriceGT?: InputMaybe<Scalars['Float']['input']>;
  paidRequestPublicationPriceGTE?: InputMaybe<Scalars['Float']['input']>;
  paidRequestPublicationPriceIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  paidRequestPublicationPriceLT?: InputMaybe<Scalars['Float']['input']>;
  paidRequestPublicationPriceLTE?: InputMaybe<Scalars['Float']['input']>;
  paidRequestPublicationPriceNEQ?: InputMaybe<Scalars['Float']['input']>;
  paidRequestPublicationPriceNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** price field predicates */
  price?: InputMaybe<Scalars['Float']['input']>;
  priceGT?: InputMaybe<Scalars['Float']['input']>;
  priceGTE?: InputMaybe<Scalars['Float']['input']>;
  priceIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  priceLT?: InputMaybe<Scalars['Float']['input']>;
  priceLTE?: InputMaybe<Scalars['Float']['input']>;
  priceNEQ?: InputMaybe<Scalars['Float']['input']>;
  priceNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** referral_bonus field predicates */
  referralBonus?: InputMaybe<Scalars['Int']['input']>;
  referralBonusGT?: InputMaybe<Scalars['Int']['input']>;
  referralBonusGTE?: InputMaybe<Scalars['Int']['input']>;
  referralBonusIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  referralBonusLT?: InputMaybe<Scalars['Int']['input']>;
  referralBonusLTE?: InputMaybe<Scalars['Int']['input']>;
  referralBonusNEQ?: InputMaybe<Scalars['Int']['input']>;
  referralBonusNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** referral_price field predicates */
  referralPrice?: InputMaybe<Scalars['Int']['input']>;
  referralPriceGT?: InputMaybe<Scalars['Int']['input']>;
  referralPriceGTE?: InputMaybe<Scalars['Int']['input']>;
  referralPriceIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  referralPriceLT?: InputMaybe<Scalars['Int']['input']>;
  referralPriceLTE?: InputMaybe<Scalars['Int']['input']>;
  referralPriceNEQ?: InputMaybe<Scalars['Int']['input']>;
  referralPriceNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** votes_per_event field predicates */
  votesPerEvent?: InputMaybe<Scalars['Int']['input']>;
  votesPerEventGT?: InputMaybe<Scalars['Int']['input']>;
  votesPerEventGTE?: InputMaybe<Scalars['Int']['input']>;
  votesPerEventIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  votesPerEventLT?: InputMaybe<Scalars['Int']['input']>;
  votesPerEventLTE?: InputMaybe<Scalars['Int']['input']>;
  votesPerEventNEQ?: InputMaybe<Scalars['Int']['input']>;
  votesPerEventNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

/**
 * UpdateTariffInput is used for update Tariff object.
 * Input was generated by ent.
 */
export type UpdateTariffInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  activeWordDurationHours?: InputMaybe<Scalars['Int']['input']>;
  addPromocodeIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTariffSubscriptionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addTariffSubscriptionsLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearPromocodes?: InputMaybe<Scalars['Boolean']['input']>;
  clearTariffSubscriptions?: InputMaybe<Scalars['Boolean']['input']>;
  clearTariffSubscriptionsLog?: InputMaybe<Scalars['Boolean']['input']>;
  countExpertsInCreateCommunity?: InputMaybe<Scalars['Int']['input']>;
  createProfessionalCommunities?: InputMaybe<Scalars['Int']['input']>;
  eventsPerMonth?: InputMaybe<Scalars['Int']['input']>;
  family?: InputMaybe<TariffTariffFamily>;
  freeEventResponses?: InputMaybe<Scalars['Int']['input']>;
  joinProfessionalCommunities?: InputMaybe<Scalars['Int']['input']>;
  mailingPerMonth?: InputMaybe<Scalars['Int']['input']>;
  numberExpertsManagedByOneRepresentative?: InputMaybe<Scalars['Int']['input']>;
  organizerExpertsOnEvent?: InputMaybe<Scalars['Int']['input']>;
  organizerFeeEventMailingPriceExpert?: InputMaybe<Scalars['Float']['input']>;
  organizerInviteMailingPriceExpert?: InputMaybe<Scalars['Float']['input']>;
  organizerPerEvent?: InputMaybe<Scalars['Int']['input']>;
  organizerRequestExpertAboutPrice?: InputMaybe<Scalars['Float']['input']>;
  paidEventResponsesPerMonth?: InputMaybe<Scalars['Int']['input']>;
  paidRequestPublicationPrice?: InputMaybe<Scalars['Float']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  referralBonus?: InputMaybe<Scalars['Int']['input']>;
  referralPrice?: InputMaybe<Scalars['Int']['input']>;
  removePromocodeIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTariffSubscriptionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeTariffSubscriptionsLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  votesPerEvent?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * UpdateTariffSubscriptionInput is used for update TariffSubscription object.
 * Input was generated by ent.
 */
export type UpdateTariffSubscriptionInput = {
  clearEndAt?: InputMaybe<Scalars['Boolean']['input']>;
  clearPaymentMouthSum?: InputMaybe<Scalars['Boolean']['input']>;
  endAt?: InputMaybe<Scalars['Time']['input']>;
  paymentMouthSum?: InputMaybe<Scalars['Float']['input']>;
  startAt?: InputMaybe<Scalars['Time']['input']>;
  tariffID?: InputMaybe<Scalars['ID']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  userID?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * UpdateTariffSubscriptionLogInput is used for update TariffSubscriptionLog object.
 * Input was generated by ent.
 */
export type UpdateTariffSubscriptionLogInput = {
  clearEndAt?: InputMaybe<Scalars['Boolean']['input']>;
  clearPaymentMouthSum?: InputMaybe<Scalars['Boolean']['input']>;
  endAt?: InputMaybe<Scalars['Time']['input']>;
  paymentMouthSum?: InputMaybe<Scalars['Float']['input']>;
  startAt?: InputMaybe<Scalars['Time']['input']>;
  tariffID?: InputMaybe<Scalars['ID']['input']>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  userID?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * UpdateUserBlockInput is used for update UserBlock object.
 * Input was generated by ent.
 */
export type UpdateUserBlockInput = {
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  reason?: InputMaybe<Scalars['String']['input']>;
  userID?: InputMaybe<Scalars['ID']['input']>;
};

/**
 * UpdateVerifyExpertRequestInput is used for update VerifyExpertRequest object.
 * Input was generated by ent.
 */
export type UpdateVerifyExpertRequestInput = {
  addVoteIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearVotes?: InputMaybe<Scalars['Boolean']['input']>;
  creatorID?: InputMaybe<Scalars['ID']['input']>;
  expiresAt?: InputMaybe<Scalars['Time']['input']>;
  removeVoteIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  status?: InputMaybe<VerifyExpertRequestStatus>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateVoteVerifyExpertInput is used for update VoteVerifyExpert object.
 * Input was generated by ent.
 */
export type UpdateVoteVerifyExpertInput = {
  expertID?: InputMaybe<Scalars['ID']['input']>;
  requestID?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<VoteVerifyExpertStatus>;
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
};

export type User = Node & {
  __typename?: 'User';
  agreesTermsAt?: Maybe<Scalars['Time']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  createdProfileRequests?: Maybe<Array<ProfileRequest>>;
  createdVotes?: Maybe<Array<Vote>>;
  deletedAt?: Maybe<Scalars['Time']['output']>;
  disabledExpertNotifications: Scalars['Boolean']['output'];
  eventRequests?: Maybe<Array<EventRequest>>;
  events?: Maybe<Array<Event>>;
  expertProfile?: Maybe<ExpertProfile>;
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  nickname?: Maybe<Scalars['String']['output']>;
  notificationAuthor?: Maybe<Array<Notification>>;
  notificationFronAppEnabled: Scalars['Boolean']['output'];
  notifications: UserNotificationConnection;
  organizatorProfile?: Maybe<Organizator>;
  platforms?: Maybe<UserPlatform>;
  privacy?: Maybe<Scalars['String']['output']>;
  promoWords?: Maybe<Array<EventPromoWord>>;
  referalExpertID?: Maybe<Scalars['ID']['output']>;
  referalExpertProfile?: Maybe<ExpertProfile>;
  representativeEvents?: Maybe<Array<Event>>;
  /** запросы от пользователя */
  representativeUser?: Maybe<Array<RepresentativeExpertRequest>>;
  rights: Scalars['Int']['output'];
  tariffLimits: Tariff;
  tariffSubscription?: Maybe<TariffSubscription>;
  tariffSubscriptionsLog?: Maybe<Array<TariffSubscriptionLog>>;
  updatedAt: Scalars['Time']['output'];
  usedPromocodes?: Maybe<Array<Promocode>>;
  userBlock?: Maybe<UserBlock>;
  /** запросы к пользователю */
  userRepresentative?: Maybe<Array<RepresentativeExpertRequest>>;
  username: Scalars['String']['output'];
  verifiedEventRequests?: Maybe<Array<EventRequest>>;
  verifiedEvents?: Maybe<Array<Event>>;
  verifiedProfileRequests?: Maybe<Array<ProfileRequest>>;
};


export type UserNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserNotificationOrder>;
  where?: InputMaybe<UserNotificationWhereInput>;
};

export type UserBlock = Node & {
  __typename?: 'UserBlock';
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  enabled: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  reason: Scalars['String']['output'];
  user: User;
};

/**
 * UserBlockWhereInput is used for filtering UserBlock objects.
 * Input was generated by ent.
 */
export type UserBlockWhereInput = {
  and?: InputMaybe<Array<UserBlockWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** enabled field predicates */
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  enabledNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<UserBlockWhereInput>;
  or?: InputMaybe<Array<UserBlockWhereInput>>;
  /** reason field predicates */
  reason?: InputMaybe<Scalars['String']['input']>;
  reasonContains?: InputMaybe<Scalars['String']['input']>;
  reasonContainsFold?: InputMaybe<Scalars['String']['input']>;
  reasonEqualFold?: InputMaybe<Scalars['String']['input']>;
  reasonGT?: InputMaybe<Scalars['String']['input']>;
  reasonGTE?: InputMaybe<Scalars['String']['input']>;
  reasonHasPrefix?: InputMaybe<Scalars['String']['input']>;
  reasonHasSuffix?: InputMaybe<Scalars['String']['input']>;
  reasonIn?: InputMaybe<Array<Scalars['String']['input']>>;
  reasonLT?: InputMaybe<Scalars['String']['input']>;
  reasonLTE?: InputMaybe<Scalars['String']['input']>;
  reasonNEQ?: InputMaybe<Scalars['String']['input']>;
  reasonNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type UserNotification = Node & {
  __typename?: 'UserNotification';
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  notification: Notification;
  readAt?: Maybe<Scalars['Time']['output']>;
  updatedAt: Scalars['Time']['output'];
  user: User;
};

/** A connection to a list of items. */
export type UserNotificationConnection = {
  __typename?: 'UserNotificationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserNotificationEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserNotificationEdge = {
  __typename?: 'UserNotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<UserNotification>;
};

/** Ordering options for UserNotification connections */
export type UserNotificationOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order UserNotifications. */
  field: UserNotificationOrderField;
};

/** Properties by which UserNotification connections can be ordered. */
export enum UserNotificationOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/**
 * UserNotificationWhereInput is used for filtering UserNotification objects.
 * Input was generated by ent.
 */
export type UserNotificationWhereInput = {
  and?: InputMaybe<Array<UserNotificationWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** notification edge predicates */
  hasNotification?: InputMaybe<Scalars['Boolean']['input']>;
  hasNotificationWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<UserNotificationWhereInput>;
  or?: InputMaybe<Array<UserNotificationWhereInput>>;
  /** read_at field predicates */
  readAt?: InputMaybe<Scalars['Time']['input']>;
  readAtGT?: InputMaybe<Scalars['Time']['input']>;
  readAtGTE?: InputMaybe<Scalars['Time']['input']>;
  readAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  readAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  readAtLT?: InputMaybe<Scalars['Time']['input']>;
  readAtLTE?: InputMaybe<Scalars['Time']['input']>;
  readAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  readAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  readAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** Ordering options for User connections */
export type UserOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Users. */
  field: UserOrderField;
};

/** Properties by which User connections can be ordered. */
export enum UserOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type UserPlatform = Node & {
  __typename?: 'UserPlatform';
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  platform: UserPlatformPlatform;
  platformID: Scalars['String']['output'];
  user: User;
  username?: Maybe<Scalars['String']['output']>;
};

/** UserPlatformPlatform is enum for the field platform */
export enum UserPlatformPlatform {
  Telegram = 'Telegram',
  Vk = 'VK'
}

/**
 * UserPlatformWhereInput is used for filtering UserPlatform objects.
 * Input was generated by ent.
 */
export type UserPlatformWhereInput = {
  and?: InputMaybe<Array<UserPlatformWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<UserPlatformWhereInput>;
  or?: InputMaybe<Array<UserPlatformWhereInput>>;
  /** platform field predicates */
  platform?: InputMaybe<UserPlatformPlatform>;
  /** platform_id field predicates */
  platformID?: InputMaybe<Scalars['String']['input']>;
  platformIDContains?: InputMaybe<Scalars['String']['input']>;
  platformIDContainsFold?: InputMaybe<Scalars['String']['input']>;
  platformIDEqualFold?: InputMaybe<Scalars['String']['input']>;
  platformIDGT?: InputMaybe<Scalars['String']['input']>;
  platformIDGTE?: InputMaybe<Scalars['String']['input']>;
  platformIDHasPrefix?: InputMaybe<Scalars['String']['input']>;
  platformIDHasSuffix?: InputMaybe<Scalars['String']['input']>;
  platformIDIn?: InputMaybe<Array<Scalars['String']['input']>>;
  platformIDLT?: InputMaybe<Scalars['String']['input']>;
  platformIDLTE?: InputMaybe<Scalars['String']['input']>;
  platformIDNEQ?: InputMaybe<Scalars['String']['input']>;
  platformIDNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  platformIn?: InputMaybe<Array<UserPlatformPlatform>>;
  platformNEQ?: InputMaybe<UserPlatformPlatform>;
  platformNotIn?: InputMaybe<Array<UserPlatformPlatform>>;
  /** username field predicates */
  username?: InputMaybe<Scalars['String']['input']>;
  usernameContains?: InputMaybe<Scalars['String']['input']>;
  usernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  usernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  usernameGT?: InputMaybe<Scalars['String']['input']>;
  usernameGTE?: InputMaybe<Scalars['String']['input']>;
  usernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  usernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  usernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  usernameLT?: InputMaybe<Scalars['String']['input']>;
  usernameLTE?: InputMaybe<Scalars['String']['input']>;
  usernameNEQ?: InputMaybe<Scalars['String']['input']>;
  usernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum UserPromocodeResult {
  ActivationsLimit = 'activationsLimit',
  ActivationsUserLimit = 'activationsUserLimit',
  Expired = 'expired',
  Inactive = 'inactive',
  MonthsLimit = 'monthsLimit',
  NotFound = 'notFound',
  Success = 'success'
}

export type UserView = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  /** agrees_terms_at field predicates */
  agreesTermsAt?: InputMaybe<Scalars['Time']['input']>;
  agreesTermsAtGT?: InputMaybe<Scalars['Time']['input']>;
  agreesTermsAtGTE?: InputMaybe<Scalars['Time']['input']>;
  agreesTermsAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  agreesTermsAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  agreesTermsAtLT?: InputMaybe<Scalars['Time']['input']>;
  agreesTermsAtLTE?: InputMaybe<Scalars['Time']['input']>;
  agreesTermsAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  agreesTermsAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  agreesTermsAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  and?: InputMaybe<Array<UserWhereInput>>;
  /** avatar field predicates */
  avatar?: InputMaybe<Scalars['String']['input']>;
  avatarContains?: InputMaybe<Scalars['String']['input']>;
  avatarContainsFold?: InputMaybe<Scalars['String']['input']>;
  avatarEqualFold?: InputMaybe<Scalars['String']['input']>;
  avatarGT?: InputMaybe<Scalars['String']['input']>;
  avatarGTE?: InputMaybe<Scalars['String']['input']>;
  avatarHasPrefix?: InputMaybe<Scalars['String']['input']>;
  avatarHasSuffix?: InputMaybe<Scalars['String']['input']>;
  avatarIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  avatarLT?: InputMaybe<Scalars['String']['input']>;
  avatarLTE?: InputMaybe<Scalars['String']['input']>;
  avatarNEQ?: InputMaybe<Scalars['String']['input']>;
  avatarNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** disabled_expert_notifications field predicates */
  disabledExpertNotifications?: InputMaybe<Scalars['Boolean']['input']>;
  disabledExpertNotificationsNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** first_name field predicates */
  firstName?: InputMaybe<Scalars['String']['input']>;
  firstNameContains?: InputMaybe<Scalars['String']['input']>;
  firstNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  firstNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  firstNameGT?: InputMaybe<Scalars['String']['input']>;
  firstNameGTE?: InputMaybe<Scalars['String']['input']>;
  firstNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  firstNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  firstNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  firstNameLT?: InputMaybe<Scalars['String']['input']>;
  firstNameLTE?: InputMaybe<Scalars['String']['input']>;
  firstNameNEQ?: InputMaybe<Scalars['String']['input']>;
  firstNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** created_profile_requests edge predicates */
  hasCreatedProfileRequests?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatedProfileRequestsWith?: InputMaybe<Array<ProfileRequestWhereInput>>;
  /** created_votes edge predicates */
  hasCreatedVotes?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatedVotesWith?: InputMaybe<Array<VoteWhereInput>>;
  /** event_requests edge predicates */
  hasEventRequests?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventRequestsWith?: InputMaybe<Array<EventRequestWhereInput>>;
  /** events edge predicates */
  hasEvents?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventsWith?: InputMaybe<Array<EventWhereInput>>;
  /** expert_profile edge predicates */
  hasExpertProfile?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertProfileWith?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** notification_author edge predicates */
  hasNotificationAuthor?: InputMaybe<Scalars['Boolean']['input']>;
  hasNotificationAuthorWith?: InputMaybe<Array<NotificationWhereInput>>;
  /** notifications edge predicates */
  hasNotifications?: InputMaybe<Scalars['Boolean']['input']>;
  hasNotificationsWith?: InputMaybe<Array<UserNotificationWhereInput>>;
  /** organizator_profile edge predicates */
  hasOrganizatorProfile?: InputMaybe<Scalars['Boolean']['input']>;
  hasOrganizatorProfileWith?: InputMaybe<Array<OrganizatorWhereInput>>;
  /** platforms edge predicates */
  hasPlatforms?: InputMaybe<Scalars['Boolean']['input']>;
  hasPlatformsWith?: InputMaybe<Array<UserPlatformWhereInput>>;
  /** promo_words edge predicates */
  hasPromoWords?: InputMaybe<Scalars['Boolean']['input']>;
  hasPromoWordsWith?: InputMaybe<Array<EventPromoWordWhereInput>>;
  /** referal_expert_profile edge predicates */
  hasReferalExpertProfile?: InputMaybe<Scalars['Boolean']['input']>;
  hasReferalExpertProfileWith?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** representative_events edge predicates */
  hasRepresentativeEvents?: InputMaybe<Scalars['Boolean']['input']>;
  hasRepresentativeEventsWith?: InputMaybe<Array<EventWhereInput>>;
  /** representative_user edge predicates */
  hasRepresentativeUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasRepresentativeUserWith?: InputMaybe<Array<RepresentativeExpertRequestWhereInput>>;
  /** tariff_subscription edge predicates */
  hasTariffSubscription?: InputMaybe<Scalars['Boolean']['input']>;
  hasTariffSubscriptionWith?: InputMaybe<Array<TariffSubscriptionWhereInput>>;
  /** tariff_subscriptions_log edge predicates */
  hasTariffSubscriptionsLog?: InputMaybe<Scalars['Boolean']['input']>;
  hasTariffSubscriptionsLogWith?: InputMaybe<Array<TariffSubscriptionLogWhereInput>>;
  /** used_promocodes edge predicates */
  hasUsedPromocodes?: InputMaybe<Scalars['Boolean']['input']>;
  hasUsedPromocodesWith?: InputMaybe<Array<PromocodeWhereInput>>;
  /** user_block edge predicates */
  hasUserBlock?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserBlockWith?: InputMaybe<Array<UserBlockWhereInput>>;
  /** user_representative edge predicates */
  hasUserRepresentative?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserRepresentativeWith?: InputMaybe<Array<RepresentativeExpertRequestWhereInput>>;
  /** verified_event_requests edge predicates */
  hasVerifiedEventRequests?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifiedEventRequestsWith?: InputMaybe<Array<EventRequestWhereInput>>;
  /** verified_events edge predicates */
  hasVerifiedEvents?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifiedEventsWith?: InputMaybe<Array<EventWhereInput>>;
  /** verified_profile_requests edge predicates */
  hasVerifiedProfileRequests?: InputMaybe<Scalars['Boolean']['input']>;
  hasVerifiedProfileRequestsWith?: InputMaybe<Array<ProfileRequestWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** last_name field predicates */
  lastName?: InputMaybe<Scalars['String']['input']>;
  lastNameContains?: InputMaybe<Scalars['String']['input']>;
  lastNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  lastNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  lastNameGT?: InputMaybe<Scalars['String']['input']>;
  lastNameGTE?: InputMaybe<Scalars['String']['input']>;
  lastNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  lastNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  lastNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  lastNameLT?: InputMaybe<Scalars['String']['input']>;
  lastNameLTE?: InputMaybe<Scalars['String']['input']>;
  lastNameNEQ?: InputMaybe<Scalars['String']['input']>;
  lastNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** nickname field predicates */
  nickname?: InputMaybe<Scalars['String']['input']>;
  nicknameContains?: InputMaybe<Scalars['String']['input']>;
  nicknameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nicknameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nicknameGT?: InputMaybe<Scalars['String']['input']>;
  nicknameGTE?: InputMaybe<Scalars['String']['input']>;
  nicknameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nicknameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nicknameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nicknameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  nicknameLT?: InputMaybe<Scalars['String']['input']>;
  nicknameLTE?: InputMaybe<Scalars['String']['input']>;
  nicknameNEQ?: InputMaybe<Scalars['String']['input']>;
  nicknameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nicknameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<UserWhereInput>;
  /** notification_fron_app_enabled field predicates */
  notificationFronAppEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  notificationFronAppEnabledNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<UserWhereInput>>;
  /** privacy field predicates */
  privacy?: InputMaybe<Scalars['String']['input']>;
  privacyContains?: InputMaybe<Scalars['String']['input']>;
  privacyContainsFold?: InputMaybe<Scalars['String']['input']>;
  privacyEqualFold?: InputMaybe<Scalars['String']['input']>;
  privacyGT?: InputMaybe<Scalars['String']['input']>;
  privacyGTE?: InputMaybe<Scalars['String']['input']>;
  privacyHasPrefix?: InputMaybe<Scalars['String']['input']>;
  privacyHasSuffix?: InputMaybe<Scalars['String']['input']>;
  privacyIn?: InputMaybe<Array<Scalars['String']['input']>>;
  privacyIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  privacyLT?: InputMaybe<Scalars['String']['input']>;
  privacyLTE?: InputMaybe<Scalars['String']['input']>;
  privacyNEQ?: InputMaybe<Scalars['String']['input']>;
  privacyNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  privacyNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** referal_expert_id field predicates */
  referalExpertID?: InputMaybe<Scalars['ID']['input']>;
  referalExpertIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  referalExpertIDIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  referalExpertIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  referalExpertIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  referalExpertIDNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** rights field predicates */
  rights?: InputMaybe<Scalars['Int']['input']>;
  rightsGT?: InputMaybe<Scalars['Int']['input']>;
  rightsGTE?: InputMaybe<Scalars['Int']['input']>;
  rightsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  rightsLT?: InputMaybe<Scalars['Int']['input']>;
  rightsLTE?: InputMaybe<Scalars['Int']['input']>;
  rightsNEQ?: InputMaybe<Scalars['Int']['input']>;
  rightsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** username field predicates */
  username?: InputMaybe<Scalars['String']['input']>;
  usernameContains?: InputMaybe<Scalars['String']['input']>;
  usernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  usernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  usernameGT?: InputMaybe<Scalars['String']['input']>;
  usernameGTE?: InputMaybe<Scalars['String']['input']>;
  usernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  usernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  usernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameLT?: InputMaybe<Scalars['String']['input']>;
  usernameLTE?: InputMaybe<Scalars['String']['input']>;
  usernameNEQ?: InputMaybe<Scalars['String']['input']>;
  usernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type VerifyExpertRequest = Node & {
  __typename?: 'VerifyExpertRequest';
  createdAt: Scalars['Time']['output'];
  creator: User;
  expiresAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  status: VerifyExpertRequestStatus;
  updatedAt: Scalars['Time']['output'];
  votes?: Maybe<Array<VoteVerifyExpert>>;
};

/** Ordering options for VerifyExpertRequest connections */
export type VerifyExpertRequestOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order VerifyExpertRequests. */
  field: VerifyExpertRequestOrderField;
};

/** Properties by which VerifyExpertRequest connections can be ordered. */
export enum VerifyExpertRequestOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** VerifyExpertRequestStatus is enum for the field status */
export enum VerifyExpertRequestStatus {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected'
}

/**
 * VerifyExpertRequestWhereInput is used for filtering VerifyExpertRequest objects.
 * Input was generated by ent.
 */
export type VerifyExpertRequestWhereInput = {
  and?: InputMaybe<Array<VerifyExpertRequestWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** expires_at field predicates */
  expiresAt?: InputMaybe<Scalars['Time']['input']>;
  expiresAtGT?: InputMaybe<Scalars['Time']['input']>;
  expiresAtGTE?: InputMaybe<Scalars['Time']['input']>;
  expiresAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  expiresAtLT?: InputMaybe<Scalars['Time']['input']>;
  expiresAtLTE?: InputMaybe<Scalars['Time']['input']>;
  expiresAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  expiresAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** creator edge predicates */
  hasCreator?: InputMaybe<Scalars['Boolean']['input']>;
  hasCreatorWith?: InputMaybe<Array<UserWhereInput>>;
  /** votes edge predicates */
  hasVotes?: InputMaybe<Scalars['Boolean']['input']>;
  hasVotesWith?: InputMaybe<Array<VoteVerifyExpertWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<VerifyExpertRequestWhereInput>;
  or?: InputMaybe<Array<VerifyExpertRequestWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<VerifyExpertRequestStatus>;
  statusIn?: InputMaybe<Array<VerifyExpertRequestStatus>>;
  statusNEQ?: InputMaybe<VerifyExpertRequestStatus>;
  statusNotIn?: InputMaybe<Array<VerifyExpertRequestStatus>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Vote = Node & {
  __typename?: 'Vote';
  deletedAt?: Maybe<Scalars['Time']['output']>;
  event?: Maybe<Event>;
  id: Scalars['ID']['output'];
  isLike?: Maybe<Scalars['Boolean']['output']>;
  targetExpert?: Maybe<ExpertProfile>;
  targetOrganizator?: Maybe<Organizator>;
  typeRating: VoteTypeRating;
  user?: Maybe<User>;
  voteHistory?: Maybe<Array<VoteHistory>>;
};

export type VoteHistory = Node & {
  __typename?: 'VoteHistory';
  action: VoteHistoryAction;
  createdAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  newIsLike?: Maybe<Scalars['Boolean']['output']>;
  oldIsLike?: Maybe<Scalars['Boolean']['output']>;
  reason: Scalars['String']['output'];
  vote: Vote;
};

/** VoteHistoryAction is enum for the field action */
export enum VoteHistoryAction {
  Create = 'create',
  Delete = 'delete',
  Update = 'update'
}

/**
 * VoteHistoryWhereInput is used for filtering VoteHistory objects.
 * Input was generated by ent.
 */
export type VoteHistoryWhereInput = {
  /** action field predicates */
  action?: InputMaybe<VoteHistoryAction>;
  actionIn?: InputMaybe<Array<VoteHistoryAction>>;
  actionNEQ?: InputMaybe<VoteHistoryAction>;
  actionNotIn?: InputMaybe<Array<VoteHistoryAction>>;
  and?: InputMaybe<Array<VoteHistoryWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** vote edge predicates */
  hasVote?: InputMaybe<Scalars['Boolean']['input']>;
  hasVoteWith?: InputMaybe<Array<VoteWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** new_is_like field predicates */
  newIsLike?: InputMaybe<Scalars['Boolean']['input']>;
  newIsLikeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  newIsLikeNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  newIsLikeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<VoteHistoryWhereInput>;
  /** old_is_like field predicates */
  oldIsLike?: InputMaybe<Scalars['Boolean']['input']>;
  oldIsLikeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  oldIsLikeNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  oldIsLikeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<VoteHistoryWhereInput>>;
  /** reason field predicates */
  reason?: InputMaybe<Scalars['String']['input']>;
  reasonContains?: InputMaybe<Scalars['String']['input']>;
  reasonContainsFold?: InputMaybe<Scalars['String']['input']>;
  reasonEqualFold?: InputMaybe<Scalars['String']['input']>;
  reasonGT?: InputMaybe<Scalars['String']['input']>;
  reasonGTE?: InputMaybe<Scalars['String']['input']>;
  reasonHasPrefix?: InputMaybe<Scalars['String']['input']>;
  reasonHasSuffix?: InputMaybe<Scalars['String']['input']>;
  reasonIn?: InputMaybe<Array<Scalars['String']['input']>>;
  reasonLT?: InputMaybe<Scalars['String']['input']>;
  reasonLTE?: InputMaybe<Scalars['String']['input']>;
  reasonNEQ?: InputMaybe<Scalars['String']['input']>;
  reasonNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export enum VoteType {
  Delete = 'delete',
  Negative = 'negative',
  Positive = 'positive'
}

/** VoteTypeRating is enum for the field type_rating */
export enum VoteTypeRating {
  Expert = 'expert',
  Organizator = 'organizator',
  People = 'people'
}

export type VoteVerifyExpert = Node & {
  __typename?: 'VoteVerifyExpert';
  createdAt: Scalars['Time']['output'];
  expert: User;
  id: Scalars['ID']['output'];
  request: VerifyExpertRequest;
  status: VoteVerifyExpertStatus;
  updatedAt: Scalars['Time']['output'];
};

export type VoteVerifyExpertInput = {
  isNegative: Scalars['Boolean']['input'];
  isPositive: Scalars['Boolean']['input'];
  verifyExpertRequestId: Scalars['ID']['input'];
};

/** Ordering options for VoteVerifyExpert connections */
export type VoteVerifyExpertOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order VoteVerifyExperts. */
  field: VoteVerifyExpertOrderField;
};

/** Properties by which VoteVerifyExpert connections can be ordered. */
export enum VoteVerifyExpertOrderField {
  CreatedAt = 'CREATED_AT',
  UpdatedAt = 'UPDATED_AT'
}

/** VoteVerifyExpertStatus is enum for the field status */
export enum VoteVerifyExpertStatus {
  Approved = 'approved',
  Pending = 'pending',
  Rejected = 'rejected'
}

/**
 * VoteVerifyExpertWhereInput is used for filtering VoteVerifyExpert objects.
 * Input was generated by ent.
 */
export type VoteVerifyExpertWhereInput = {
  and?: InputMaybe<Array<VoteVerifyExpertWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** expert edge predicates */
  hasExpert?: InputMaybe<Scalars['Boolean']['input']>;
  hasExpertWith?: InputMaybe<Array<UserWhereInput>>;
  /** request edge predicates */
  hasRequest?: InputMaybe<Scalars['Boolean']['input']>;
  hasRequestWith?: InputMaybe<Array<VerifyExpertRequestWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<VoteVerifyExpertWhereInput>;
  or?: InputMaybe<Array<VoteVerifyExpertWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<VoteVerifyExpertStatus>;
  statusIn?: InputMaybe<Array<VoteVerifyExpertStatus>>;
  statusNEQ?: InputMaybe<VoteVerifyExpertStatus>;
  statusNotIn?: InputMaybe<Array<VoteVerifyExpertStatus>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/**
 * VoteWhereInput is used for filtering Vote objects.
 * Input was generated by ent.
 */
export type VoteWhereInput = {
  and?: InputMaybe<Array<VoteWhereInput>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** event edge predicates */
  hasEvent?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventWith?: InputMaybe<Array<EventWhereInput>>;
  /** target_expert edge predicates */
  hasTargetExpert?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetExpertWith?: InputMaybe<Array<ExpertProfileWhereInput>>;
  /** target_organizator edge predicates */
  hasTargetOrganizator?: InputMaybe<Scalars['Boolean']['input']>;
  hasTargetOrganizatorWith?: InputMaybe<Array<OrganizatorWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** vote_history edge predicates */
  hasVoteHistory?: InputMaybe<Scalars['Boolean']['input']>;
  hasVoteHistoryWith?: InputMaybe<Array<VoteHistoryWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** is_like field predicates */
  isLike?: InputMaybe<Scalars['Boolean']['input']>;
  isLikeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  isLikeNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  isLikeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<VoteWhereInput>;
  or?: InputMaybe<Array<VoteWhereInput>>;
  /** type_rating field predicates */
  typeRating?: InputMaybe<VoteTypeRating>;
  typeRatingIn?: InputMaybe<Array<VoteTypeRating>>;
  typeRatingNEQ?: InputMaybe<VoteTypeRating>;
  typeRatingNotIn?: InputMaybe<Array<VoteTypeRating>>;
};

export type AcceptPlatformRightsInput = {
  referalCode?: InputMaybe<Scalars['String']['input']>;
};

export type CreateChildrenEventInput = {
  description: Scalars['String']['input'];
  duration: Scalars['Uint']['input'];
  promoWord: Scalars['String']['input'];
  requestID: Scalars['ID']['input'];
  startAt: Scalars['Time']['input'];
  title: Scalars['String']['input'];
};

export type MyProfileRequestQueryVariables = Exact<{
  argType: ProfileRequestType;
}>;


export type MyProfileRequestQuery = { __typename?: 'Query', myProfileRequest?: { __typename?: 'ProfileRequest', id: string, status: ProfileRequestStatus, expertRequest?: { __typename?: 'ExpertProfileRequest', newSimpleSpeechLink?: string | null, newSocialMediaLink?: string | null, newFirstName?: string | null, newLastName?: string | null, newAbout?: string | null, newReferUsername?: string | null, newRegion?: { __typename?: 'Region', id: string } | null, newCommunityDirections?: Array<{ __typename?: 'CommunityDirection', id: string }> | null } | null, organizatorRequest?: { __typename?: 'OrganizatorProfileRequest', newOrganizationName: string, newOrganizationURL?: string | null } | null } | null };

export type EventsListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<EventWhereInput>;
  orderBy?: InputMaybe<EventOrder>;
}>;


export type EventsListQuery = { __typename?: 'Query', events: { __typename?: 'EventConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null, endCursor?: any | null }, edges?: Array<{ __typename?: 'EventEdge', cursor: any, node?: { __typename?: 'Event', id: string, title: string, type: EventType, startTime: any, endTime: any, duration: number, updatedAt: any, createdAt: any, description: string } | null } | null> | null } };

export type EventCardPageQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type EventCardPageQuery = { __typename?: 'Query', event: { __typename?: 'Event', startTime: any, type: EventType, duration: number, createdAt: any, title: string, updatedAt: any, endTime: any, description: string, promoWorld?: string | null, myExpertVote: VoteType, id: string, expertEvent?: { __typename?: 'ExpertEvent', link?: string | null, commentToListener?: string | null, promoWord?: string | null } | null, organizatorEvent?: { __typename?: 'OrganizatorEvent', feeType: OrganizatorEventFeeType } | null, creator: { __typename?: 'User', firstName: string, lastName: string, id: string, nickname?: string | null, username: string, avatar?: string | null, rights: number, expertProfile?: { __typename?: 'ExpertProfile', about?: string | null, countEvents: number, votesCount: number, peopleVotesCount: number, id: string, region: { __typename?: 'Region', regionName: string } } | null } } };

export type ProfileEventsQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']['input']>;
  after?: InputMaybe<Scalars['Cursor']['input']>;
  where?: InputMaybe<EventRequestWhereInput>;
}>;


export type ProfileEventsQuery = { __typename?: 'Query', myEventRequests: { __typename?: 'EventRequestConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean, endCursor?: any | null, startCursor?: any | null }, edges?: Array<{ __typename?: 'EventRequestEdge', cursor: any, node?: { __typename?: 'EventRequest', id: string, createdAt: any, status: EventRequestStatus, rejectComment?: string | null, event: { __typename?: 'Event', id: string, title: string, duration: number, startTime: any, type: EventType, description: string, expertEvent?: { __typename?: 'ExpertEvent', promoWord?: string | null } | null, organizatorEvent?: { __typename?: 'OrganizatorEvent', feeType: OrganizatorEventFeeType, place?: string | null, speakerBenefits: string, topic: string, transferPaid: boolean, verificationMode: OrganizatorEventVerificationMode, targetAudience?: Array<{ __typename?: 'CommunityDirection', id: string }> | null } | null } } | null } | null> | null } };

export type ExpertResponcesToOrganizaotorEventsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
  where?: InputMaybe<ExpertResponseToEventWhereInput>;
}>;


export type ExpertResponcesToOrganizaotorEventsQuery = { __typename?: 'Query', expertResponseToEvents: { __typename?: 'ExpertResponseToEventConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null }, edges?: Array<{ __typename?: 'ExpertResponseToEventEdge', cursor: any, node?: { __typename?: 'ExpertResponseToEvent', createdAt: any, id: string, status: ExpertResponseToEventStatus, type: ExpertResponseToEventType, updatedAt: any, user: { __typename?: 'User', id: string, firstName: string, lastName: string, avatar?: string | null, expertProfile?: { __typename?: 'ExpertProfile', about?: string | null, region: { __typename?: 'Region', regionName: string } } | null } } | null } | null> | null } };

export type InviteExpertToOrganizatorEventMutationVariables = Exact<{
  data: CreateInviteToOrganizatorEvent;
}>;


export type InviteExpertToOrganizatorEventMutation = { __typename?: 'Mutation', createInviteToOrganizatorEvent: { __typename?: 'ExpertResponseToEvent', id: string } };

export type AcceptRespnceExpertToOrganizatorEventMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: CreateChildOrganizatorEventInput;
}>;


export type AcceptRespnceExpertToOrganizatorEventMutation = { __typename?: 'Mutation', acceptResponOrganizatorEvent: { __typename?: 'Event', id: string } };

export type RejectRespnceExpertToOrganizatorEventMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RejectRespnceExpertToOrganizatorEventMutation = { __typename?: 'Mutation', rejectRespondOrganizatorEvent: { __typename?: 'ExpertResponseToEvent', id: string } };

export type CreateExpertRequestMutationVariables = Exact<{
  input: ProfileCreateInput;
}>;


export type CreateExpertRequestMutation = { __typename?: 'Mutation', createProfileRequest: { __typename?: 'ProfileRequest', id: string } };

export type GetExpertProfileQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetExpertProfileQuery = { __typename?: 'Query', user: { __typename?: 'User', avatar?: string | null, firstName: string, lastName: string, rights: number, platforms?: { __typename?: 'UserPlatform', platformID: string, platform: UserPlatformPlatform } | null, expertProfile?: { __typename?: 'ExpertProfile', socialMediaLink?: string | null, peopleRatingEnabled: boolean, referUsername?: string | null, votesCount: number, peopleVotesCount: number, countEvents: number, about?: string | null, myExpertVote: VoteType, myPeopleVote: VoteType, region: { __typename?: 'Region', regionName: string }, communityDirections?: Array<{ __typename?: 'CommunityDirection', direction: string, name: string }> | null } | null } };

export type AssignTariffMutationVariables = Exact<{
  data: AssignTariffInput;
}>;


export type AssignTariffMutation = { __typename?: 'Mutation', assignTariff?: boolean | null };

export type VoteInPeopleRaitingMutationVariables = Exact<{
  data: CreateVoteInput;
}>;


export type VoteInPeopleRaitingMutation = { __typename?: 'Mutation', createVote: { __typename?: 'Vote', id: string } };

export type DeletePeopleVoteMutationVariables = Exact<{
  data: DeleteVoteInput;
}>;


export type DeletePeopleVoteMutation = { __typename?: 'Mutation', deleteVote?: boolean | null };

export type VerificateUserFromAdminMutationVariables = Exact<{
  userID: Scalars['ID']['input'];
}>;


export type VerificateUserFromAdminMutation = { __typename?: 'Mutation', verifiesUser?: boolean | null };

export type PreExpertRequestCreateMutationVariables = Exact<{
  data: CreateRepresentativeExpertRequestInput;
}>;


export type PreExpertRequestCreateMutation = { __typename?: 'Mutation', createRepresentativeRequest?: string | null };

export type AssignAdminRightToExpertMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type AssignAdminRightToExpertMutation = { __typename?: 'Mutation', assignAdminRights: { __typename?: 'User', id: string } };

export type DeleteUserProfileMutationVariables = Exact<{ [key: string]: never; }>;


export type DeleteUserProfileMutation = { __typename?: 'Mutation', deleteMyProfileUser?: boolean | null };

export type DeleteMyExpertProfileMutationVariables = Exact<{ [key: string]: never; }>;


export type DeleteMyExpertProfileMutation = { __typename?: 'Mutation', deleteMyProfileExpert?: boolean | null };

export type DeleteMyOrganizaotorProfileMutationVariables = Exact<{ [key: string]: never; }>;


export type DeleteMyOrganizaotorProfileMutation = { __typename?: 'Mutation', deleteMyProfileOrganizator?: boolean | null };

export type PromocodesListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
}>;


export type PromocodesListQuery = { __typename?: 'Query', promocodes: { __typename?: 'PromocodeConnection', totalCount: number, edges?: Array<{ __typename?: 'PromocodeEdge', cursor: any, node?: { __typename?: 'Promocode', id: string, active: boolean, startAt: any, updatedAt: any, code: string, createdAt: any, maxCountActivations: number, maxMouthSubscriptionDuration: number, maxUserCountActivations: number, activatedCount: number, discount: number, endAt: any } | null } | null> | null, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null } } };

export type SettingsQueryVariables = Exact<{ [key: string]: never; }>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename?: 'SettingsValues', notificationsFromExperts: boolean, peopleRatingEnabled: boolean } };

export type SetSettingsMutationVariables = Exact<{
  data: SettingsValuesInput;
}>;


export type SetSettingsMutation = { __typename?: 'Mutation', setSettings: { __typename?: 'SettingsValues', notificationsFromExperts: boolean, peopleRatingEnabled: boolean } };

export type UpdateTariffMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: UpdateTariffInput;
}>;


export type UpdateTariffMutation = { __typename?: 'Mutation', updateTariff: { __typename?: 'Tariff', id: string } };

export type TariffsControlListQueryVariables = Exact<{ [key: string]: never; }>;


export type TariffsControlListQuery = { __typename?: 'Query', tariffs: Array<{ __typename?: 'Tariff', active: boolean, title: string, updatedAt: any, joinProfessionalCommunities: number, mailingPerMonth: number, numberExpertsManagedByOneRepresentative: number, organizerExpertsOnEvent: number, organizerFeeEventMailingPriceExpert: number, organizerInviteMailingPriceExpert: number, organizerPerEvent: number, organizerRequestExpertAboutPrice: number, paidEventResponsesPerMonth: number, paidRequestPublicationPrice: number, activeWordDurationHours: number, price: number, referralBonus: number, referralPrice: number, votesPerEvent: number, countExpertsInCreateCommunity: number, createProfessionalCommunities: number, eventsPerMonth: number, id: string }> };

export type CommunityDirectionsCategorizedQueryVariables = Exact<{ [key: string]: never; }>;


export type CommunityDirectionsCategorizedQuery = { __typename?: 'Query', communityDirectionsCategorized: Array<{ __typename?: 'CategoryCommunityDirection', label: string, options: Array<{ __typename?: 'CommunityDirection', id: string, name: string, direction: string }> }> };

export type DeleteEventRequestMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteEventRequestMutation = { __typename?: 'Mutation', deleteEventRequest?: boolean | null };

export type RegionsOptionsQueryVariables = Exact<{ [key: string]: never; }>;


export type RegionsOptionsQuery = { __typename?: 'Query', regions: Array<{ __typename?: 'Region', regionName: string, id: string }> };

export type TariffListOptionsQieryQueryVariables = Exact<{ [key: string]: never; }>;


export type TariffListOptionsQieryQuery = { __typename?: 'Query', tariffs: Array<{ __typename?: 'Tariff', id: string, title: string }> };

export type CreateEventRequestMutationVariables = Exact<{
  event: CreateEventRequestInput;
}>;


export type CreateEventRequestMutation = { __typename?: 'Mutation', createEventRequest: { __typename?: 'EventRequest', id: string, createdAt: any, status: EventRequestStatus, event: { __typename?: 'Event', id: string, title: string, duration: number, description: string, startTime: any, expertEvent?: { __typename?: 'ExpertEvent', promoWord?: string | null } | null } } };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, firstName: string, lastName: string, rights: number, agreesTermsAt?: any | null, notifications: { __typename?: 'UserNotificationConnection', totalCount: number } } };

export type MyTariffLimitsQueryVariables = Exact<{ [key: string]: never; }>;


export type MyTariffLimitsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, tariffLimits: { __typename?: 'Tariff', votesPerEvent: number, eventsPerMonth: number, activeWordDurationHours: number } } };

export type HomePageQueryVariables = Exact<{ [key: string]: never; }>;


export type HomePageQuery = { __typename?: 'Query', statistic: { __typename?: 'Statistic', eventsCount: number, eventsHoursCount: number, usersCount: number, votesCount: number } };

export type InputPromoWildQueryVariables = Exact<{
  world?: Scalars['String']['input'];
}>;


export type InputPromoWildQuery = { __typename?: 'Query', inputEvent: { __typename?: 'Event', id: string } };

export type AcceptPlatformRightsMutationVariables = Exact<{
  data: AcceptPlatformRightsInput;
}>;


export type AcceptPlatformRightsMutation = { __typename?: 'Mutation', acceptPlatformRights: boolean };

export type UsageRightsQueryVariables = Exact<{ [key: string]: never; }>;


export type UsageRightsQuery = { __typename?: 'Query', platformRightsText: string };

export type MailingAdminMutationVariables = Exact<{
  data: CreateNotificationInput;
}>;


export type MailingAdminMutation = { __typename?: 'Mutation', createNotification?: string | null };

export type ModerationCardEventRequestQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ModerationCardEventRequestQuery = { __typename?: 'Query', eventRequest: { __typename?: 'EventRequest', updatedAt: any, createdAt: any, verifiedAt?: any | null, status: EventRequestStatus, event: { __typename?: 'Event', startTime: any, duration: number, description: string, title: string, type: EventType, expertEvent?: { __typename?: 'ExpertEvent', commentToListener?: string | null } | null }, creator: { __typename?: 'User', id: string, firstName: string, lastName: string, nickname?: string | null, avatar?: string | null, expertProfile?: { __typename?: 'ExpertProfile', id: string, about?: string | null, region: { __typename?: 'Region', regionName: string } } | null } } };

export type AcceptEventRequestMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  withPayment?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type AcceptEventRequestMutation = { __typename?: 'Mutation', acceptEvent: boolean };

export type RejectEventRequestMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  reason: Scalars['String']['input'];
}>;


export type RejectEventRequestMutation = { __typename?: 'Mutation', rejectEvent: boolean };

export type ModerationEventsListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
}>;


export type ModerationEventsListQuery = { __typename?: 'Query', eventRequests: { __typename?: 'EventRequestConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null }, edges?: Array<{ __typename?: 'EventRequestEdge', cursor: any, node?: { __typename?: 'EventRequest', id: string, createdAt: any, status: EventRequestStatus, event: { __typename?: 'Event', type: EventType, description: string, startTime: any, duration: number, title: string, expertEvent?: { __typename?: 'ExpertEvent', commentToListener?: string | null, promoWord?: string | null } | null } } | null } | null> | null } };

export type ProfileRequestQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ProfileRequestQuery = { __typename?: 'Query', ProfileRequest: { __typename?: 'ProfileRequest', status: ProfileRequestStatus, changeType: ProfileRequestChangeType, type: ProfileRequestType, creator: { __typename?: 'User', firstName: string, lastName: string, avatar?: string | null }, expertRequest?: { __typename?: 'ExpertProfileRequest', newSocialMediaLink?: string | null, newSimpleSpeechLink?: string | null, newAbout?: string | null, newFirstName?: string | null, newLastName?: string | null, newReferUsername?: string | null, newRegalia?: string | null, newCommunityDirections?: Array<{ __typename?: 'CommunityDirection', direction: string, name: string }> | null, newRegion?: { __typename?: 'Region', regionName: string } | null } | null, organizatorRequest?: { __typename?: 'OrganizatorProfileRequest', newOrganizationName: string, newOrganizationURL?: string | null } | null } };

export type AcceptExpertRequectMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type AcceptExpertRequectMutation = { __typename?: 'Mutation', acceptProfileRequest: { __typename?: 'ProfileRequest', id: string } };

export type RejectProfileRequestMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  reason: Scalars['String']['input'];
}>;


export type RejectProfileRequestMutation = { __typename?: 'Mutation', rejectProfileRequest?: boolean | null };

export type ModerationProfilesListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  cursor?: InputMaybe<Scalars['Cursor']['input']>;
}>;


export type ModerationProfilesListQuery = { __typename?: 'Query', profileRequests: { __typename?: 'ProfileRequestConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null }, edges?: Array<{ __typename?: 'ProfileRequestEdge', cursor: any, node?: { __typename?: 'ProfileRequest', id: string, type: ProfileRequestType, createdAt: any, changeType: ProfileRequestChangeType, creator: { __typename?: 'User', firstName: string, lastName: string, avatar?: string | null } } | null } | null> | null } };

export type CreatePromocodeMutationVariables = Exact<{
  data: CreatePromocodeInput;
}>;


export type CreatePromocodeMutation = { __typename?: 'Mutation', createPromocode: { __typename?: 'Promocode', id: string, maxUserCountActivations: number, startAt: any, code: string, createdAt: any, discount: number, endAt: any, activatedCount: number, maxCountActivations: number, maxMouthSubscriptionDuration: number, tariffs?: Array<{ __typename?: 'Tariff', id: string, title: string }> | null } };

export type UsageRightWriteMutationVariables = Exact<{
  text: Scalars['String']['input'];
}>;


export type UsageRightWriteMutation = { __typename?: 'Mutation', platformRightsTextWrite: boolean };

export type SearchExpertQueryVariables = Exact<{
  query: Scalars['String']['input'];
}>;


export type SearchExpertQuery = { __typename?: 'Query', searchExpertToOrganizatorEvent: Array<{ __typename?: 'User', id: string, firstName: string, lastName: string, avatar?: string | null, nickname?: string | null }> };

export type VoteInEventMutationVariables = Exact<{
  data: CreateVoteInput;
}>;


export type VoteInEventMutation = { __typename?: 'Mutation', createVote: { __typename?: 'Vote', id: string } };

export type DeleteVoteInEventMutationVariables = Exact<{
  data: DeleteVoteInput;
}>;


export type DeleteVoteInEventMutation = { __typename?: 'Mutation', deleteVote?: boolean | null };

export type VotesResponceQueryVariables = Exact<{
  eventID: Scalars['ID']['input'];
}>;


export type VotesResponceQuery = { __typename?: 'Query', analisticVotes?: Array<{ __typename?: 'Vote', deletedAt?: any | null, isLike?: boolean | null, event?: { __typename?: 'Event', promoWorld?: string | null, startTime: any, endTime: any, title: string } | null, targetExpert?: { __typename?: 'ExpertProfile', user: { __typename?: 'User', id: string, firstName: string, lastName: string, nickname?: string | null } } | null, user?: { __typename?: 'User', firstName: string, lastName: string, nickname?: string | null, id: string } | null }> | null };

export type VotesHistoryQueryVariables = Exact<{
  eventID: Scalars['ID']['input'];
}>;


export type VotesHistoryQuery = { __typename?: 'Query', analisticVotesHistory?: Array<{ __typename?: 'VoteHistory', action: VoteHistoryAction, newIsLike?: boolean | null, oldIsLike?: boolean | null, reason: string, createdAt: any }> | null };

export type ResponceToOrganizatorEventMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ResponceToOrganizatorEventMutation = { __typename?: 'Mutation', respondToOrganizatorEvent: { __typename?: 'ExpertResponseToEvent', id: string, status: ExpertResponseToEventStatus, type: ExpertResponseToEventType } };

export type ExpertListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
  filter: ExpertProfileWhereInput;
}>;


export type ExpertListQuery = { __typename?: 'Query', expertProfiles: { __typename?: 'ExpertProfileConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null }, edges?: Array<{ __typename?: 'ExpertProfileEdge', cursor: any, node?: { __typename?: 'ExpertProfile', peopleVotesCount: number, votesCount: number, countEvents: number, id: string, about?: string | null, user: { __typename?: 'User', firstName: string, lastName: string, avatar?: string | null, rights: number }, region: { __typename?: 'Region', regionName: string }, communityDirections?: Array<{ __typename?: 'CommunityDirection', direction: string, name: string }> | null } | null } | null> | null } };

export type MyProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type MyProfileQuery = { __typename?: 'Query', me: { __typename?: 'User', avatar?: string | null, firstName: string, lastName: string, expertProfile?: { __typename?: 'ExpertProfile', simpleSpeechLink?: string | null, socialMediaLink?: string | null, positiveVotes: number, negativeVotes: number, positivePeopleVotes: number, negativePeopleVotes: number, countEvents: number, peopleVotesCount: number, votesCount: number, peopleRatingEnabled: boolean, about?: string | null, region: { __typename?: 'Region', regionName: string }, communityDirections?: Array<{ __typename?: 'CommunityDirection', direction: string, name: string }> | null } | null } };

export type PaymentEventMutationVariables = Exact<{
  data: CreatePaymentLinkEvent;
}>;


export type PaymentEventMutation = { __typename?: 'Mutation', createPaidLinkEvent: string };

export type MyNotificationsQueryVariables = Exact<{ [key: string]: never; }>;


export type MyNotificationsQuery = { __typename?: 'Query', myNotifications: { __typename?: 'UserNotificationConnection', totalCount: number, edges?: Array<{ __typename?: 'UserNotificationEdge', node?: { __typename?: 'UserNotification', id: string, readAt?: any | null, notification: { __typename?: 'Notification', title: string, message: string, createdAt: any, level: NotificationLevel, expiresAt?: any | null, actions?: Array<{ __typename?: 'NotificationAction', label: string, type: NotificationActionType, payload?: any | null, variant: NotificationActionVariant }> | null } } | null } | null> | null } };

export type AcceptInviteOrganizatorEventMutationVariables = Exact<{
  requestID: Scalars['ID']['input'];
}>;


export type AcceptInviteOrganizatorEventMutation = { __typename?: 'Mutation', acceptInviteOrganizatorEvent?: boolean | null };

export type RejectInviteOrganizatorEventMutationVariables = Exact<{
  requestID: Scalars['ID']['input'];
}>;


export type RejectInviteOrganizatorEventMutation = { __typename?: 'Mutation', rejectInviteOrganizatorEvent?: boolean | null };

export type ReadNotificationsMutationVariables = Exact<{
  id?: InputMaybe<Array<Scalars['ID']['input']> | Scalars['ID']['input']>;
}>;


export type ReadNotificationsMutation = { __typename?: 'Mutation', readNotification?: boolean | null };

export type ReadAllNotificationsMutationVariables = Exact<{ [key: string]: never; }>;


export type ReadAllNotificationsMutation = { __typename?: 'Mutation', readAllNotifications?: boolean | null };

export type CreateOrganizatorRequestMutationVariables = Exact<{
  data: ProfileCreateInput;
}>;


export type CreateOrganizatorRequestMutation = { __typename?: 'Mutation', createProfileRequest: { __typename?: 'ProfileRequest', id: string } };

export type CreateProfilePreExpertMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateProfilePreExpertMutation = { __typename?: 'Mutation', createProfileRequest: { __typename?: 'ProfileRequest', id: string } };

export type RepresentativeUsersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
}>;


export type RepresentativeUsersQuery = { __typename?: 'Query', representativeExperts: { __typename?: 'UserConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean }, edges?: Array<{ __typename?: 'UserEdge', cursor: any, node?: { __typename?: 'User', id: string, firstName: string, lastName: string, avatar?: string | null, nickname?: string | null } | null } | null> | null } };

export type RepresentiveEventsQueryVariables = Exact<{
  expertID: Scalars['ID']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
}>;


export type RepresentiveEventsQuery = { __typename?: 'Query', expertRepresentativeEvents: { __typename?: 'EventConnection', totalCount: number, edges?: Array<{ __typename?: 'EventEdge', cursor: any, node?: { __typename?: 'Event', id: string, title: string, createdAt: any, myExpertVote: VoteType, promoWorld?: string | null, startTime: any, type: EventType, description: string, duration: number, endTime: any, eventRequest?: { __typename?: 'EventRequest', status: EventRequestStatus, updatedAt: any } | null } | null } | null> | null, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: any | null } } };

export type UserTariffLimitsQueryVariables = Exact<{
  userID: Scalars['ID']['input'];
}>;


export type UserTariffLimitsQuery = { __typename?: 'Query', userTariffLimits: { __typename?: 'Tariff', votesPerEvent: number, eventsPerMonth: number, activeWordDurationHours: number } };

export type PreExpertExpertsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['Cursor']['input']>;
  where?: InputMaybe<RepresentativeExpertRequestWhereInput>;
  orderBy?: InputMaybe<RepresentativeExpertRequestOrder>;
}>;


export type PreExpertExpertsQuery = { __typename?: 'Query', representativeExpertRequests: { __typename?: 'RepresentativeExpertRequestConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: any | null, hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: any | null }, edges?: Array<{ __typename?: 'RepresentativeExpertRequestEdge', cursor: any, node?: { __typename?: 'RepresentativeExpertRequest', id: string, status: RepresentativeExpertRequestStatus, type: RepresentativeExpertRequestType, createdAt: any, targetUser: { __typename?: 'User', id: string, firstName: string, lastName: string, avatar?: string | null, rights: number }, representativeUser: { __typename?: 'User', id: string, firstName: string, lastName: string, avatar?: string | null, rights: number } } | null } | null> | null } };

export type AcceptRepresentiveMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type AcceptRepresentiveMutation = { __typename?: 'Mutation', acceptRepresentativeRequest?: boolean | null };

export type RejectRepresentiveMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RejectRepresentiveMutation = { __typename?: 'Mutation', rejectRepresentativeRequest?: boolean | null };

export type TariffsListQueryVariables = Exact<{ [key: string]: never; }>;


export type TariffsListQuery = { __typename?: 'Query', tariffs: Array<{ __typename?: 'Tariff', active: boolean, family: TariffTariffFamily, joinProfessionalCommunities: number, mailingPerMonth: number, numberExpertsManagedByOneRepresentative: number, organizerExpertsOnEvent: number, organizerFeeEventMailingPriceExpert: number, organizerInviteMailingPriceExpert: number, organizerPerEvent: number, organizerRequestExpertAboutPrice: number, paidEventResponsesPerMonth: number, paidRequestPublicationPrice: number, activeWordDurationHours: number, price: number, referralBonus: number, referralPrice: number, title: string, updatedAt: any, votesPerEvent: number, countExpertsInCreateCommunity: number, createProfessionalCommunities: number, createdAt: any, eventsPerMonth: number, freeEventResponses: number, id: string }> };

export type CreatePaymentLinkTariffMutationVariables = Exact<{
  data: SubmitTariffInput;
}>;


export type CreatePaymentLinkTariffMutation = { __typename?: 'Mutation', submitTariff: { __typename?: 'SubmitTariffResponse', discount: number, openedByPromocode: boolean, paymentLink: string, promocodeResult: UserPromocodeResult } };

export type CreateProfileVerificationMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateProfileVerificationMutation = { __typename?: 'Mutation', createVerifyExpertRequest: { __typename?: 'VerifyExpertRequest', id: string } };

export type VerificationCardByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type VerificationCardByIdQuery = { __typename?: 'Query', verifyExpertRequest: { __typename?: 'VerifyExpertRequest', status: VerifyExpertRequestStatus, createdAt: any, creator: { __typename?: 'User', id: string, firstName: string, lastName: string, nickname?: string | null, expertProfile?: { __typename?: 'ExpertProfile', about?: string | null } | null } } };

export type VerificationAcceptMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  isAccept: Scalars['Boolean']['input'];
  isReject: Scalars['Boolean']['input'];
}>;


export type VerificationAcceptMutation = { __typename?: 'Mutation', voteVerifyExpert: { __typename?: 'VoteVerifyExpert', id: string } };

export class TypedDocumentString<TResult, TVariables>
  extends String
  implements DocumentTypeDecoration<TResult, TVariables>
{
  __apiType?: DocumentTypeDecoration<TResult, TVariables>['__apiType'];

  constructor(private value: string, public __meta__?: Record<string, any> | undefined) {
    super(value);
  }

  toString(): string & DocumentTypeDecoration<TResult, TVariables> {
    return this.value;
  }
}

export const MyProfileRequestDocument = new TypedDocumentString(`
    query myProfileRequest($argType: ProfileRequestType!) {
  myProfileRequest(type: $argType) {
    id
    status
    expertRequest {
      newSimpleSpeechLink
      newSocialMediaLink
      newFirstName
      newLastName
      newAbout
      newReferUsername
      newRegion {
        id
      }
      newCommunityDirections {
        id
      }
    }
    organizatorRequest {
      newOrganizationName
      newOrganizationURL
    }
  }
}
    `) as unknown as TypedDocumentString<MyProfileRequestQuery, MyProfileRequestQueryVariables>;
export const EventsListDocument = new TypedDocumentString(`
    query eventsList($first: Int!, $after: Cursor, $filter: EventWhereInput, $orderBy: EventOrder) {
  events(first: $first, after: $after, where: $filter, orderBy: $orderBy) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        id
        title
        type
        startTime
        endTime
        duration
        updatedAt
        createdAt
        description
      }
    }
  }
}
    `) as unknown as TypedDocumentString<EventsListQuery, EventsListQueryVariables>;
export const EventCardPageDocument = new TypedDocumentString(`
    query eventCardPage($id: ID!) {
  event(id: $id) {
    startTime
    type
    duration
    createdAt
    title
    updatedAt
    endTime
    description
    promoWorld
    expertEvent {
      link
      commentToListener
      promoWord
    }
    organizatorEvent {
      feeType
    }
    myExpertVote
    creator {
      firstName
      lastName
      id
      nickname
      username
      avatar
      rights
      expertProfile {
        about
        countEvents
        votesCount
        peopleVotesCount
        region {
          regionName
        }
        id
      }
    }
    id
  }
}
    `) as unknown as TypedDocumentString<EventCardPageQuery, EventCardPageQueryVariables>;
export const ProfileEventsDocument = new TypedDocumentString(`
    query ProfileEvents($first: Int, $after: Cursor, $where: EventRequestWhereInput) {
  myEventRequests(
    first: $first
    after: $after
    orderBy: {direction: DESC, field: CREATED_AT}
    where: $where
  ) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    edges {
      node {
        id
        createdAt
        status
        rejectComment
        event {
          id
          title
          duration
          startTime
          type
          description
          expertEvent {
            promoWord
          }
          organizatorEvent {
            feeType
            place
            speakerBenefits
            targetAudience {
              id
            }
            topic
            transferPaid
            verificationMode
          }
        }
      }
      cursor
    }
    totalCount
  }
}
    `) as unknown as TypedDocumentString<ProfileEventsQuery, ProfileEventsQueryVariables>;
export const ExpertResponcesToOrganizaotorEventsDocument = new TypedDocumentString(`
    query expertResponcesToOrganizaotorEvents($first: Int!, $after: Cursor, $where: ExpertResponseToEventWhereInput) {
  expertResponseToEvents(first: $first, after: $after, where: $where) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
    edges {
      cursor
      node {
        createdAt
        id
        status
        type
        user {
          id
          firstName
          lastName
          avatar
          expertProfile {
            about
            region {
              regionName
            }
          }
        }
        updatedAt
      }
    }
  }
}
    `) as unknown as TypedDocumentString<ExpertResponcesToOrganizaotorEventsQuery, ExpertResponcesToOrganizaotorEventsQueryVariables>;
export const InviteExpertToOrganizatorEventDocument = new TypedDocumentString(`
    mutation inviteExpertToOrganizatorEvent($data: CreateInviteToOrganizatorEvent!) {
  createInviteToOrganizatorEvent(data: $data) {
    id
  }
}
    `) as unknown as TypedDocumentString<InviteExpertToOrganizatorEventMutation, InviteExpertToOrganizatorEventMutationVariables>;
export const AcceptRespnceExpertToOrganizatorEventDocument = new TypedDocumentString(`
    mutation acceptRespnceExpertToOrganizatorEvent($id: ID!, $data: CreateChildOrganizatorEventInput!) {
  acceptResponOrganizatorEvent(responceID: $id, data: $data) {
    id
  }
}
    `) as unknown as TypedDocumentString<AcceptRespnceExpertToOrganizatorEventMutation, AcceptRespnceExpertToOrganizatorEventMutationVariables>;
export const RejectRespnceExpertToOrganizatorEventDocument = new TypedDocumentString(`
    mutation rejectRespnceExpertToOrganizatorEvent($id: ID!) {
  rejectRespondOrganizatorEvent(responceID: $id) {
    id
  }
}
    `) as unknown as TypedDocumentString<RejectRespnceExpertToOrganizatorEventMutation, RejectRespnceExpertToOrganizatorEventMutationVariables>;
export const CreateExpertRequestDocument = new TypedDocumentString(`
    mutation CreateExpertRequest($input: ProfileCreateInput!) {
  createProfileRequest(input: $input) {
    id
  }
}
    `) as unknown as TypedDocumentString<CreateExpertRequestMutation, CreateExpertRequestMutationVariables>;
export const GetExpertProfileDocument = new TypedDocumentString(`
    query getExpertProfile($id: ID!) {
  user(id: $id) {
    avatar
    firstName
    lastName
    rights
    platforms {
      platformID
      platform
    }
    expertProfile {
      socialMediaLink
      peopleRatingEnabled
      referUsername
      region {
        regionName
      }
      communityDirections {
        direction
        name
      }
      votesCount
      peopleVotesCount
      countEvents
      about
      myExpertVote
      myPeopleVote
    }
  }
}
    `) as unknown as TypedDocumentString<GetExpertProfileQuery, GetExpertProfileQueryVariables>;
export const AssignTariffDocument = new TypedDocumentString(`
    mutation assignTariff($data: AssignTariffInput!) {
  assignTariff(data: $data)
}
    `) as unknown as TypedDocumentString<AssignTariffMutation, AssignTariffMutationVariables>;
export const VoteInPeopleRaitingDocument = new TypedDocumentString(`
    mutation voteInPeopleRaiting($data: CreateVoteInput!) {
  createVote(data: $data) {
    id
  }
}
    `) as unknown as TypedDocumentString<VoteInPeopleRaitingMutation, VoteInPeopleRaitingMutationVariables>;
export const DeletePeopleVoteDocument = new TypedDocumentString(`
    mutation deletePeopleVote($data: DeleteVoteInput!) {
  deleteVote(id: $data)
}
    `) as unknown as TypedDocumentString<DeletePeopleVoteMutation, DeletePeopleVoteMutationVariables>;
export const VerificateUserFromAdminDocument = new TypedDocumentString(`
    mutation verificateUserFromAdmin($userID: ID!) {
  verifiesUser(userID: $userID)
}
    `) as unknown as TypedDocumentString<VerificateUserFromAdminMutation, VerificateUserFromAdminMutationVariables>;
export const PreExpertRequestCreateDocument = new TypedDocumentString(`
    mutation preExpertRequestCreate($data: CreateRepresentativeExpertRequestInput!) {
  createRepresentativeRequest(data: $data)
}
    `) as unknown as TypedDocumentString<PreExpertRequestCreateMutation, PreExpertRequestCreateMutationVariables>;
export const AssignAdminRightToExpertDocument = new TypedDocumentString(`
    mutation assignAdminRightToExpert($id: ID!) {
  assignAdminRights(userID: $id) {
    id
  }
}
    `) as unknown as TypedDocumentString<AssignAdminRightToExpertMutation, AssignAdminRightToExpertMutationVariables>;
export const DeleteUserProfileDocument = new TypedDocumentString(`
    mutation deleteUserProfile {
  deleteMyProfileUser
}
    `) as unknown as TypedDocumentString<DeleteUserProfileMutation, DeleteUserProfileMutationVariables>;
export const DeleteMyExpertProfileDocument = new TypedDocumentString(`
    mutation deleteMyExpertProfile {
  deleteMyProfileExpert
}
    `) as unknown as TypedDocumentString<DeleteMyExpertProfileMutation, DeleteMyExpertProfileMutationVariables>;
export const DeleteMyOrganizaotorProfileDocument = new TypedDocumentString(`
    mutation deleteMyOrganizaotorProfile {
  deleteMyProfileOrganizator
}
    `) as unknown as TypedDocumentString<DeleteMyOrganizaotorProfileMutation, DeleteMyOrganizaotorProfileMutationVariables>;
export const PromocodesListDocument = new TypedDocumentString(`
    query promocodesList($first: Int!, $after: Cursor) {
  promocodes(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        active
        startAt
        updatedAt
        code
        createdAt
        maxCountActivations
        maxMouthSubscriptionDuration
        maxUserCountActivations
        activatedCount
        discount
        endAt
      }
    }
    totalCount
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
  }
}
    `) as unknown as TypedDocumentString<PromocodesListQuery, PromocodesListQueryVariables>;
export const SettingsDocument = new TypedDocumentString(`
    query settings {
  settings {
    notificationsFromExperts
    peopleRatingEnabled
  }
}
    `) as unknown as TypedDocumentString<SettingsQuery, SettingsQueryVariables>;
export const SetSettingsDocument = new TypedDocumentString(`
    mutation setSettings($data: SettingsValuesInput!) {
  setSettings(data: $data) {
    notificationsFromExperts
    peopleRatingEnabled
  }
}
    `) as unknown as TypedDocumentString<SetSettingsMutation, SetSettingsMutationVariables>;
export const UpdateTariffDocument = new TypedDocumentString(`
    mutation updateTariff($id: ID!, $data: UpdateTariffInput!) {
  updateTariff(id: $id, data: $data) {
    id
  }
}
    `) as unknown as TypedDocumentString<UpdateTariffMutation, UpdateTariffMutationVariables>;
export const TariffsControlListDocument = new TypedDocumentString(`
    query tariffsControlList {
  tariffs {
    active
    title
    updatedAt
    joinProfessionalCommunities
    mailingPerMonth
    numberExpertsManagedByOneRepresentative
    organizerExpertsOnEvent
    organizerFeeEventMailingPriceExpert
    organizerInviteMailingPriceExpert
    organizerPerEvent
    organizerRequestExpertAboutPrice
    paidEventResponsesPerMonth
    paidRequestPublicationPrice
    activeWordDurationHours
    price
    referralBonus
    referralPrice
    votesPerEvent
    countExpertsInCreateCommunity
    createProfessionalCommunities
    eventsPerMonth
    id
  }
}
    `) as unknown as TypedDocumentString<TariffsControlListQuery, TariffsControlListQueryVariables>;
export const CommunityDirectionsCategorizedDocument = new TypedDocumentString(`
    query CommunityDirectionsCategorized {
  communityDirectionsCategorized {
    label
    options {
      id
      name
      direction
    }
  }
}
    `) as unknown as TypedDocumentString<CommunityDirectionsCategorizedQuery, CommunityDirectionsCategorizedQueryVariables>;
export const DeleteEventRequestDocument = new TypedDocumentString(`
    mutation deleteEventRequest($id: ID!) {
  deleteEventRequest(requestID: $id)
}
    `) as unknown as TypedDocumentString<DeleteEventRequestMutation, DeleteEventRequestMutationVariables>;
export const RegionsOptionsDocument = new TypedDocumentString(`
    query regionsOptions {
  regions {
    regionName
    id
  }
}
    `) as unknown as TypedDocumentString<RegionsOptionsQuery, RegionsOptionsQueryVariables>;
export const TariffListOptionsQieryDocument = new TypedDocumentString(`
    query tariffListOptionsQiery {
  tariffs {
    id
    title
  }
}
    `) as unknown as TypedDocumentString<TariffListOptionsQieryQuery, TariffListOptionsQieryQueryVariables>;
export const CreateEventRequestDocument = new TypedDocumentString(`
    mutation createEventRequest($event: CreateEventRequestInput!) {
  createEventRequest(event: $event) {
    id
    createdAt
    status
    event {
      id
      title
      duration
      description
      startTime
      expertEvent {
        promoWord
      }
    }
  }
}
    `) as unknown as TypedDocumentString<CreateEventRequestMutation, CreateEventRequestMutationVariables>;
export const MeDocument = new TypedDocumentString(`
    query Me {
  me {
    id
    firstName
    lastName
    rights
    agreesTermsAt
    notifications(where: {readAtIsNil: true}) {
      totalCount
    }
  }
}
    `) as unknown as TypedDocumentString<MeQuery, MeQueryVariables>;
export const MyTariffLimitsDocument = new TypedDocumentString(`
    query myTariffLimits {
  me {
    id
    tariffLimits {
      votesPerEvent
      eventsPerMonth
      activeWordDurationHours
    }
  }
}
    `) as unknown as TypedDocumentString<MyTariffLimitsQuery, MyTariffLimitsQueryVariables>;
export const HomePageDocument = new TypedDocumentString(`
    query homePage {
  statistic {
    eventsCount
    eventsHoursCount
    usersCount
    votesCount
  }
}
    `) as unknown as TypedDocumentString<HomePageQuery, HomePageQueryVariables>;
export const InputPromoWildDocument = new TypedDocumentString(`
    query inputPromoWild($world: String! = "") {
  inputEvent(promoWord: $world) {
    id
  }
}
    `) as unknown as TypedDocumentString<InputPromoWildQuery, InputPromoWildQueryVariables>;
export const AcceptPlatformRightsDocument = new TypedDocumentString(`
    mutation AcceptPlatformRights($data: acceptPlatformRightsInput!) {
  acceptPlatformRights(data: $data)
}
    `) as unknown as TypedDocumentString<AcceptPlatformRightsMutation, AcceptPlatformRightsMutationVariables>;
export const UsageRightsDocument = new TypedDocumentString(`
    query UsageRights {
  platformRightsText
}
    `) as unknown as TypedDocumentString<UsageRightsQuery, UsageRightsQueryVariables>;
export const MailingAdminDocument = new TypedDocumentString(`
    mutation mailingAdmin($data: CreateNotificationInput!) {
  createNotification(data: $data)
}
    `) as unknown as TypedDocumentString<MailingAdminMutation, MailingAdminMutationVariables>;
export const ModerationCardEventRequestDocument = new TypedDocumentString(`
    query moderationCardEventRequest($id: ID!) {
  eventRequest(id: $id) {
    updatedAt
    createdAt
    verifiedAt
    status
    event {
      startTime
      duration
      description
      title
      type
      expertEvent {
        commentToListener
      }
    }
    creator {
      id
      firstName
      lastName
      nickname
      avatar
      expertProfile {
        id
        about
        region {
          regionName
        }
      }
    }
  }
}
    `) as unknown as TypedDocumentString<ModerationCardEventRequestQuery, ModerationCardEventRequestQueryVariables>;
export const AcceptEventRequestDocument = new TypedDocumentString(`
    mutation AcceptEventRequest($id: ID!, $withPayment: Boolean = false) {
  acceptEvent(eventId: $id, withPayment: $withPayment)
}
    `) as unknown as TypedDocumentString<AcceptEventRequestMutation, AcceptEventRequestMutationVariables>;
export const RejectEventRequestDocument = new TypedDocumentString(`
    mutation rejectEventRequest($id: ID!, $reason: String!) {
  rejectEvent(eventId: $id, reason: $reason)
}
    `) as unknown as TypedDocumentString<RejectEventRequestMutation, RejectEventRequestMutationVariables>;
export const ModerationEventsListDocument = new TypedDocumentString(`
    query moderationEventsList($first: Int!, $after: Cursor) {
  eventRequests(
    first: $first
    after: $after
    where: {status: pending}
    orderBy: {field: CREATED_AT, direction: DESC}
  ) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    edges {
      node {
        id
        createdAt
        status
        event {
          type
          description
          startTime
          duration
          title
          expertEvent {
            commentToListener
            promoWord
          }
        }
      }
      cursor
    }
    totalCount
  }
}
    `) as unknown as TypedDocumentString<ModerationEventsListQuery, ModerationEventsListQueryVariables>;
export const ProfileRequestDocument = new TypedDocumentString(`
    query profileRequest($id: ID!) {
  ProfileRequest(id: $id) {
    creator {
      firstName
      lastName
      avatar
    }
    status
    changeType
    type
    expertRequest {
      newSocialMediaLink
      newSimpleSpeechLink
      newAbout
      newFirstName
      newLastName
      newCommunityDirections {
        direction
        name
      }
      newReferUsername
      newRegalia
      newRegion {
        regionName
      }
    }
    organizatorRequest {
      newOrganizationName
      newOrganizationURL
    }
  }
}
    `) as unknown as TypedDocumentString<ProfileRequestQuery, ProfileRequestQueryVariables>;
export const AcceptExpertRequectDocument = new TypedDocumentString(`
    mutation AcceptExpertRequect($id: ID!) {
  acceptProfileRequest(requestId: $id) {
    id
  }
}
    `) as unknown as TypedDocumentString<AcceptExpertRequectMutation, AcceptExpertRequectMutationVariables>;
export const RejectProfileRequestDocument = new TypedDocumentString(`
    mutation rejectProfileRequest($id: ID!, $reason: String!) {
  rejectProfileRequest(requestId: $id, reason: $reason)
}
    `) as unknown as TypedDocumentString<RejectProfileRequestMutation, RejectProfileRequestMutationVariables>;
export const ModerationProfilesListDocument = new TypedDocumentString(`
    query moderationProfilesList($first: Int!, $cursor: Cursor) {
  profileRequests(
    first: $first
    after: $cursor
    where: {status: pending}
    orderBy: {direction: DESC, field: CREATED_AT}
  ) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    edges {
      cursor
      node {
        id
        type
        createdAt
        changeType
        creator {
          firstName
          lastName
          avatar
        }
      }
    }
    totalCount
  }
}
    `) as unknown as TypedDocumentString<ModerationProfilesListQuery, ModerationProfilesListQueryVariables>;
export const CreatePromocodeDocument = new TypedDocumentString(`
    mutation createPromocode($data: CreatePromocodeInput!) {
  createPromocode(data: $data) {
    id
    maxUserCountActivations
    startAt
    tariffs {
      id
      title
    }
    code
    createdAt
    discount
    endAt
    activatedCount
    maxCountActivations
    maxMouthSubscriptionDuration
  }
}
    `) as unknown as TypedDocumentString<CreatePromocodeMutation, CreatePromocodeMutationVariables>;
export const UsageRightWriteDocument = new TypedDocumentString(`
    mutation usageRightWrite($text: String!) {
  platformRightsTextWrite(text: $text)
}
    `) as unknown as TypedDocumentString<UsageRightWriteMutation, UsageRightWriteMutationVariables>;
export const SearchExpertDocument = new TypedDocumentString(`
    query searchExpert($query: String!) {
  searchExpertToOrganizatorEvent(query: $query) {
    id
    firstName
    lastName
    avatar
    nickname
  }
}
    `) as unknown as TypedDocumentString<SearchExpertQuery, SearchExpertQueryVariables>;
export const VoteInEventDocument = new TypedDocumentString(`
    mutation voteInEvent($data: CreateVoteInput!) {
  createVote(data: $data) {
    id
  }
}
    `) as unknown as TypedDocumentString<VoteInEventMutation, VoteInEventMutationVariables>;
export const DeleteVoteInEventDocument = new TypedDocumentString(`
    mutation deleteVoteInEvent($data: DeleteVoteInput!) {
  deleteVote(id: $data)
}
    `) as unknown as TypedDocumentString<DeleteVoteInEventMutation, DeleteVoteInEventMutationVariables>;
export const VotesResponceDocument = new TypedDocumentString(`
    query votesResponce($eventID: ID!) {
  analisticVotes(eventID: $eventID) {
    deletedAt
    event {
      promoWorld
      startTime
      endTime
      title
    }
    targetExpert {
      user {
        id
        firstName
        lastName
        nickname
      }
    }
    user {
      firstName
      lastName
      nickname
      id
    }
    isLike
  }
}
    `) as unknown as TypedDocumentString<VotesResponceQuery, VotesResponceQueryVariables>;
export const VotesHistoryDocument = new TypedDocumentString(`
    query votesHistory($eventID: ID!) {
  analisticVotesHistory(eventID: $eventID) {
    action
    newIsLike
    oldIsLike
    reason
    createdAt
  }
}
    `) as unknown as TypedDocumentString<VotesHistoryQuery, VotesHistoryQueryVariables>;
export const ResponceToOrganizatorEventDocument = new TypedDocumentString(`
    mutation responceToOrganizatorEvent($id: ID!) {
  respondToOrganizatorEvent(eventID: $id) {
    id
    status
    type
  }
}
    `) as unknown as TypedDocumentString<ResponceToOrganizatorEventMutation, ResponceToOrganizatorEventMutationVariables>;
export const ExpertListDocument = new TypedDocumentString(`
    query expertList($first: Int!, $after: Cursor, $filter: ExpertProfileWhereInput!) {
  expertProfiles(first: $first, after: $after, where: $filter) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
    edges {
      cursor
      node {
        peopleVotesCount
        votesCount
        countEvents
        id
        user {
          firstName
          lastName
          avatar
          rights
        }
        about
        region {
          regionName
        }
        communityDirections {
          direction
          name
        }
      }
    }
  }
}
    `) as unknown as TypedDocumentString<ExpertListQuery, ExpertListQueryVariables>;
export const MyProfileDocument = new TypedDocumentString(`
    query MyProfile {
  me {
    avatar
    firstName
    lastName
    expertProfile {
      simpleSpeechLink
      socialMediaLink
      positiveVotes
      negativeVotes
      positivePeopleVotes
      negativePeopleVotes
      countEvents
      peopleVotesCount
      votesCount
      region {
        regionName
      }
      peopleRatingEnabled
      about
      communityDirections {
        direction
        name
      }
    }
  }
}
    `) as unknown as TypedDocumentString<MyProfileQuery, MyProfileQueryVariables>;
export const PaymentEventDocument = new TypedDocumentString(`
    mutation paymentEvent($data: CreatePaymentLinkEvent!) {
  createPaidLinkEvent(data: $data)
}
    `) as unknown as TypedDocumentString<PaymentEventMutation, PaymentEventMutationVariables>;
export const MyNotificationsDocument = new TypedDocumentString(`
    query myNotifications {
  myNotifications(first: 150) {
    edges {
      node {
        id
        readAt
        notification {
          title
          message
          createdAt
          level
          expiresAt
          actions {
            label
            type
            payload
            variant
          }
        }
      }
    }
    totalCount
  }
}
    `) as unknown as TypedDocumentString<MyNotificationsQuery, MyNotificationsQueryVariables>;
export const AcceptInviteOrganizatorEventDocument = new TypedDocumentString(`
    mutation acceptInviteOrganizatorEvent($requestID: ID!) {
  acceptInviteOrganizatorEvent(requestID: $requestID)
}
    `) as unknown as TypedDocumentString<AcceptInviteOrganizatorEventMutation, AcceptInviteOrganizatorEventMutationVariables>;
export const RejectInviteOrganizatorEventDocument = new TypedDocumentString(`
    mutation rejectInviteOrganizatorEvent($requestID: ID!) {
  rejectInviteOrganizatorEvent(requestID: $requestID)
}
    `) as unknown as TypedDocumentString<RejectInviteOrganizatorEventMutation, RejectInviteOrganizatorEventMutationVariables>;
export const ReadNotificationsDocument = new TypedDocumentString(`
    mutation readNotifications($id: [ID!]) {
  readNotification(id: $id)
}
    `) as unknown as TypedDocumentString<ReadNotificationsMutation, ReadNotificationsMutationVariables>;
export const ReadAllNotificationsDocument = new TypedDocumentString(`
    mutation readAllNotifications {
  readAllNotifications
}
    `) as unknown as TypedDocumentString<ReadAllNotificationsMutation, ReadAllNotificationsMutationVariables>;
export const CreateOrganizatorRequestDocument = new TypedDocumentString(`
    mutation createOrganizatorRequest($data: ProfileCreateInput!) {
  createProfileRequest(input: $data) {
    id
  }
}
    `) as unknown as TypedDocumentString<CreateOrganizatorRequestMutation, CreateOrganizatorRequestMutationVariables>;
export const CreateProfilePreExpertDocument = new TypedDocumentString(`
    mutation createProfilePreExpert {
  createProfileRequest(input: {changeType: create, type: pre_expert}) {
    id
  }
}
    `) as unknown as TypedDocumentString<CreateProfilePreExpertMutation, CreateProfilePreExpertMutationVariables>;
export const RepresentativeUsersDocument = new TypedDocumentString(`
    query representativeUsers($first: Int!, $after: Cursor) {
  representativeExperts(first: $first, after: $after) {
    pageInfo {
      endCursor
      hasNextPage
    }
    totalCount
    edges {
      cursor
      node {
        id
        firstName
        lastName
        avatar
        nickname
      }
    }
  }
}
    `) as unknown as TypedDocumentString<RepresentativeUsersQuery, RepresentativeUsersQueryVariables>;
export const RepresentiveEventsDocument = new TypedDocumentString(`
    query representiveEvents($expertID: ID!, $first: Int!, $after: Cursor) {
  expertRepresentativeEvents(expertID: $expertID, after: $after, first: $first) {
    edges {
      cursor
      node {
        id
        title
        createdAt
        myExpertVote
        promoWorld
        startTime
        type
        description
        duration
        endTime
        eventRequest {
          status
          updatedAt
        }
      }
    }
    pageInfo {
      endCursor
      hasPreviousPage
      hasNextPage
      startCursor
    }
    totalCount
  }
}
    `) as unknown as TypedDocumentString<RepresentiveEventsQuery, RepresentiveEventsQueryVariables>;
export const UserTariffLimitsDocument = new TypedDocumentString(`
    query userTariffLimits($userID: ID!) {
  userTariffLimits(userID: $userID) {
    votesPerEvent
    eventsPerMonth
    activeWordDurationHours
  }
}
    `) as unknown as TypedDocumentString<UserTariffLimitsQuery, UserTariffLimitsQueryVariables>;
export const PreExpertExpertsDocument = new TypedDocumentString(`
    query preExpertExperts($first: Int!, $after: Cursor, $where: RepresentativeExpertRequestWhereInput, $orderBy: RepresentativeExpertRequestOrder) {
  representativeExpertRequests(
    first: $first
    after: $after
    where: $where
    orderBy: $orderBy
  ) {
    totalCount
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    edges {
      cursor
      node {
        id
        status
        targetUser {
          id
          firstName
          lastName
          avatar
          rights
        }
        representativeUser {
          id
          firstName
          lastName
          avatar
          rights
        }
        type
        createdAt
      }
    }
  }
}
    `) as unknown as TypedDocumentString<PreExpertExpertsQuery, PreExpertExpertsQueryVariables>;
export const AcceptRepresentiveDocument = new TypedDocumentString(`
    mutation acceptRepresentive($id: ID!) {
  acceptRepresentativeRequest(requestID: $id)
}
    `) as unknown as TypedDocumentString<AcceptRepresentiveMutation, AcceptRepresentiveMutationVariables>;
export const RejectRepresentiveDocument = new TypedDocumentString(`
    mutation rejectRepresentive($id: ID!) {
  rejectRepresentativeRequest(requestID: $id)
}
    `) as unknown as TypedDocumentString<RejectRepresentiveMutation, RejectRepresentiveMutationVariables>;
export const TariffsListDocument = new TypedDocumentString(`
    query tariffsList {
  tariffs {
    active
    family
    joinProfessionalCommunities
    mailingPerMonth
    numberExpertsManagedByOneRepresentative
    organizerExpertsOnEvent
    organizerFeeEventMailingPriceExpert
    organizerInviteMailingPriceExpert
    organizerPerEvent
    organizerRequestExpertAboutPrice
    paidEventResponsesPerMonth
    paidRequestPublicationPrice
    activeWordDurationHours
    price
    referralBonus
    referralPrice
    title
    updatedAt
    votesPerEvent
    countExpertsInCreateCommunity
    createProfessionalCommunities
    createdAt
    eventsPerMonth
    freeEventResponses
    id
  }
}
    `) as unknown as TypedDocumentString<TariffsListQuery, TariffsListQueryVariables>;
export const CreatePaymentLinkTariffDocument = new TypedDocumentString(`
    mutation createPaymentLinkTariff($data: SubmitTariffInput!) {
  submitTariff(data: $data) {
    discount
    openedByPromocode
    paymentLink
    promocodeResult
  }
}
    `) as unknown as TypedDocumentString<CreatePaymentLinkTariffMutation, CreatePaymentLinkTariffMutationVariables>;
export const CreateProfileVerificationDocument = new TypedDocumentString(`
    mutation createProfileVerification {
  createVerifyExpertRequest {
    id
  }
}
    `) as unknown as TypedDocumentString<CreateProfileVerificationMutation, CreateProfileVerificationMutationVariables>;
export const VerificationCardByIdDocument = new TypedDocumentString(`
    query verificationCardByID($id: ID!) {
  verifyExpertRequest(id: $id) {
    creator {
      id
      firstName
      lastName
      nickname
      expertProfile {
        about
      }
    }
    status
    createdAt
  }
}
    `) as unknown as TypedDocumentString<VerificationCardByIdQuery, VerificationCardByIdQueryVariables>;
export const VerificationAcceptDocument = new TypedDocumentString(`
    mutation verificationAccept($id: ID!, $isAccept: Boolean!, $isReject: Boolean!) {
  voteVerifyExpert(
    vote: {verifyExpertRequestId: $id, isNegative: $isReject, isPositive: $isAccept}
  ) {
    id
  }
}
    `) as unknown as TypedDocumentString<VerificationAcceptMutation, VerificationAcceptMutationVariables>;