schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(forceGenerate: Boolean, model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @hasRights(rights: String!) on FIELD_DEFINITION

input AssignTariffInput {
  duration: Uint!
  tariffID: ID!
  userID: ID!
}

input CalcSubscriptionPriceInput {
  promocode: String
  tariffId: ID!
}

type CategoryCommunityDirection {
  label: String!
  options: [CommunityDirection!]!
}

type CheckPromocodeResponse {
  discount: Uint!
  maxDurationMonths: Uint
  promocodeResult: UserPromocodeResult!
}

type CommunityDirection implements Node {
  direction: String!
  eventTargetAudience: [OrganizatorEvent!]
  expertProfileRequestAsNew: [ExpertProfileRequest!]
  expertProfileRequestAsOld: [ExpertProfileRequest!]
  expertProfiles: [ExpertProfile!]
  id: ID!
  name: String!
  targetNotification: [Notification!]
}

"""
CommunityDirectionWhereInput is used for filtering CommunityDirection objects.
Input was generated by ent.
"""
input CommunityDirectionWhereInput {
  and: [CommunityDirectionWhereInput!]
  """direction field predicates"""
  direction: String
  directionContains: String
  directionContainsFold: String
  directionEqualFold: String
  directionGT: String
  directionGTE: String
  directionHasPrefix: String
  directionHasSuffix: String
  directionIn: [String!]
  directionLT: String
  directionLTE: String
  directionNEQ: String
  directionNotIn: [String!]
  """event_target_audience edge predicates"""
  hasEventTargetAudience: Boolean
  hasEventTargetAudienceWith: [OrganizatorEventWhereInput!]
  """expert_profile_request_as_new edge predicates"""
  hasExpertProfileRequestAsNew: Boolean
  hasExpertProfileRequestAsNewWith: [ExpertProfileRequestWhereInput!]
  """expert_profile_request_as_old edge predicates"""
  hasExpertProfileRequestAsOld: Boolean
  hasExpertProfileRequestAsOldWith: [ExpertProfileRequestWhereInput!]
  """expert_profiles edge predicates"""
  hasExpertProfiles: Boolean
  hasExpertProfilesWith: [ExpertProfileWhereInput!]
  """target_notification edge predicates"""
  hasTargetNotification: Boolean
  hasTargetNotificationWith: [NotificationWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: CommunityDirectionWhereInput
  or: [CommunityDirectionWhereInput!]
}

input CreateChildOrganizatorEventInput {
  duration: Uint!
  promoWord: String!
  startAt: Time!
}

"""
CreateCommunityDirectionInput is used for create CommunityDirection object.
Input was generated by ent.
"""
input CreateCommunityDirectionInput {
  direction: String!
  eventTargetAudienceIDs: [ID!]
  expertProfileIDs: [ID!]
  expertProfileRequestAsNewIDs: [ID!]
  expertProfileRequestAsOldIDs: [ID!]
  name: String!
  targetNotificationIDs: [ID!]
}

input CreateEventRequestInput {
  event: EventInput!
  representativeForUser: ID
  type: EventType!
}

input CreateEventResponseInput {
  eventID: ID!
  expertID: ID!
}

input CreateExpertInput {
  about: String!
  communityDirections: [ID!]!
  firstName: String!
  lastName: String!
  referUsername: String
  region: ID!
  simpleSpeechLink: String!
  socialMediaLink: String!
}

"""
CreateExpertProfileRequestInput is used for create ExpertProfileRequest object.
Input was generated by ent.
"""
input CreateExpertProfileRequestInput {
  newAbout: String
  newCommunityDirectionIDs: [ID!]
  newFirstName: String
  newLastName: String
  newReferUsername: String
  newRegalia: String
  newRegionID: ID
  newSimpleSpeechLink: String
  newSocialMediaLink: String
  oldAbout: String
  oldCommunityDirectionIDs: [ID!]
  oldFirstName: String
  oldLastName: String
  oldReferUsername: String
  oldRegalia: String
  oldRegionID: ID
  oldSimpleSpeechLink: String
  oldSocialMediaLink: String
  requestID: ID!
}

input CreateInviteToOrganizatorEvent {
  create: CreateChildOrganizatorEventInput!
  eventID: ID!
  expertID: ID!
}

"""
CreateNotificationActionInput is used for create NotificationAction object.
Input was generated by ent.
"""
input CreateNotificationActionInput {
  label: String!
  notificationID: ID!
  payload: Map
  type: NotificationActionType!
  variant: NotificationActionVariant!
}

"""
CreateNotificationInput is used for create Notification object.
Input was generated by ent.
"""
input CreateNotificationInput {
  actionIDs: [ID!]
  directionTargetIDs: [ID!]
  expertAuditoryIDs: [ID!]
  expiresAt: Time
  isGlobal: Boolean
  level: NotificationLevel
  message: String!
  regionTargetIDs: [ID!]
  tags: [String!]
  targetRights: Int
  title: String!
}

"""
CreateOrganizatorInput is used for create Organizator object.
Input was generated by ent.
"""
input CreateOrganizatorInput {
  organizationName: String!
  organizationURL: String
}

input CreatePaymentLinkEvent {
  email: String!
  id: ID!
  returnURL: String!
}

input CreatePreExpertInput {
  targetExpertID: ID!
}

"""
CreateProfileRequestInput is used for create ProfileRequest object.
Input was generated by ent.
"""
input CreateProfileRequestInput {
  changeType: ProfileRequestChangeType!
  creatorID: ID!
  expertRequestID: ID
  organizatorRequestID: ID
  type: ProfileRequestType!
  verifiedAdminID: ID
}

"""
CreatePromocodeInput is used for create Promocode object.
Input was generated by ent.
"""
input CreatePromocodeInput {
  active: Boolean
  code: String!
  deletedAt: Time
  discount: Int!
  endAt: Time!
  maxCountActivations: Int!
  maxMouthSubscriptionDuration: Int
  maxUserCountActivations: Int
  startAt: Time!
  tariffIDs: [ID!]
  usesUserIDs: [ID!]
}

"""
CreateRepresentativeExpertRequestInput is used for create RepresentativeExpertRequest object.
Input was generated by ent.
"""
input CreateRepresentativeExpertRequestInput {
  representativeUserID: ID!
  targetUserID: ID!
  type: RepresentativeExpertRequestType!
}

"""
CreateTariffSubscriptionInput is used for create TariffSubscription object.
Input was generated by ent.
"""
input CreateTariffSubscriptionInput {
  endAt: Time
  paymentMouthSum: Float
  startAt: Time
  tariffID: ID!
  userID: ID!
}

"""
CreateTariffSubscriptionLogInput is used for create TariffSubscriptionLog object.
Input was generated by ent.
"""
input CreateTariffSubscriptionLogInput {
  endAt: Time
  paymentMouthSum: Float
  startAt: Time
  tariffID: ID!
  userID: ID!
}

"""
CreateUserBlockInput is used for create UserBlock object.
Input was generated by ent.
"""
input CreateUserBlockInput {
  createdAt: Time
  enabled: Boolean!
  reason: String!
  userID: ID!
}

"""
CreateUserNotificationInput is used for create UserNotification object.
Input was generated by ent.
"""
input CreateUserNotificationInput {
  readAt: Time
}

"""
CreateVerifyExpertRequestInput is used for create VerifyExpertRequest object.
Input was generated by ent.
"""
input CreateVerifyExpertRequestInput {
  creatorID: ID!
  expiresAt: Time!
  status: VerifyExpertRequestStatus
  voteIDs: [ID!]
}

input CreateVoteInput {
  eventID: ID
  feedback: String!
  isLike: Boolean
  targetExpertID: ID
  targetOrganizatorID: ID
  typeRating: VoteTypeRating!
  userID: ID
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

input DeleteVote {
  id: ID!
  reason: String!
}

input DeleteVoteInput {
  eventID: ID
  feedback: String!
  targetExpertID: ID
  targetOrganizatorID: ID
  typeRating: VoteTypeRating!
  userID: ID
}

type Event implements Node {
  children: [Event!]
  createdAt: Time!
  creator: User!
  deleteAtLimitVotes: Time
  deletedAt: Time
  description: String!
  duration: Int!
  endTime: Time!
  eventRequest: EventRequest
  expertEvent: ExpertEvent
  expertResponses: [ExpertResponseToEvent!]
  id: ID!
  myExpertVote: VoteType!
  organizatorEvent: OrganizatorEvent
  parent: Event
  promoWords: [EventPromoWord!]
  promoWorld: String
  representativeUser: User
  startTime: Time!
  status: EventStatus!
  title: String!
  type: EventType!
  updatedAt: Time!
  votes: [Vote!]
}

"""A connection to a list of items."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Event
}

input EventExpertInput {
  commentToListener: String
  link: String
  promoWord: String
}

input EventInput {
  description: String!
  duration: Int!
  expert: EventExpertInput
  organizator: EventOrganizatorInput
  startAt: Time!
  title: String!
}

"""Ordering options for Event connections"""
input EventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Events."""
  field: EventOrderField!
}

"""Properties by which Event connections can be ordered."""
enum EventOrderField {
  CREATED_AT
  START_TIME
  UPDATED_AT
}

input EventOrganizatorInput {
  feeType: OrganizatorEventFeeType!
  place: String
  speakerBenefits: String!
  targetAudience: [ID!]
  topic: String!
  transferPaid: Boolean!
  verificationMode: OrganizatorEventVerificationMode!
}

type EventPromoWord implements Node {
  createdAt: Time!
  event: Event!
  expert: User!
  id: ID!
  promoWorld: String!
  updatedAt: Time!
}

"""A connection to a list of items."""
type EventPromoWordConnection {
  """A list of edges."""
  edges: [EventPromoWordEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EventPromoWordEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: EventPromoWord
}

"""Ordering options for EventPromoWord connections"""
input EventPromoWordOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order EventPromoWords."""
  field: EventPromoWordOrderField!
}

"""Properties by which EventPromoWord connections can be ordered."""
enum EventPromoWordOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
EventPromoWordWhereInput is used for filtering EventPromoWord objects.
Input was generated by ent.
"""
input EventPromoWordWhereInput {
  and: [EventPromoWordWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [EventWhereInput!]
  """expert edge predicates"""
  hasExpert: Boolean
  hasExpertWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EventPromoWordWhereInput
  or: [EventPromoWordWhereInput!]
  """promo_world field predicates"""
  promoWorld: String
  promoWorldContains: String
  promoWorldContainsFold: String
  promoWorldEqualFold: String
  promoWorldGT: String
  promoWorldGTE: String
  promoWorldHasPrefix: String
  promoWorldHasSuffix: String
  promoWorldIn: [String!]
  promoWorldLT: String
  promoWorldLTE: String
  promoWorldNEQ: String
  promoWorldNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type EventRequest implements Node {
  createdAt: Time!
  creator: User!
  event: Event!
  id: ID!
  notification: Notification
  rejectComment: String
  status: EventRequestStatus!
  updatedAt: Time!
  verifiedAt: Time
  verifiedUser: [User!]
}

"""A connection to a list of items."""
type EventRequestConnection {
  """A list of edges."""
  edges: [EventRequestEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EventRequestEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: EventRequest
}

"""Ordering options for EventRequest connections"""
input EventRequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order EventRequests."""
  field: EventRequestOrderField!
}

"""Properties by which EventRequest connections can be ordered."""
enum EventRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

"""EventRequestStatus is enum for the field status"""
enum EventRequestStatus {
  approved
  pending
  rejected
  wait_pay
}

"""
EventRequestWhereInput is used for filtering EventRequest objects.
Input was generated by ent.
"""
input EventRequestWhereInput {
  and: [EventRequestWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [EventWhereInput!]
  """notification edge predicates"""
  hasNotification: Boolean
  hasNotificationWith: [NotificationWhereInput!]
  """verified_user edge predicates"""
  hasVerifiedUser: Boolean
  hasVerifiedUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EventRequestWhereInput
  or: [EventRequestWhereInput!]
  """reject_comment field predicates"""
  rejectComment: String
  rejectCommentContains: String
  rejectCommentContainsFold: String
  rejectCommentEqualFold: String
  rejectCommentGT: String
  rejectCommentGTE: String
  rejectCommentHasPrefix: String
  rejectCommentHasSuffix: String
  rejectCommentIn: [String!]
  rejectCommentIsNil: Boolean
  rejectCommentLT: String
  rejectCommentLTE: String
  rejectCommentNEQ: String
  rejectCommentNotIn: [String!]
  rejectCommentNotNil: Boolean
  """status field predicates"""
  status: EventRequestStatus
  statusIn: [EventRequestStatus!]
  statusNEQ: EventRequestStatus
  statusNotIn: [EventRequestStatus!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  """verified_at field predicates"""
  verifiedAt: Time
  verifiedAtGT: Time
  verifiedAtGTE: Time
  verifiedAtIn: [Time!]
  verifiedAtIsNil: Boolean
  verifiedAtLT: Time
  verifiedAtLTE: Time
  verifiedAtNEQ: Time
  verifiedAtNotIn: [Time!]
  verifiedAtNotNil: Boolean
}

"""EventStatus is enum for the field status"""
enum EventStatus {
  accepted
  pending
  rejected
}

"""EventType is enum for the field type"""
enum EventType {
  children
  expert
  organizer
}

"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  and: [EventWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """delete_at_limit_votes field predicates"""
  deleteAtLimitVotes: Time
  deleteAtLimitVotesGT: Time
  deleteAtLimitVotesGTE: Time
  deleteAtLimitVotesIn: [Time!]
  deleteAtLimitVotesIsNil: Boolean
  deleteAtLimitVotesLT: Time
  deleteAtLimitVotesLTE: Time
  deleteAtLimitVotesNEQ: Time
  deleteAtLimitVotesNotIn: [Time!]
  deleteAtLimitVotesNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  """duration field predicates"""
  duration: Int
  durationGT: Int
  durationGTE: Int
  durationIn: [Int!]
  durationLT: Int
  durationLTE: Int
  durationNEQ: Int
  durationNotIn: [Int!]
  """end_time field predicates"""
  endTime: Time
  endTimeGT: Time
  endTimeGTE: Time
  endTimeIn: [Time!]
  endTimeLT: Time
  endTimeLTE: Time
  endTimeNEQ: Time
  endTimeNotIn: [Time!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [EventWhereInput!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """event_request edge predicates"""
  hasEventRequest: Boolean
  hasEventRequestWith: [EventRequestWhereInput!]
  """expert_event edge predicates"""
  hasExpertEvent: Boolean
  hasExpertEventWith: [ExpertEventWhereInput!]
  """expert_responses edge predicates"""
  hasExpertResponses: Boolean
  hasExpertResponsesWith: [ExpertResponseToEventWhereInput!]
  """organizator_event edge predicates"""
  hasOrganizatorEvent: Boolean
  hasOrganizatorEventWith: [OrganizatorEventWhereInput!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [EventWhereInput!]
  """promo_words edge predicates"""
  hasPromoWords: Boolean
  hasPromoWordsWith: [EventPromoWordWhereInput!]
  """representative_user edge predicates"""
  hasRepresentativeUser: Boolean
  hasRepresentativeUserWith: [UserWhereInput!]
  """votes edge predicates"""
  hasVotes: Boolean
  hasVotesWith: [VoteWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EventWhereInput
  or: [EventWhereInput!]
  """promo_world field predicates"""
  promoWorld: String
  promoWorldContains: String
  promoWorldContainsFold: String
  promoWorldEqualFold: String
  promoWorldGT: String
  promoWorldGTE: String
  promoWorldHasPrefix: String
  promoWorldHasSuffix: String
  promoWorldIn: [String!]
  promoWorldIsNil: Boolean
  promoWorldLT: String
  promoWorldLTE: String
  promoWorldNEQ: String
  promoWorldNotIn: [String!]
  promoWorldNotNil: Boolean
  """start_time field predicates"""
  startTime: Time
  startTimeGT: Time
  startTimeGTE: Time
  startTimeIn: [Time!]
  startTimeLT: Time
  startTimeLTE: Time
  startTimeNEQ: Time
  startTimeNotIn: [Time!]
  """status field predicates"""
  status: EventStatus
  statusIn: [EventStatus!]
  statusNEQ: EventStatus
  statusNotIn: [EventStatus!]
  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]
  """type field predicates"""
  type: EventType
  typeIn: [EventType!]
  typeNEQ: EventType
  typeNotIn: [EventType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type ExpertEvent implements Node {
  commentToListener: String
  deletedAt: Time
  event: Event!
  id: ID!
  link: String
  promoWord: String
}

"""
ExpertEventWhereInput is used for filtering ExpertEvent objects.
Input was generated by ent.
"""
input ExpertEventWhereInput {
  and: [ExpertEventWhereInput!]
  """comment_to_listener field predicates"""
  commentToListener: String
  commentToListenerContains: String
  commentToListenerContainsFold: String
  commentToListenerEqualFold: String
  commentToListenerGT: String
  commentToListenerGTE: String
  commentToListenerHasPrefix: String
  commentToListenerHasSuffix: String
  commentToListenerIn: [String!]
  commentToListenerIsNil: Boolean
  commentToListenerLT: String
  commentToListenerLTE: String
  commentToListenerNEQ: String
  commentToListenerNotIn: [String!]
  commentToListenerNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [EventWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """link field predicates"""
  link: String
  linkContains: String
  linkContainsFold: String
  linkEqualFold: String
  linkGT: String
  linkGTE: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkIn: [String!]
  linkIsNil: Boolean
  linkLT: String
  linkLTE: String
  linkNEQ: String
  linkNotIn: [String!]
  linkNotNil: Boolean
  not: ExpertEventWhereInput
  or: [ExpertEventWhereInput!]
  """promo_word field predicates"""
  promoWord: String
  promoWordContains: String
  promoWordContainsFold: String
  promoWordEqualFold: String
  promoWordGT: String
  promoWordGTE: String
  promoWordHasPrefix: String
  promoWordHasSuffix: String
  promoWordIn: [String!]
  promoWordIsNil: Boolean
  promoWordLT: String
  promoWordLTE: String
  promoWordNEQ: String
  promoWordNotIn: [String!]
  promoWordNotNil: Boolean
}

type ExpertProfile implements Node {
  about: String
  avatar: String
  communityDirections: [CommunityDirection!]
  countEvents: Int!
  createdAt: Time!
  deletedAt: Time
  events: [Event!]
  expertProfileRequests: [ExpertProfileRequest!]
  firstName: String!
  id: ID!
  lastName: String!
  myExpertVote: VoteType!
  myPeopleVote: VoteType!
  negativePeopleVotes: Int!
  negativeVotes: Int!
  negative_people_votes: Int!
  negative_votes: Int!
  peopleRatingEnabled: Boolean!
  peopleVotesCount: Int!
  positivePeopleVotes: Int!
  positiveVotes: Int!
  positive_people_votes: Int!
  positive_votes: Int!
  referUsername: String
  region: Region!
  simpleSpeechLink: String
  socialMediaLink: String
  updatedAt: Time!
  user: User!
  verifiedAt: Time
  verifyExpertRequests: [VerifyExpertRequest!]
  verifyExpertsVotes: [VoteVerifyExpert!]
  votes: [Vote!]
  votesCount: Int!
}

"""A connection to a list of items."""
type ExpertProfileConnection {
  """A list of edges."""
  edges: [ExpertProfileEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExpertProfileEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: ExpertProfile
}

"""Ordering options for ExpertProfile connections"""
input ExpertProfileOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ExpertProfiles."""
  field: ExpertProfileOrderField!
}

"""Properties by which ExpertProfile connections can be ordered."""
enum ExpertProfileOrderField {
  CREATED_AT
  UPDATED_AT
}

type ExpertProfileRequest implements Node {
  createdAt: Time!
  deletedAt: Time
  id: ID!
  newAbout: String
  newCommunityDirections: [CommunityDirection!]
  newFirstName: String
  newLastName: String
  newReferUsername: String
  newRegalia: String
  newRegion: Region
  newSimpleSpeechLink: String
  newSocialMediaLink: String
  oldAbout: String
  oldCommunityDirections: [CommunityDirection!]
  oldFirstName: String
  oldLastName: String
  oldReferUsername: String
  oldRegalia: String
  oldRegion: Region
  oldSimpleSpeechLink: String
  oldSocialMediaLink: String
  request: ProfileRequest!
  updatedAt: Time!
}

"""Ordering options for ExpertProfileRequest connections"""
input ExpertProfileRequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ExpertProfileRequests."""
  field: ExpertProfileRequestOrderField!
}

"""Properties by which ExpertProfileRequest connections can be ordered."""
enum ExpertProfileRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
ExpertProfileRequestWhereInput is used for filtering ExpertProfileRequest objects.
Input was generated by ent.
"""
input ExpertProfileRequestWhereInput {
  and: [ExpertProfileRequestWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """new_community_directions edge predicates"""
  hasNewCommunityDirections: Boolean
  hasNewCommunityDirectionsWith: [CommunityDirectionWhereInput!]
  """new_region edge predicates"""
  hasNewRegion: Boolean
  hasNewRegionWith: [RegionWhereInput!]
  """old_community_directions edge predicates"""
  hasOldCommunityDirections: Boolean
  hasOldCommunityDirectionsWith: [CommunityDirectionWhereInput!]
  """old_region edge predicates"""
  hasOldRegion: Boolean
  hasOldRegionWith: [RegionWhereInput!]
  """request edge predicates"""
  hasRequest: Boolean
  hasRequestWith: [ProfileRequestWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """new_about field predicates"""
  newAbout: String
  newAboutContains: String
  newAboutContainsFold: String
  newAboutEqualFold: String
  newAboutGT: String
  newAboutGTE: String
  newAboutHasPrefix: String
  newAboutHasSuffix: String
  newAboutIn: [String!]
  newAboutIsNil: Boolean
  newAboutLT: String
  newAboutLTE: String
  newAboutNEQ: String
  newAboutNotIn: [String!]
  newAboutNotNil: Boolean
  """new_first_name field predicates"""
  newFirstName: String
  newFirstNameContains: String
  newFirstNameContainsFold: String
  newFirstNameEqualFold: String
  newFirstNameGT: String
  newFirstNameGTE: String
  newFirstNameHasPrefix: String
  newFirstNameHasSuffix: String
  newFirstNameIn: [String!]
  newFirstNameIsNil: Boolean
  newFirstNameLT: String
  newFirstNameLTE: String
  newFirstNameNEQ: String
  newFirstNameNotIn: [String!]
  newFirstNameNotNil: Boolean
  """new_last_name field predicates"""
  newLastName: String
  newLastNameContains: String
  newLastNameContainsFold: String
  newLastNameEqualFold: String
  newLastNameGT: String
  newLastNameGTE: String
  newLastNameHasPrefix: String
  newLastNameHasSuffix: String
  newLastNameIn: [String!]
  newLastNameIsNil: Boolean
  newLastNameLT: String
  newLastNameLTE: String
  newLastNameNEQ: String
  newLastNameNotIn: [String!]
  newLastNameNotNil: Boolean
  """new_refer_username field predicates"""
  newReferUsername: String
  newReferUsernameContains: String
  newReferUsernameContainsFold: String
  newReferUsernameEqualFold: String
  newReferUsernameGT: String
  newReferUsernameGTE: String
  newReferUsernameHasPrefix: String
  newReferUsernameHasSuffix: String
  newReferUsernameIn: [String!]
  newReferUsernameIsNil: Boolean
  newReferUsernameLT: String
  newReferUsernameLTE: String
  newReferUsernameNEQ: String
  newReferUsernameNotIn: [String!]
  newReferUsernameNotNil: Boolean
  """new_regalia field predicates"""
  newRegalia: String
  newRegaliaContains: String
  newRegaliaContainsFold: String
  newRegaliaEqualFold: String
  newRegaliaGT: String
  newRegaliaGTE: String
  newRegaliaHasPrefix: String
  newRegaliaHasSuffix: String
  newRegaliaIn: [String!]
  newRegaliaIsNil: Boolean
  newRegaliaLT: String
  newRegaliaLTE: String
  newRegaliaNEQ: String
  newRegaliaNotIn: [String!]
  newRegaliaNotNil: Boolean
  """new_simple_speech_link field predicates"""
  newSimpleSpeechLink: String
  newSimpleSpeechLinkContains: String
  newSimpleSpeechLinkContainsFold: String
  newSimpleSpeechLinkEqualFold: String
  newSimpleSpeechLinkGT: String
  newSimpleSpeechLinkGTE: String
  newSimpleSpeechLinkHasPrefix: String
  newSimpleSpeechLinkHasSuffix: String
  newSimpleSpeechLinkIn: [String!]
  newSimpleSpeechLinkIsNil: Boolean
  newSimpleSpeechLinkLT: String
  newSimpleSpeechLinkLTE: String
  newSimpleSpeechLinkNEQ: String
  newSimpleSpeechLinkNotIn: [String!]
  newSimpleSpeechLinkNotNil: Boolean
  """new_social_media_link field predicates"""
  newSocialMediaLink: String
  newSocialMediaLinkContains: String
  newSocialMediaLinkContainsFold: String
  newSocialMediaLinkEqualFold: String
  newSocialMediaLinkGT: String
  newSocialMediaLinkGTE: String
  newSocialMediaLinkHasPrefix: String
  newSocialMediaLinkHasSuffix: String
  newSocialMediaLinkIn: [String!]
  newSocialMediaLinkIsNil: Boolean
  newSocialMediaLinkLT: String
  newSocialMediaLinkLTE: String
  newSocialMediaLinkNEQ: String
  newSocialMediaLinkNotIn: [String!]
  newSocialMediaLinkNotNil: Boolean
  not: ExpertProfileRequestWhereInput
  """old_about field predicates"""
  oldAbout: String
  oldAboutContains: String
  oldAboutContainsFold: String
  oldAboutEqualFold: String
  oldAboutGT: String
  oldAboutGTE: String
  oldAboutHasPrefix: String
  oldAboutHasSuffix: String
  oldAboutIn: [String!]
  oldAboutIsNil: Boolean
  oldAboutLT: String
  oldAboutLTE: String
  oldAboutNEQ: String
  oldAboutNotIn: [String!]
  oldAboutNotNil: Boolean
  """old_first_name field predicates"""
  oldFirstName: String
  oldFirstNameContains: String
  oldFirstNameContainsFold: String
  oldFirstNameEqualFold: String
  oldFirstNameGT: String
  oldFirstNameGTE: String
  oldFirstNameHasPrefix: String
  oldFirstNameHasSuffix: String
  oldFirstNameIn: [String!]
  oldFirstNameIsNil: Boolean
  oldFirstNameLT: String
  oldFirstNameLTE: String
  oldFirstNameNEQ: String
  oldFirstNameNotIn: [String!]
  oldFirstNameNotNil: Boolean
  """old_last_name field predicates"""
  oldLastName: String
  oldLastNameContains: String
  oldLastNameContainsFold: String
  oldLastNameEqualFold: String
  oldLastNameGT: String
  oldLastNameGTE: String
  oldLastNameHasPrefix: String
  oldLastNameHasSuffix: String
  oldLastNameIn: [String!]
  oldLastNameIsNil: Boolean
  oldLastNameLT: String
  oldLastNameLTE: String
  oldLastNameNEQ: String
  oldLastNameNotIn: [String!]
  oldLastNameNotNil: Boolean
  """old_refer_username field predicates"""
  oldReferUsername: String
  oldReferUsernameContains: String
  oldReferUsernameContainsFold: String
  oldReferUsernameEqualFold: String
  oldReferUsernameGT: String
  oldReferUsernameGTE: String
  oldReferUsernameHasPrefix: String
  oldReferUsernameHasSuffix: String
  oldReferUsernameIn: [String!]
  oldReferUsernameIsNil: Boolean
  oldReferUsernameLT: String
  oldReferUsernameLTE: String
  oldReferUsernameNEQ: String
  oldReferUsernameNotIn: [String!]
  oldReferUsernameNotNil: Boolean
  """old_regalia field predicates"""
  oldRegalia: String
  oldRegaliaContains: String
  oldRegaliaContainsFold: String
  oldRegaliaEqualFold: String
  oldRegaliaGT: String
  oldRegaliaGTE: String
  oldRegaliaHasPrefix: String
  oldRegaliaHasSuffix: String
  oldRegaliaIn: [String!]
  oldRegaliaIsNil: Boolean
  oldRegaliaLT: String
  oldRegaliaLTE: String
  oldRegaliaNEQ: String
  oldRegaliaNotIn: [String!]
  oldRegaliaNotNil: Boolean
  """old_simple_speech_link field predicates"""
  oldSimpleSpeechLink: String
  oldSimpleSpeechLinkContains: String
  oldSimpleSpeechLinkContainsFold: String
  oldSimpleSpeechLinkEqualFold: String
  oldSimpleSpeechLinkGT: String
  oldSimpleSpeechLinkGTE: String
  oldSimpleSpeechLinkHasPrefix: String
  oldSimpleSpeechLinkHasSuffix: String
  oldSimpleSpeechLinkIn: [String!]
  oldSimpleSpeechLinkIsNil: Boolean
  oldSimpleSpeechLinkLT: String
  oldSimpleSpeechLinkLTE: String
  oldSimpleSpeechLinkNEQ: String
  oldSimpleSpeechLinkNotIn: [String!]
  oldSimpleSpeechLinkNotNil: Boolean
  """old_social_media_link field predicates"""
  oldSocialMediaLink: String
  oldSocialMediaLinkContains: String
  oldSocialMediaLinkContainsFold: String
  oldSocialMediaLinkEqualFold: String
  oldSocialMediaLinkGT: String
  oldSocialMediaLinkGTE: String
  oldSocialMediaLinkHasPrefix: String
  oldSocialMediaLinkHasSuffix: String
  oldSocialMediaLinkIn: [String!]
  oldSocialMediaLinkIsNil: Boolean
  oldSocialMediaLinkLT: String
  oldSocialMediaLinkLTE: String
  oldSocialMediaLinkNEQ: String
  oldSocialMediaLinkNotIn: [String!]
  oldSocialMediaLinkNotNil: Boolean
  or: [ExpertProfileRequestWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
ExpertProfileWhereInput is used for filtering ExpertProfile objects.
Input was generated by ent.
"""
input ExpertProfileWhereInput {
  """about field predicates"""
  about: String
  aboutContains: String
  aboutContainsFold: String
  aboutEqualFold: String
  aboutGT: String
  aboutGTE: String
  aboutHasPrefix: String
  aboutHasSuffix: String
  aboutIn: [String!]
  aboutIsNil: Boolean
  aboutLT: String
  aboutLTE: String
  aboutNEQ: String
  aboutNotIn: [String!]
  aboutNotNil: Boolean
  and: [ExpertProfileWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """community_directions edge predicates"""
  hasCommunityDirections: Boolean
  hasCommunityDirectionsWith: [CommunityDirectionWhereInput!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """expert_profile_requests edge predicates"""
  hasExpertProfileRequests: Boolean
  hasExpertProfileRequestsWith: [ExpertProfileRequestWhereInput!]
  """region edge predicates"""
  hasRegion: Boolean
  hasRegionWith: [RegionWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """verify_expert_requests edge predicates"""
  hasVerifyExpertRequests: Boolean
  hasVerifyExpertRequestsWith: [VerifyExpertRequestWhereInput!]
  """verify_experts_votes edge predicates"""
  hasVerifyExpertsVotes: Boolean
  hasVerifyExpertsVotesWith: [VoteVerifyExpertWhereInput!]
  """votes edge predicates"""
  hasVotes: Boolean
  hasVotesWith: [VoteWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """negative_people_votes field predicates"""
  negativePeopleVotes: Int
  negativePeopleVotesGT: Int
  negativePeopleVotesGTE: Int
  negativePeopleVotesIn: [Int!]
  negativePeopleVotesLT: Int
  negativePeopleVotesLTE: Int
  negativePeopleVotesNEQ: Int
  negativePeopleVotesNotIn: [Int!]
  """negative_votes field predicates"""
  negativeVotes: Int
  negativeVotesGT: Int
  negativeVotesGTE: Int
  negativeVotesIn: [Int!]
  negativeVotesLT: Int
  negativeVotesLTE: Int
  negativeVotesNEQ: Int
  negativeVotesNotIn: [Int!]
  not: ExpertProfileWhereInput
  or: [ExpertProfileWhereInput!]
  """people_rating_enabled field predicates"""
  peopleRatingEnabled: Boolean
  peopleRatingEnabledNEQ: Boolean
  """positive_people_votes field predicates"""
  positivePeopleVotes: Int
  positivePeopleVotesGT: Int
  positivePeopleVotesGTE: Int
  positivePeopleVotesIn: [Int!]
  positivePeopleVotesLT: Int
  positivePeopleVotesLTE: Int
  positivePeopleVotesNEQ: Int
  positivePeopleVotesNotIn: [Int!]
  """positive_votes field predicates"""
  positiveVotes: Int
  positiveVotesGT: Int
  positiveVotesGTE: Int
  positiveVotesIn: [Int!]
  positiveVotesLT: Int
  positiveVotesLTE: Int
  positiveVotesNEQ: Int
  positiveVotesNotIn: [Int!]
  """refer_username field predicates"""
  referUsername: String
  referUsernameContains: String
  referUsernameContainsFold: String
  referUsernameEqualFold: String
  referUsernameGT: String
  referUsernameGTE: String
  referUsernameHasPrefix: String
  referUsernameHasSuffix: String
  referUsernameIn: [String!]
  referUsernameIsNil: Boolean
  referUsernameLT: String
  referUsernameLTE: String
  referUsernameNEQ: String
  referUsernameNotIn: [String!]
  referUsernameNotNil: Boolean
  """simple_speech_link field predicates"""
  simpleSpeechLink: String
  simpleSpeechLinkContains: String
  simpleSpeechLinkContainsFold: String
  simpleSpeechLinkEqualFold: String
  simpleSpeechLinkGT: String
  simpleSpeechLinkGTE: String
  simpleSpeechLinkHasPrefix: String
  simpleSpeechLinkHasSuffix: String
  simpleSpeechLinkIn: [String!]
  simpleSpeechLinkIsNil: Boolean
  simpleSpeechLinkLT: String
  simpleSpeechLinkLTE: String
  simpleSpeechLinkNEQ: String
  simpleSpeechLinkNotIn: [String!]
  simpleSpeechLinkNotNil: Boolean
  """social_media_link field predicates"""
  socialMediaLink: String
  socialMediaLinkContains: String
  socialMediaLinkContainsFold: String
  socialMediaLinkEqualFold: String
  socialMediaLinkGT: String
  socialMediaLinkGTE: String
  socialMediaLinkHasPrefix: String
  socialMediaLinkHasSuffix: String
  socialMediaLinkIn: [String!]
  socialMediaLinkIsNil: Boolean
  socialMediaLinkLT: String
  socialMediaLinkLTE: String
  socialMediaLinkNEQ: String
  socialMediaLinkNotIn: [String!]
  socialMediaLinkNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  """verified_at field predicates"""
  verifiedAt: Time
  verifiedAtGT: Time
  verifiedAtGTE: Time
  verifiedAtIn: [Time!]
  verifiedAtIsNil: Boolean
  verifiedAtLT: Time
  verifiedAtLTE: Time
  verifiedAtNEQ: Time
  verifiedAtNotIn: [Time!]
  verifiedAtNotNil: Boolean
}

type ExpertResponseToEvent implements Node {
  childEvent: Event
  createdAt: Time!
  event: Event!
  expressAt: Time!
  id: ID!
  status: ExpertResponseToEventStatus!
  target: User!
  type: ExpertResponseToEventType!
  updatedAt: Time!
  user: User!
}

"""A connection to a list of items."""
type ExpertResponseToEventConnection {
  """A list of edges."""
  edges: [ExpertResponseToEventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExpertResponseToEventEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: ExpertResponseToEvent
}

"""Ordering options for ExpertResponseToEvent connections"""
input ExpertResponseToEventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ExpertResponseToEvents."""
  field: ExpertResponseToEventOrderField!
}

"""Properties by which ExpertResponseToEvent connections can be ordered."""
enum ExpertResponseToEventOrderField {
  CREATED_AT
  UPDATED_AT
}

"""ExpertResponseToEventStatus is enum for the field status"""
enum ExpertResponseToEventStatus {
  accepted
  pending
  rejected
}

"""ExpertResponseToEventType is enum for the field type"""
enum ExpertResponseToEventType {
  invitation
  request
}

"""
ExpertResponseToEventWhereInput is used for filtering ExpertResponseToEvent objects.
Input was generated by ent.
"""
input ExpertResponseToEventWhereInput {
  and: [ExpertResponseToEventWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """express_at field predicates"""
  expressAt: Time
  expressAtGT: Time
  expressAtGTE: Time
  expressAtIn: [Time!]
  expressAtLT: Time
  expressAtLTE: Time
  expressAtNEQ: Time
  expressAtNotIn: [Time!]
  """child_event edge predicates"""
  hasChildEvent: Boolean
  hasChildEventWith: [EventWhereInput!]
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [EventWhereInput!]
  """target edge predicates"""
  hasTarget: Boolean
  hasTargetWith: [UserWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: ExpertResponseToEventWhereInput
  or: [ExpertResponseToEventWhereInput!]
  """status field predicates"""
  status: ExpertResponseToEventStatus
  statusIn: [ExpertResponseToEventStatus!]
  statusNEQ: ExpertResponseToEventStatus
  statusNotIn: [ExpertResponseToEventStatus!]
  """type field predicates"""
  type: ExpertResponseToEventType
  typeIn: [ExpertResponseToEventType!]
  typeNEQ: ExpertResponseToEventType
  typeNotIn: [ExpertResponseToEventType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

scalar Int64

"""The builtin Map type"""
scalar Map

type Mutation {
  acceptEvent(eventId: ID!, withPayment: Boolean): Boolean!
  acceptInviteOrganizatorEvent(requestID: ID!): Boolean
  acceptPlatformRights(data: acceptPlatformRightsInput!): Boolean!
  acceptProfileRequest(requestId: ID!): ProfileRequest!
  acceptRepresentativeExpertRequest(requestId: ID!): Boolean!
  acceptRepresentativeRequest(requestID: ID!): Boolean
  acceptResponOrganizatorEvent(data: CreateChildOrganizatorEventInput!, responceID: ID!): Event!
  assignAdminRights(userID: ID!): User!
  assignTariff(data: AssignTariffInput!): Boolean
  blockUser(input: CreateUserBlockInput!): Boolean!
  createChildrenEvent(data: createChildrenEventInput): Event!
  createEventRequest(event: CreateEventRequestInput!): EventRequest!
  createInviteToOrganizatorEvent(data: CreateInviteToOrganizatorEvent!): ExpertResponseToEvent!
  createNotification(data: CreateNotificationInput!): ID
  createPaidLinkEvent(data: CreatePaymentLinkEvent!): String!
  createProfileRequest(input: ProfileCreateInput!): ProfileRequest!
  createPromocode(data: CreatePromocodeInput!): Promocode!
  createRepresentativeExpertRequest(expertID: ID!): PreExpertRequest!
  createRepresentativeRequest(data: CreateRepresentativeExpertRequestInput!): ID
  createVerifyExpertRequest: VerifyExpertRequest!
  createVote(data: CreateVoteInput!): Vote!
  deleteEventRequest(requestID: ID!): Boolean
  deleteMyProfileExpert: Boolean
  deleteMyProfileOrganizator: Boolean
  deleteMyProfileUser: Boolean
  deleteVerification(userID: ID!): Boolean
  deleteVote(id: DeleteVoteInput!): Boolean
  platformRightsTextWrite(text: String!): Boolean!
  readAllNotifications: Boolean
  readNotification(id: [ID!]): Boolean
  rejectEvent(eventId: ID!, reason: String!): Boolean!
  rejectInviteOrganizatorEvent(requestID: ID!): Boolean
  rejectProfileRequest(reason: String!, requestId: ID!): Boolean
  rejectRepresentativeExpertRequest(requestId: ID!): Boolean!
  rejectRepresentativeRequest(requestID: ID!): Boolean
  rejectRespondOrganizatorEvent(responceID: ID!): ExpertResponseToEvent!
  removeAdminRights(userID: ID!): User!
  respondToOrganizatorEvent(eventID: ID!): ExpertResponseToEvent!
  setSettings(data: SettingsValuesInput!): SettingsValues!
  submitTariff(data: SubmitTariffInput!): SubmitTariffResponse!
  unblockUser(userId: ID!): Boolean!
  updateTariff(data: UpdateTariffInput!, id: ID!): Tariff!
  validateEventRequest(eventID: CreateEventRequestInput!): Boolean!
  verifiesUser(userID: ID!): Boolean
  voteVerifyExpert(vote: VoteVerifyExpertInput!): VoteVerifyExpert!
}

type NewNotification {
  actions: [NewNotificationAction!]
  id: ID
  level: NotificationLevel
  message: String!
  title: String!
}

type NewNotificationAction {
  label: String!
  payload: Map
  type: NotificationActionType!
  variant: NotificationActionVariant!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  actions: [NotificationAction!]
  author: User
  createdAt: Time!
  directionTargets: [CommunityDirection!]
  eventRequest: EventRequest
  expertAuditory: [User!]
  expiresAt: Time
  id: ID!
  isGlobal: Boolean!
  level: NotificationLevel!
  message: String!
  regionTargets: [Region!]
  tags: [String!]
  targetRights: Int
  title: String!
  updatedAt: Time!
  userNotification: [UserNotification!]
}

type NotificationAction implements Node {
  createdAt: Time!
  id: ID!
  label: String!
  notification: Notification!
  payload: Map
  type: NotificationActionType!
  updatedAt: Time!
  variant: NotificationActionVariant!
}

"""A connection to a list of items."""
type NotificationActionConnection {
  """A list of edges."""
  edges: [NotificationActionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type NotificationActionEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: NotificationAction
}

"""Ordering options for NotificationAction connections"""
input NotificationActionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order NotificationActions."""
  field: NotificationActionOrderField!
}

"""Properties by which NotificationAction connections can be ordered."""
enum NotificationActionOrderField {
  CREATED_AT
  UPDATED_AT
}

"""NotificationActionType is enum for the field type"""
enum NotificationActionType {
  API_CALL
  DISMISS
  NAVIGATE
}

"""NotificationActionVariant is enum for the field variant"""
enum NotificationActionVariant {
  accent
  ghost
  primary
  secondary
}

"""
NotificationActionWhereInput is used for filtering NotificationAction objects.
Input was generated by ent.
"""
input NotificationActionWhereInput {
  and: [NotificationActionWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """notification edge predicates"""
  hasNotification: Boolean
  hasNotificationWith: [NotificationWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """label field predicates"""
  label: String
  labelContains: String
  labelContainsFold: String
  labelEqualFold: String
  labelGT: String
  labelGTE: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelIn: [String!]
  labelLT: String
  labelLTE: String
  labelNEQ: String
  labelNotIn: [String!]
  not: NotificationActionWhereInput
  or: [NotificationActionWhereInput!]
  """type field predicates"""
  type: NotificationActionType
  typeIn: [NotificationActionType!]
  typeNEQ: NotificationActionType
  typeNotIn: [NotificationActionType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  """variant field predicates"""
  variant: NotificationActionVariant
  variantIn: [NotificationActionVariant!]
  variantNEQ: NotificationActionVariant
  variantNotIn: [NotificationActionVariant!]
}

"""A connection to a list of items."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Notification
}

"""NotificationLevel is enum for the field level"""
enum NotificationLevel {
  error
  info
  success
  warning
}

"""Ordering options for Notification connections"""
input NotificationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Notifications."""
  field: NotificationOrderField!
}

"""Properties by which Notification connections can be ordered."""
enum NotificationOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
NotificationWhereInput is used for filtering Notification objects.
Input was generated by ent.
"""
input NotificationWhereInput {
  and: [NotificationWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtIsNil: Boolean
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  expiresAtNotNil: Boolean
  """actions edge predicates"""
  hasActions: Boolean
  hasActionsWith: [NotificationActionWhereInput!]
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserWhereInput!]
  """direction_targets edge predicates"""
  hasDirectionTargets: Boolean
  hasDirectionTargetsWith: [CommunityDirectionWhereInput!]
  """event_request edge predicates"""
  hasEventRequest: Boolean
  hasEventRequestWith: [EventRequestWhereInput!]
  """expert_auditory edge predicates"""
  hasExpertAuditory: Boolean
  hasExpertAuditoryWith: [UserWhereInput!]
  """region_targets edge predicates"""
  hasRegionTargets: Boolean
  hasRegionTargetsWith: [RegionWhereInput!]
  """user_notification edge predicates"""
  hasUserNotification: Boolean
  hasUserNotificationWith: [UserNotificationWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """is_global field predicates"""
  isGlobal: Boolean
  isGlobalNEQ: Boolean
  """level field predicates"""
  level: NotificationLevel
  levelIn: [NotificationLevel!]
  levelNEQ: NotificationLevel
  levelNotIn: [NotificationLevel!]
  """message field predicates"""
  message: String
  messageContains: String
  messageContainsFold: String
  messageEqualFold: String
  messageGT: String
  messageGTE: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageIn: [String!]
  messageLT: String
  messageLTE: String
  messageNEQ: String
  messageNotIn: [String!]
  not: NotificationWhereInput
  or: [NotificationWhereInput!]
  """target_rights field predicates"""
  targetRights: Int
  targetRightsGT: Int
  targetRightsGTE: Int
  targetRightsIn: [Int!]
  targetRightsIsNil: Boolean
  targetRightsLT: Int
  targetRightsLTE: Int
  targetRightsNEQ: Int
  targetRightsNotIn: [Int!]
  targetRightsNotNil: Boolean
  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

type Organizator implements Node {
  createdAt: Time!
  deletedAt: Time
  id: ID!
  myOrganizatorVote: VoteType!
  organizationName: String!
  organizationURL: String
  updatedAt: Time!
  user: User!
  vote: [Vote!]
}

type OrganizatorEvent implements Node {
  deletedAt: Time
  event: Event!
  feeType: OrganizatorEventFeeType!
  id: ID!
  place: String
  speakerBenefits: String!
  targetAudience: [CommunityDirection!]
  topic: String!
  transferPaid: Boolean!
  verificationMode: OrganizatorEventVerificationMode!
}

"""OrganizatorEventFeeType is enum for the field fee_type"""
enum OrganizatorEventFeeType {
  free
  negotiable
  paid
}

"""
OrganizatorEventVerificationMode is enum for the field verification_mode
"""
enum OrganizatorEventVerificationMode {
  all
  verified_only
}

"""
OrganizatorEventWhereInput is used for filtering OrganizatorEvent objects.
Input was generated by ent.
"""
input OrganizatorEventWhereInput {
  and: [OrganizatorEventWhereInput!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """fee_type field predicates"""
  feeType: OrganizatorEventFeeType
  feeTypeIn: [OrganizatorEventFeeType!]
  feeTypeNEQ: OrganizatorEventFeeType
  feeTypeNotIn: [OrganizatorEventFeeType!]
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [EventWhereInput!]
  """target_audience edge predicates"""
  hasTargetAudience: Boolean
  hasTargetAudienceWith: [CommunityDirectionWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrganizatorEventWhereInput
  or: [OrganizatorEventWhereInput!]
  """place field predicates"""
  place: String
  placeContains: String
  placeContainsFold: String
  placeEqualFold: String
  placeGT: String
  placeGTE: String
  placeHasPrefix: String
  placeHasSuffix: String
  placeIn: [String!]
  placeIsNil: Boolean
  placeLT: String
  placeLTE: String
  placeNEQ: String
  placeNotIn: [String!]
  placeNotNil: Boolean
  """speaker_benefits field predicates"""
  speakerBenefits: String
  speakerBenefitsContains: String
  speakerBenefitsContainsFold: String
  speakerBenefitsEqualFold: String
  speakerBenefitsGT: String
  speakerBenefitsGTE: String
  speakerBenefitsHasPrefix: String
  speakerBenefitsHasSuffix: String
  speakerBenefitsIn: [String!]
  speakerBenefitsLT: String
  speakerBenefitsLTE: String
  speakerBenefitsNEQ: String
  speakerBenefitsNotIn: [String!]
  """topic field predicates"""
  topic: String
  topicContains: String
  topicContainsFold: String
  topicEqualFold: String
  topicGT: String
  topicGTE: String
  topicHasPrefix: String
  topicHasSuffix: String
  topicIn: [String!]
  topicLT: String
  topicLTE: String
  topicNEQ: String
  topicNotIn: [String!]
  """transfer_paid field predicates"""
  transferPaid: Boolean
  transferPaidNEQ: Boolean
  """verification_mode field predicates"""
  verificationMode: OrganizatorEventVerificationMode
  verificationModeIn: [OrganizatorEventVerificationMode!]
  verificationModeNEQ: OrganizatorEventVerificationMode
  verificationModeNotIn: [OrganizatorEventVerificationMode!]
}

"""Ordering options for Organizator connections"""
input OrganizatorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Organizators."""
  field: OrganizatorOrderField!
}

"""Properties by which Organizator connections can be ordered."""
enum OrganizatorOrderField {
  CREATED_AT
  UPDATED_AT
}

type OrganizatorProfileRequest implements Node {
  id: ID!
  newOrganizationName: String!
  newOrganizationURL: String
  oldOrganizationName: String
  oldOrganizationURL: String
  request: ProfileRequest!
}

"""
OrganizatorProfileRequestWhereInput is used for filtering OrganizatorProfileRequest objects.
Input was generated by ent.
"""
input OrganizatorProfileRequestWhereInput {
  and: [OrganizatorProfileRequestWhereInput!]
  """request edge predicates"""
  hasRequest: Boolean
  hasRequestWith: [ProfileRequestWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """new_organization_name field predicates"""
  newOrganizationName: String
  newOrganizationNameContains: String
  newOrganizationNameContainsFold: String
  newOrganizationNameEqualFold: String
  newOrganizationNameGT: String
  newOrganizationNameGTE: String
  newOrganizationNameHasPrefix: String
  newOrganizationNameHasSuffix: String
  newOrganizationNameIn: [String!]
  newOrganizationNameLT: String
  newOrganizationNameLTE: String
  newOrganizationNameNEQ: String
  newOrganizationNameNotIn: [String!]
  """new_organization_url field predicates"""
  newOrganizationURL: String
  newOrganizationURLContains: String
  newOrganizationURLContainsFold: String
  newOrganizationURLEqualFold: String
  newOrganizationURLGT: String
  newOrganizationURLGTE: String
  newOrganizationURLHasPrefix: String
  newOrganizationURLHasSuffix: String
  newOrganizationURLIn: [String!]
  newOrganizationURLIsNil: Boolean
  newOrganizationURLLT: String
  newOrganizationURLLTE: String
  newOrganizationURLNEQ: String
  newOrganizationURLNotIn: [String!]
  newOrganizationURLNotNil: Boolean
  not: OrganizatorProfileRequestWhereInput
  """old_organization_name field predicates"""
  oldOrganizationName: String
  oldOrganizationNameContains: String
  oldOrganizationNameContainsFold: String
  oldOrganizationNameEqualFold: String
  oldOrganizationNameGT: String
  oldOrganizationNameGTE: String
  oldOrganizationNameHasPrefix: String
  oldOrganizationNameHasSuffix: String
  oldOrganizationNameIn: [String!]
  oldOrganizationNameIsNil: Boolean
  oldOrganizationNameLT: String
  oldOrganizationNameLTE: String
  oldOrganizationNameNEQ: String
  oldOrganizationNameNotIn: [String!]
  oldOrganizationNameNotNil: Boolean
  """old_organization_url field predicates"""
  oldOrganizationURL: String
  oldOrganizationURLContains: String
  oldOrganizationURLContainsFold: String
  oldOrganizationURLEqualFold: String
  oldOrganizationURLGT: String
  oldOrganizationURLGTE: String
  oldOrganizationURLHasPrefix: String
  oldOrganizationURLHasSuffix: String
  oldOrganizationURLIn: [String!]
  oldOrganizationURLIsNil: Boolean
  oldOrganizationURLLT: String
  oldOrganizationURLLTE: String
  oldOrganizationURLNEQ: String
  oldOrganizationURLNotIn: [String!]
  oldOrganizationURLNotNil: Boolean
  or: [OrganizatorProfileRequestWhereInput!]
}

"""
OrganizatorWhereInput is used for filtering Organizator objects.
Input was generated by ent.
"""
input OrganizatorWhereInput {
  and: [OrganizatorWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """vote edge predicates"""
  hasVote: Boolean
  hasVoteWith: [VoteWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrganizatorWhereInput
  or: [OrganizatorWhereInput!]
  """organization_name field predicates"""
  organizationName: String
  organizationNameContains: String
  organizationNameContainsFold: String
  organizationNameEqualFold: String
  organizationNameGT: String
  organizationNameGTE: String
  organizationNameHasPrefix: String
  organizationNameHasSuffix: String
  organizationNameIn: [String!]
  organizationNameLT: String
  organizationNameLTE: String
  organizationNameNEQ: String
  organizationNameNotIn: [String!]
  """organization_url field predicates"""
  organizationURL: String
  organizationURLContains: String
  organizationURLContainsFold: String
  organizationURLEqualFold: String
  organizationURLGT: String
  organizationURLGTE: String
  organizationURLHasPrefix: String
  organizationURLHasSuffix: String
  organizationURLIn: [String!]
  organizationURLIsNil: Boolean
  organizationURLLT: String
  organizationURLLTE: String
  organizationURLNEQ: String
  organizationURLNotIn: [String!]
  organizationURLNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PaymentLink implements Node {
  amount: Int!
  createdAt: Time!
  entityID: Int!
  entityType: String!
  id: ID!
  orderID: String!
  paymentLink: String!
  promocodeID: Int!
  sum: Float!
  updatedAt: Time!
  user: User!
  userID: ID!
  version: String!
}

"""Ordering options for PaymentLink connections"""
input PaymentLinkOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order PaymentLinks."""
  field: PaymentLinkOrderField!
}

"""Properties by which PaymentLink connections can be ordered."""
enum PaymentLinkOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
PaymentLinkWhereInput is used for filtering PaymentLink objects.
Input was generated by ent.
"""
input PaymentLinkWhereInput {
  """amount field predicates"""
  amount: Int
  amountGT: Int
  amountGTE: Int
  amountIn: [Int!]
  amountLT: Int
  amountLTE: Int
  amountNEQ: Int
  amountNotIn: [Int!]
  and: [PaymentLinkWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """entity_id field predicates"""
  entityID: Int
  entityIDGT: Int
  entityIDGTE: Int
  entityIDIn: [Int!]
  entityIDLT: Int
  entityIDLTE: Int
  entityIDNEQ: Int
  entityIDNotIn: [Int!]
  """entity_type field predicates"""
  entityType: String
  entityTypeContains: String
  entityTypeContainsFold: String
  entityTypeEqualFold: String
  entityTypeGT: String
  entityTypeGTE: String
  entityTypeHasPrefix: String
  entityTypeHasSuffix: String
  entityTypeIn: [String!]
  entityTypeLT: String
  entityTypeLTE: String
  entityTypeNEQ: String
  entityTypeNotIn: [String!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: PaymentLinkWhereInput
  or: [PaymentLinkWhereInput!]
  """order_id field predicates"""
  orderID: String
  orderIDContains: String
  orderIDContainsFold: String
  orderIDEqualFold: String
  orderIDGT: String
  orderIDGTE: String
  orderIDHasPrefix: String
  orderIDHasSuffix: String
  orderIDIn: [String!]
  orderIDLT: String
  orderIDLTE: String
  orderIDNEQ: String
  orderIDNotIn: [String!]
  """payment_link field predicates"""
  paymentLink: String
  paymentLinkContains: String
  paymentLinkContainsFold: String
  paymentLinkEqualFold: String
  paymentLinkGT: String
  paymentLinkGTE: String
  paymentLinkHasPrefix: String
  paymentLinkHasSuffix: String
  paymentLinkIn: [String!]
  paymentLinkLT: String
  paymentLinkLTE: String
  paymentLinkNEQ: String
  paymentLinkNotIn: [String!]
  """promocode_id field predicates"""
  promocodeID: Int
  promocodeIDGT: Int
  promocodeIDGTE: Int
  promocodeIDIn: [Int!]
  promocodeIDLT: Int
  promocodeIDLTE: Int
  promocodeIDNEQ: Int
  promocodeIDNotIn: [Int!]
  """sum field predicates"""
  sum: Float
  sumGT: Float
  sumGTE: Float
  sumIn: [Float!]
  sumLT: Float
  sumLTE: Float
  sumNEQ: Float
  sumNotIn: [Float!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  """user_id field predicates"""
  userID: ID
  userIDIn: [ID!]
  userIDNEQ: ID
  userIDNotIn: [ID!]
  """version field predicates"""
  version: String
  versionContains: String
  versionContainsFold: String
  versionEqualFold: String
  versionGT: String
  versionGTE: String
  versionHasPrefix: String
  versionHasSuffix: String
  versionIn: [String!]
  versionLT: String
  versionLTE: String
  versionNEQ: String
  versionNotIn: [String!]
}

type PreExpertRequest implements Node {
  creator: User!
  deletedAt: Time
  id: ID!
  status: PreExpertRequestStatus!
  target: User!
}

"""A connection to a list of items."""
type PreExpertRequestConnection {
  """A list of edges."""
  edges: [PreExpertRequestEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PreExpertRequestEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: PreExpertRequest
}

"""PreExpertRequestStatus is enum for the field status"""
enum PreExpertRequestStatus {
  approved
  pending
  rejected
}

"""
PreExpertRequestWhereInput is used for filtering PreExpertRequest objects.
Input was generated by ent.
"""
input PreExpertRequestWhereInput {
  and: [PreExpertRequestWhereInput!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """target edge predicates"""
  hasTarget: Boolean
  hasTargetWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: PreExpertRequestWhereInput
  or: [PreExpertRequestWhereInput!]
  """status field predicates"""
  status: PreExpertRequestStatus
  statusIn: [PreExpertRequestStatus!]
  statusNEQ: PreExpertRequestStatus
  statusNotIn: [PreExpertRequestStatus!]
}

type ProfileCreate {
  communityDirections: [Int!]!
  referUsername: String
  regalia: String
  region: Int!
  simpleSpeechLink: String
  socialMediaLink: String
}

input ProfileCreateInput {
  changeType: ProfileRequestChangeType!
  expert: CreateExpertInput
  organizator: CreateOrganizatorInput
  preExpert: CreatePreExpertInput
  type: ProfileRequestType!
}

type ProfileRequest implements Node {
  adminComment: String
  changeType: ProfileRequestChangeType!
  createdAt: Time!
  creator: User!
  deletedAt: Time
  expertRequest: ExpertProfileRequest
  id: ID!
  organizatorRequest: OrganizatorProfileRequest
  status: ProfileRequestStatus!
  type: ProfileRequestType!
  updatedAt: Time!
  verifiedAdmin: User
}

"""ProfileRequestChangeType is enum for the field change_type"""
enum ProfileRequestChangeType {
  create
  update
}

"""A connection to a list of items."""
type ProfileRequestConnection {
  """A list of edges."""
  edges: [ProfileRequestEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProfileRequestEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: ProfileRequest
}

"""Ordering options for ProfileRequest connections"""
input ProfileRequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ProfileRequests."""
  field: ProfileRequestOrderField!
}

"""Properties by which ProfileRequest connections can be ordered."""
enum ProfileRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

"""ProfileRequestStatus is enum for the field status"""
enum ProfileRequestStatus {
  approved
  pending
  rejected
}

"""ProfileRequestType is enum for the field type"""
enum ProfileRequestType {
  expert
  organizator
  pre_expert
}

"""
ProfileRequestWhereInput is used for filtering ProfileRequest objects.
Input was generated by ent.
"""
input ProfileRequestWhereInput {
  """admin_comment field predicates"""
  adminComment: String
  adminCommentContains: String
  adminCommentContainsFold: String
  adminCommentEqualFold: String
  adminCommentGT: String
  adminCommentGTE: String
  adminCommentHasPrefix: String
  adminCommentHasSuffix: String
  adminCommentIn: [String!]
  adminCommentIsNil: Boolean
  adminCommentLT: String
  adminCommentLTE: String
  adminCommentNEQ: String
  adminCommentNotIn: [String!]
  adminCommentNotNil: Boolean
  and: [ProfileRequestWhereInput!]
  """change_type field predicates"""
  changeType: ProfileRequestChangeType
  changeTypeIn: [ProfileRequestChangeType!]
  changeTypeNEQ: ProfileRequestChangeType
  changeTypeNotIn: [ProfileRequestChangeType!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """expert_request edge predicates"""
  hasExpertRequest: Boolean
  hasExpertRequestWith: [ExpertProfileRequestWhereInput!]
  """organizator_request edge predicates"""
  hasOrganizatorRequest: Boolean
  hasOrganizatorRequestWith: [OrganizatorProfileRequestWhereInput!]
  """verified_admin edge predicates"""
  hasVerifiedAdmin: Boolean
  hasVerifiedAdminWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: ProfileRequestWhereInput
  or: [ProfileRequestWhereInput!]
  """status field predicates"""
  status: ProfileRequestStatus
  statusIn: [ProfileRequestStatus!]
  statusNEQ: ProfileRequestStatus
  statusNotIn: [ProfileRequestStatus!]
  """type field predicates"""
  type: ProfileRequestType
  typeIn: [ProfileRequestType!]
  typeNEQ: ProfileRequestType
  typeNotIn: [ProfileRequestType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Promocode implements Node {
  activatedCount: Int!
  active: Boolean!
  code: String!
  createdAt: Time!
  deletedAt: Time
  discount: Int!
  endAt: Time!
  id: ID!
  maxCountActivations: Int!
  maxMouthSubscriptionDuration: Int!
  maxUserCountActivations: Int!
  startAt: Time!
  tariffs: [Tariff!]
  updatedAt: Time!
  usesUsers: [User!]
}

"""A connection to a list of items."""
type PromocodeConnection {
  """A list of edges."""
  edges: [PromocodeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PromocodeEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Promocode
}

"""Ordering options for Promocode connections"""
input PromocodeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Promocodes."""
  field: PromocodeOrderField!
}

"""Properties by which Promocode connections can be ordered."""
enum PromocodeOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
PromocodeWhereInput is used for filtering Promocode objects.
Input was generated by ent.
"""
input PromocodeWhereInput {
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  and: [PromocodeWhereInput!]
  """code field predicates"""
  code: String
  codeContains: String
  codeContainsFold: String
  codeEqualFold: String
  codeGT: String
  codeGTE: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIn: [String!]
  codeLT: String
  codeLTE: String
  codeNEQ: String
  codeNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """discount field predicates"""
  discount: Int
  discountGT: Int
  discountGTE: Int
  discountIn: [Int!]
  discountLT: Int
  discountLTE: Int
  discountNEQ: Int
  discountNotIn: [Int!]
  """end_at field predicates"""
  endAt: Time
  endAtGT: Time
  endAtGTE: Time
  endAtIn: [Time!]
  endAtLT: Time
  endAtLTE: Time
  endAtNEQ: Time
  endAtNotIn: [Time!]
  """tariffs edge predicates"""
  hasTariffs: Boolean
  hasTariffsWith: [TariffWhereInput!]
  """uses_users edge predicates"""
  hasUsesUsers: Boolean
  hasUsesUsersWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """max_count_activations field predicates"""
  maxCountActivations: Int
  maxCountActivationsGT: Int
  maxCountActivationsGTE: Int
  maxCountActivationsIn: [Int!]
  maxCountActivationsLT: Int
  maxCountActivationsLTE: Int
  maxCountActivationsNEQ: Int
  maxCountActivationsNotIn: [Int!]
  """max_mouth_subscription_duration field predicates"""
  maxMouthSubscriptionDuration: Int
  maxMouthSubscriptionDurationGT: Int
  maxMouthSubscriptionDurationGTE: Int
  maxMouthSubscriptionDurationIn: [Int!]
  maxMouthSubscriptionDurationLT: Int
  maxMouthSubscriptionDurationLTE: Int
  maxMouthSubscriptionDurationNEQ: Int
  maxMouthSubscriptionDurationNotIn: [Int!]
  """max_user_count_activations field predicates"""
  maxUserCountActivations: Int
  maxUserCountActivationsGT: Int
  maxUserCountActivationsGTE: Int
  maxUserCountActivationsIn: [Int!]
  maxUserCountActivationsLT: Int
  maxUserCountActivationsLTE: Int
  maxUserCountActivationsNEQ: Int
  maxUserCountActivationsNotIn: [Int!]
  not: PromocodeWhereInput
  or: [PromocodeWhereInput!]
  """start_at field predicates"""
  startAt: Time
  startAtGT: Time
  startAtGTE: Time
  startAtIn: [Time!]
  startAtLT: Time
  startAtLTE: Time
  startAtNEQ: Time
  startAtNotIn: [Time!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Query {
  ProfileRequest(id: ID!): ProfileRequest!
  analisticVotes(eventID: ID!): [Vote!]
  analisticVotesHistory(eventID: ID!): [VoteHistory!]
  calcSubscriptionPrice(data: CalcSubscriptionPriceInput!): Float
  checkCanUsePromocode(promocode: String!): Boolean!
  checkPromocode(code: String!): CheckPromocodeResponse!
  communityDirections: [CommunityDirection!]!
  communityDirectionsCategorized: [CategoryCommunityDirection!]!
  event(id: ID!): Event!
  eventPromoWords(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for EventPromoWords returned from the connection."""
    orderBy: EventPromoWordOrder
    """Filtering options for EventPromoWords returned from the connection."""
    where: EventPromoWordWhereInput
  ): EventPromoWordConnection!
  eventRequest(id: ID!): EventRequest!
  eventRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for EventRequests returned from the connection."""
    orderBy: EventRequestOrder
    """Filtering options for EventRequests returned from the connection."""
    where: EventRequestWhereInput
  ): EventRequestConnection!
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Events returned from the connection."""
    orderBy: EventOrder
    """Filtering options for Events returned from the connection."""
    where: EventWhereInput
  ): EventConnection!
  expertProfile(id: ID!): ExpertProfile!
  expertProfileRequests: [ExpertProfileRequest!]!
  expertProfiles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for ExpertProfiles returned from the connection."""
    orderBy: ExpertProfileOrder
    """Filtering options for ExpertProfiles returned from the connection."""
    where: ExpertProfileWhereInput
  ): ExpertProfileConnection!
  expertReportStatistic(expertId: ID!): String!
  expertRepresentativeEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    expertID: ID
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """# Filtering options for Events returned from the connection. #"""
    where: EventWhereInput
  ): EventConnection!
  expertResponseToEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for ExpertResponseToEvents returned from the connection.
    """
    orderBy: ExpertResponseToEventOrder
    """
    Filtering options for ExpertResponseToEvents returned from the connection.
    """
    where: ExpertResponseToEventWhereInput
  ): ExpertResponseToEventConnection!
  inputEvent(id: ID, promoWord: String): Event!
  mailingUsersStatistic(context: RoleContext): Boolean!
  me: User!
  myEventRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for EventRequests returned from the connection."""
    orderBy: EventRequestOrder
    where: EventRequestWhereInput
  ): EventRequestConnection!
  myNotifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """# Filtering options for Events returned from the connection. #"""
    where: UserNotificationWhereInput
  ): UserNotificationConnection!
  myProfileRequest(type: ProfileRequestType!): ProfileRequest
  myResponseToEvent(eventID: ID!): ExpertResponseToEvent!
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  notificationActions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for NotificationActions returned from the connection."""
    orderBy: NotificationActionOrder
    """
    Filtering options for NotificationActions returned from the connection.
    """
    where: NotificationActionWhereInput
  ): NotificationActionConnection!
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Notifications returned from the connection."""
    orderBy: NotificationOrder
    """Filtering options for Notifications returned from the connection."""
    where: NotificationWhereInput
  ): NotificationConnection!
  organizatorProfileRequests: [OrganizatorProfileRequest!]!
  pendingverifyExpertRequest(limit: Int!, offset: Int!): [VerifyExpertRequest!]
  platformRightsText: String!
  preExpertRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for PreExpertRequests returned from the connection."""
    where: PreExpertRequestWhereInput
  ): PreExpertRequestConnection!
  profileRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for ProfileRequests returned from the connection."""
    orderBy: ProfileRequestOrder
    """Filtering options for ProfileRequests returned from the connection."""
    where: ProfileRequestWhereInput
  ): ProfileRequestConnection!
  promocodes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Promocodes returned from the connection."""
    orderBy: PromocodeOrder
    """Filtering options for Promocodes returned from the connection."""
    where: PromocodeWhereInput
  ): PromocodeConnection!
  regions: [Region!]!
  representativeExpertRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """
    Ordering options for RepresentativeExpertRequests returned from the connection.
    """
    orderBy: RepresentativeExpertRequestOrder
    """
    Filtering options for RepresentativeExpertRequests returned from the connection.
    """
    where: RepresentativeExpertRequestWhereInput
  ): RepresentativeExpertRequestConnection!
  representativeExperts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    expertID: ID
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """# Filtering options for Events returned from the connection. #"""
    where: UserWhereInput
  ): UserConnection!
  searchExpertToOrganizatorEvent(query: String!): [User!]!
  settings: SettingsValues!
  statistic: Statistic!
  tariffSubscriptionLogs: [TariffSubscriptionLog!]!
  tariffSubscriptions: [TariffSubscription!]!
  tariffs: [Tariff!]!
  user(id: ID!): User!
  userBlocks: [UserBlock!]!
  userNotifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for UserNotifications returned from the connection."""
    orderBy: UserNotificationOrder
    """Filtering options for UserNotifications returned from the connection."""
    where: UserNotificationWhereInput
  ): UserNotificationConnection!
  userPlatforms: [UserPlatform!]!
  userTariffLimits(userID: ID!): Tariff!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  verifyExpertRequest(id: ID!): VerifyExpertRequest!
  verifyExpertRequests: [VerifyExpertRequest!]!
  voteHistories: [VoteHistory!]!
  voteVerifyExperts: [VoteVerifyExpert!]!
  votes: [Vote!]!
  votesVerifyExpert(limit: Int!, offset: Int!): [VoteVerifyExpert!]
}

type Region implements Node {
  expertProfileRequestAsNew: [ExpertProfileRequest!]
  expertProfileRequestAsOld: [ExpertProfileRequest!]
  expertProfiles: [ExpertProfile!]
  id: ID!
  regionName: String!
  regionTargets: [Notification!]
}

"""
RegionWhereInput is used for filtering Region objects.
Input was generated by ent.
"""
input RegionWhereInput {
  and: [RegionWhereInput!]
  """expert_profile_request_as_new edge predicates"""
  hasExpertProfileRequestAsNew: Boolean
  hasExpertProfileRequestAsNewWith: [ExpertProfileRequestWhereInput!]
  """expert_profile_request_as_old edge predicates"""
  hasExpertProfileRequestAsOld: Boolean
  hasExpertProfileRequestAsOldWith: [ExpertProfileRequestWhereInput!]
  """expert_profiles edge predicates"""
  hasExpertProfiles: Boolean
  hasExpertProfilesWith: [ExpertProfileWhereInput!]
  """region_targets edge predicates"""
  hasRegionTargets: Boolean
  hasRegionTargetsWith: [NotificationWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: RegionWhereInput
  or: [RegionWhereInput!]
  """region_name field predicates"""
  regionName: String
  regionNameContains: String
  regionNameContainsFold: String
  regionNameEqualFold: String
  regionNameGT: String
  regionNameGTE: String
  regionNameHasPrefix: String
  regionNameHasSuffix: String
  regionNameIn: [String!]
  regionNameLT: String
  regionNameLTE: String
  regionNameNEQ: String
  regionNameNotIn: [String!]
}

type RepresentativeExpertRequest implements Node {
  createdAt: Time!
  deletedAt: Time
  id: ID!
  representativeUser: User!
  status: RepresentativeExpertRequestStatus!
  targetUser: User!
  type: RepresentativeExpertRequestType!
  updatedAt: Time!
}

"""A connection to a list of items."""
type RepresentativeExpertRequestConnection {
  """A list of edges."""
  edges: [RepresentativeExpertRequestEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RepresentativeExpertRequestEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: RepresentativeExpertRequest
}

"""Ordering options for RepresentativeExpertRequest connections"""
input RepresentativeExpertRequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order RepresentativeExpertRequests."""
  field: RepresentativeExpertRequestOrderField!
}

"""
Properties by which RepresentativeExpertRequest connections can be ordered.
"""
enum RepresentativeExpertRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

"""RepresentativeExpertRequestStatus is enum for the field status"""
enum RepresentativeExpertRequestStatus {
  approved
  pending
  rejected
}

"""RepresentativeExpertRequestType is enum for the field type"""
enum RepresentativeExpertRequestType {
  invite
  request
}

"""
RepresentativeExpertRequestWhereInput is used for filtering RepresentativeExpertRequest objects.
Input was generated by ent.
"""
input RepresentativeExpertRequestWhereInput {
  and: [RepresentativeExpertRequestWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """representative_user edge predicates"""
  hasRepresentativeUser: Boolean
  hasRepresentativeUserWith: [UserWhereInput!]
  """target_user edge predicates"""
  hasTargetUser: Boolean
  hasTargetUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: RepresentativeExpertRequestWhereInput
  or: [RepresentativeExpertRequestWhereInput!]
  """status field predicates"""
  status: RepresentativeExpertRequestStatus
  statusIn: [RepresentativeExpertRequestStatus!]
  statusNEQ: RepresentativeExpertRequestStatus
  statusNotIn: [RepresentativeExpertRequestStatus!]
  """type field predicates"""
  type: RepresentativeExpertRequestType
  typeIn: [RepresentativeExpertRequestType!]
  typeNEQ: RepresentativeExpertRequestType
  typeNotIn: [RepresentativeExpertRequestType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

enum RoleContext {
  admin
  expert
  user
}

type SettingsValues {
  notificationsFromAppEnabled: Boolean!
  notificationsFromExperts: Boolean!
  peopleRatingEnabled: Boolean!
}

input SettingsValuesInput {
  notificationsFromAppEnabled: Boolean
  notificationsFromExperts: Boolean
  peopleRatingEnabled: Boolean
}

type Statistic {
  eventsCount: Int!
  eventsHoursCount: Int!
  usersCount: Int!
  votesCount: Int!
}

input SubmitTariffInput {
  durationMonths: Uint = 1
  email: String!
  promocode: String
  tariffID: ID!
}

type SubmitTariffResponse {
  discount: Float!
  openedByPromocode: Boolean!
  paymentLink: String!
  promocodeResult: UserPromocodeResult!
}

type Subscription {
  notificationAdded: NewNotification!
}

type Tariff implements Node {
  active: Boolean!
  activeWordDurationHours: Int!
  countExpertsInCreateCommunity: Int!
  createProfessionalCommunities: Int!
  createdAt: Time!
  eventsPerMonth: Int!
  family: TariffTariffFamily!
  freeEventResponses: Int!
  id: ID!
  joinProfessionalCommunities: Int!
  mailingPerMonth: Int!
  numberExpertsManagedByOneRepresentative: Int!
  organizerExpertsOnEvent: Int!
  organizerFeeEventMailingPriceExpert: Float!
  organizerInviteMailingPriceExpert: Float!
  organizerPerEvent: Int!
  organizerRequestExpertAboutPrice: Float!
  paidEventResponsesPerMonth: Int!
  paidRequestPublicationPrice: Float!
  price: Float!
  promocodes: [Promocode!]
  referralBonus: Int!
  referralPrice: Int!
  tariffSubscriptions: [TariffSubscription!]
  tariffSubscriptionsLog: [TariffSubscriptionLog!]
  title: String!
  updatedAt: Time!
  votesPerEvent: Int!
}

"""Ordering options for Tariff connections"""
input TariffOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tariffs."""
  field: TariffOrderField!
}

"""Properties by which Tariff connections can be ordered."""
enum TariffOrderField {
  CREATED_AT
  UPDATED_AT
}

type TariffSubscription implements Node {
  createdAt: Time!
  endAt: Time
  id: ID!
  paymentMouthSum: Float
  startAt: Time!
  tariff: Tariff!
  updatedAt: Time!
  user: User!
}

type TariffSubscriptionLog implements Node {
  createdAt: Time!
  endAt: Time
  id: ID!
  paymentMouthSum: Float
  startAt: Time!
  tariff: Tariff!
  updatedAt: Time!
  user: User!
}

"""Ordering options for TariffSubscriptionLog connections"""
input TariffSubscriptionLogOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order TariffSubscriptionLogs."""
  field: TariffSubscriptionLogOrderField!
}

"""Properties by which TariffSubscriptionLog connections can be ordered."""
enum TariffSubscriptionLogOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
TariffSubscriptionLogWhereInput is used for filtering TariffSubscriptionLog objects.
Input was generated by ent.
"""
input TariffSubscriptionLogWhereInput {
  and: [TariffSubscriptionLogWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """end_at field predicates"""
  endAt: Time
  endAtGT: Time
  endAtGTE: Time
  endAtIn: [Time!]
  endAtIsNil: Boolean
  endAtLT: Time
  endAtLTE: Time
  endAtNEQ: Time
  endAtNotIn: [Time!]
  endAtNotNil: Boolean
  """tariff edge predicates"""
  hasTariff: Boolean
  hasTariffWith: [TariffWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: TariffSubscriptionLogWhereInput
  or: [TariffSubscriptionLogWhereInput!]
  """payment_mouth_sum field predicates"""
  paymentMouthSum: Float
  paymentMouthSumGT: Float
  paymentMouthSumGTE: Float
  paymentMouthSumIn: [Float!]
  paymentMouthSumIsNil: Boolean
  paymentMouthSumLT: Float
  paymentMouthSumLTE: Float
  paymentMouthSumNEQ: Float
  paymentMouthSumNotIn: [Float!]
  paymentMouthSumNotNil: Boolean
  """start_at field predicates"""
  startAt: Time
  startAtGT: Time
  startAtGTE: Time
  startAtIn: [Time!]
  startAtLT: Time
  startAtLTE: Time
  startAtNEQ: Time
  startAtNotIn: [Time!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""Ordering options for TariffSubscription connections"""
input TariffSubscriptionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order TariffSubscriptions."""
  field: TariffSubscriptionOrderField!
}

"""Properties by which TariffSubscription connections can be ordered."""
enum TariffSubscriptionOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
TariffSubscriptionWhereInput is used for filtering TariffSubscription objects.
Input was generated by ent.
"""
input TariffSubscriptionWhereInput {
  and: [TariffSubscriptionWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """end_at field predicates"""
  endAt: Time
  endAtGT: Time
  endAtGTE: Time
  endAtIn: [Time!]
  endAtIsNil: Boolean
  endAtLT: Time
  endAtLTE: Time
  endAtNEQ: Time
  endAtNotIn: [Time!]
  endAtNotNil: Boolean
  """tariff edge predicates"""
  hasTariff: Boolean
  hasTariffWith: [TariffWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: TariffSubscriptionWhereInput
  or: [TariffSubscriptionWhereInput!]
  """payment_mouth_sum field predicates"""
  paymentMouthSum: Float
  paymentMouthSumGT: Float
  paymentMouthSumGTE: Float
  paymentMouthSumIn: [Float!]
  paymentMouthSumIsNil: Boolean
  paymentMouthSumLT: Float
  paymentMouthSumLTE: Float
  paymentMouthSumNEQ: Float
  paymentMouthSumNotIn: [Float!]
  paymentMouthSumNotNil: Boolean
  """start_at field predicates"""
  startAt: Time
  startAtGT: Time
  startAtGTE: Time
  startAtIn: [Time!]
  startAtLT: Time
  startAtLTE: Time
  startAtNEQ: Time
  startAtNotIn: [Time!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""TariffTariffFamily is enum for the field family"""
enum TariffTariffFamily {
  pro
  standard
  start
  unlimited
}

"""
TariffWhereInput is used for filtering Tariff objects.
Input was generated by ent.
"""
input TariffWhereInput {
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """active_word_duration_hours field predicates"""
  activeWordDurationHours: Int
  activeWordDurationHoursGT: Int
  activeWordDurationHoursGTE: Int
  activeWordDurationHoursIn: [Int!]
  activeWordDurationHoursLT: Int
  activeWordDurationHoursLTE: Int
  activeWordDurationHoursNEQ: Int
  activeWordDurationHoursNotIn: [Int!]
  and: [TariffWhereInput!]
  """count_experts_in_create_community field predicates"""
  countExpertsInCreateCommunity: Int
  countExpertsInCreateCommunityGT: Int
  countExpertsInCreateCommunityGTE: Int
  countExpertsInCreateCommunityIn: [Int!]
  countExpertsInCreateCommunityLT: Int
  countExpertsInCreateCommunityLTE: Int
  countExpertsInCreateCommunityNEQ: Int
  countExpertsInCreateCommunityNotIn: [Int!]
  """create_professional_communities field predicates"""
  createProfessionalCommunities: Int
  createProfessionalCommunitiesGT: Int
  createProfessionalCommunitiesGTE: Int
  createProfessionalCommunitiesIn: [Int!]
  createProfessionalCommunitiesLT: Int
  createProfessionalCommunitiesLTE: Int
  createProfessionalCommunitiesNEQ: Int
  createProfessionalCommunitiesNotIn: [Int!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """events_per_month field predicates"""
  eventsPerMonth: Int
  eventsPerMonthGT: Int
  eventsPerMonthGTE: Int
  eventsPerMonthIn: [Int!]
  eventsPerMonthLT: Int
  eventsPerMonthLTE: Int
  eventsPerMonthNEQ: Int
  eventsPerMonthNotIn: [Int!]
  """family field predicates"""
  family: TariffTariffFamily
  familyIn: [TariffTariffFamily!]
  familyNEQ: TariffTariffFamily
  familyNotIn: [TariffTariffFamily!]
  """free_event_responses field predicates"""
  freeEventResponses: Int
  freeEventResponsesGT: Int
  freeEventResponsesGTE: Int
  freeEventResponsesIn: [Int!]
  freeEventResponsesLT: Int
  freeEventResponsesLTE: Int
  freeEventResponsesNEQ: Int
  freeEventResponsesNotIn: [Int!]
  """promocodes edge predicates"""
  hasPromocodes: Boolean
  hasPromocodesWith: [PromocodeWhereInput!]
  """tariff_subscriptions edge predicates"""
  hasTariffSubscriptions: Boolean
  """tariff_subscriptions_log edge predicates"""
  hasTariffSubscriptionsLog: Boolean
  hasTariffSubscriptionsLogWith: [TariffSubscriptionLogWhereInput!]
  hasTariffSubscriptionsWith: [TariffSubscriptionWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """join_professional_communities field predicates"""
  joinProfessionalCommunities: Int
  joinProfessionalCommunitiesGT: Int
  joinProfessionalCommunitiesGTE: Int
  joinProfessionalCommunitiesIn: [Int!]
  joinProfessionalCommunitiesLT: Int
  joinProfessionalCommunitiesLTE: Int
  joinProfessionalCommunitiesNEQ: Int
  joinProfessionalCommunitiesNotIn: [Int!]
  """mailing_per_month field predicates"""
  mailingPerMonth: Int
  mailingPerMonthGT: Int
  mailingPerMonthGTE: Int
  mailingPerMonthIn: [Int!]
  mailingPerMonthLT: Int
  mailingPerMonthLTE: Int
  mailingPerMonthNEQ: Int
  mailingPerMonthNotIn: [Int!]
  not: TariffWhereInput
  """number_experts_managed_by_one_representative field predicates"""
  numberExpertsManagedByOneRepresentative: Int
  numberExpertsManagedByOneRepresentativeGT: Int
  numberExpertsManagedByOneRepresentativeGTE: Int
  numberExpertsManagedByOneRepresentativeIn: [Int!]
  numberExpertsManagedByOneRepresentativeLT: Int
  numberExpertsManagedByOneRepresentativeLTE: Int
  numberExpertsManagedByOneRepresentativeNEQ: Int
  numberExpertsManagedByOneRepresentativeNotIn: [Int!]
  or: [TariffWhereInput!]
  """organizer_experts_on_event field predicates"""
  organizerExpertsOnEvent: Int
  organizerExpertsOnEventGT: Int
  organizerExpertsOnEventGTE: Int
  organizerExpertsOnEventIn: [Int!]
  organizerExpertsOnEventLT: Int
  organizerExpertsOnEventLTE: Int
  organizerExpertsOnEventNEQ: Int
  organizerExpertsOnEventNotIn: [Int!]
  """organizer_fee_event_mailing_price_expert field predicates"""
  organizerFeeEventMailingPriceExpert: Float
  organizerFeeEventMailingPriceExpertGT: Float
  organizerFeeEventMailingPriceExpertGTE: Float
  organizerFeeEventMailingPriceExpertIn: [Float!]
  organizerFeeEventMailingPriceExpertLT: Float
  organizerFeeEventMailingPriceExpertLTE: Float
  organizerFeeEventMailingPriceExpertNEQ: Float
  organizerFeeEventMailingPriceExpertNotIn: [Float!]
  """organizer_invite_mailing_price_expert field predicates"""
  organizerInviteMailingPriceExpert: Float
  organizerInviteMailingPriceExpertGT: Float
  organizerInviteMailingPriceExpertGTE: Float
  organizerInviteMailingPriceExpertIn: [Float!]
  organizerInviteMailingPriceExpertLT: Float
  organizerInviteMailingPriceExpertLTE: Float
  organizerInviteMailingPriceExpertNEQ: Float
  organizerInviteMailingPriceExpertNotIn: [Float!]
  """organizer_per_event field predicates"""
  organizerPerEvent: Int
  organizerPerEventGT: Int
  organizerPerEventGTE: Int
  organizerPerEventIn: [Int!]
  organizerPerEventLT: Int
  organizerPerEventLTE: Int
  organizerPerEventNEQ: Int
  organizerPerEventNotIn: [Int!]
  """organizer_request_expert_about_price field predicates"""
  organizerRequestExpertAboutPrice: Float
  organizerRequestExpertAboutPriceGT: Float
  organizerRequestExpertAboutPriceGTE: Float
  organizerRequestExpertAboutPriceIn: [Float!]
  organizerRequestExpertAboutPriceLT: Float
  organizerRequestExpertAboutPriceLTE: Float
  organizerRequestExpertAboutPriceNEQ: Float
  organizerRequestExpertAboutPriceNotIn: [Float!]
  """paid_event_responses_per_month field predicates"""
  paidEventResponsesPerMonth: Int
  paidEventResponsesPerMonthGT: Int
  paidEventResponsesPerMonthGTE: Int
  paidEventResponsesPerMonthIn: [Int!]
  paidEventResponsesPerMonthLT: Int
  paidEventResponsesPerMonthLTE: Int
  paidEventResponsesPerMonthNEQ: Int
  paidEventResponsesPerMonthNotIn: [Int!]
  """paid_request_publication_price field predicates"""
  paidRequestPublicationPrice: Float
  paidRequestPublicationPriceGT: Float
  paidRequestPublicationPriceGTE: Float
  paidRequestPublicationPriceIn: [Float!]
  paidRequestPublicationPriceLT: Float
  paidRequestPublicationPriceLTE: Float
  paidRequestPublicationPriceNEQ: Float
  paidRequestPublicationPriceNotIn: [Float!]
  """price field predicates"""
  price: Float
  priceGT: Float
  priceGTE: Float
  priceIn: [Float!]
  priceLT: Float
  priceLTE: Float
  priceNEQ: Float
  priceNotIn: [Float!]
  """referral_bonus field predicates"""
  referralBonus: Int
  referralBonusGT: Int
  referralBonusGTE: Int
  referralBonusIn: [Int!]
  referralBonusLT: Int
  referralBonusLTE: Int
  referralBonusNEQ: Int
  referralBonusNotIn: [Int!]
  """referral_price field predicates"""
  referralPrice: Int
  referralPriceGT: Int
  referralPriceGTE: Int
  referralPriceIn: [Int!]
  referralPriceLT: Int
  referralPriceLTE: Int
  referralPriceNEQ: Int
  referralPriceNotIn: [Int!]
  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  """votes_per_event field predicates"""
  votesPerEvent: Int
  votesPerEventGT: Int
  votesPerEventGTE: Int
  votesPerEventIn: [Int!]
  votesPerEventLT: Int
  votesPerEventLTE: Int
  votesPerEventNEQ: Int
  votesPerEventNotIn: [Int!]
}

"""The builtin Time type"""
scalar Time

scalar Uint

"""
UpdateTariffInput is used for update Tariff object.
Input was generated by ent.
"""
input UpdateTariffInput {
  active: Boolean
  activeWordDurationHours: Int
  addPromocodeIDs: [ID!]
  addTariffSubscriptionIDs: [ID!]
  addTariffSubscriptionsLogIDs: [ID!]
  clearPromocodes: Boolean
  clearTariffSubscriptions: Boolean
  clearTariffSubscriptionsLog: Boolean
  countExpertsInCreateCommunity: Int
  createProfessionalCommunities: Int
  eventsPerMonth: Int
  family: TariffTariffFamily
  freeEventResponses: Int
  joinProfessionalCommunities: Int
  mailingPerMonth: Int
  numberExpertsManagedByOneRepresentative: Int
  organizerExpertsOnEvent: Int
  organizerFeeEventMailingPriceExpert: Float
  organizerInviteMailingPriceExpert: Float
  organizerPerEvent: Int
  organizerRequestExpertAboutPrice: Float
  paidEventResponsesPerMonth: Int
  paidRequestPublicationPrice: Float
  price: Float
  referralBonus: Int
  referralPrice: Int
  removePromocodeIDs: [ID!]
  removeTariffSubscriptionIDs: [ID!]
  removeTariffSubscriptionsLogIDs: [ID!]
  title: String
  updatedAt: Time
  votesPerEvent: Int
}

"""
UpdateTariffSubscriptionInput is used for update TariffSubscription object.
Input was generated by ent.
"""
input UpdateTariffSubscriptionInput {
  clearEndAt: Boolean
  clearPaymentMouthSum: Boolean
  endAt: Time
  paymentMouthSum: Float
  startAt: Time
  tariffID: ID
  updatedAt: Time
  userID: ID
}

"""
UpdateTariffSubscriptionLogInput is used for update TariffSubscriptionLog object.
Input was generated by ent.
"""
input UpdateTariffSubscriptionLogInput {
  clearEndAt: Boolean
  clearPaymentMouthSum: Boolean
  endAt: Time
  paymentMouthSum: Float
  startAt: Time
  tariffID: ID
  updatedAt: Time
  userID: ID
}

"""
UpdateUserBlockInput is used for update UserBlock object.
Input was generated by ent.
"""
input UpdateUserBlockInput {
  enabled: Boolean
  reason: String
  userID: ID
}

"""
UpdateVerifyExpertRequestInput is used for update VerifyExpertRequest object.
Input was generated by ent.
"""
input UpdateVerifyExpertRequestInput {
  addVoteIDs: [ID!]
  clearVotes: Boolean
  creatorID: ID
  expiresAt: Time
  removeVoteIDs: [ID!]
  status: VerifyExpertRequestStatus
  updatedAt: Time
}

"""
UpdateVoteVerifyExpertInput is used for update VoteVerifyExpert object.
Input was generated by ent.
"""
input UpdateVoteVerifyExpertInput {
  expertID: ID
  requestID: ID
  status: VoteVerifyExpertStatus
  updatedAt: Time
}

scalar Upload

type User implements Node {
  agreesTermsAt: Time
  avatar: String
  createdAt: Time!
  createdProfileRequests: [ProfileRequest!]
  createdVotes: [Vote!]
  deletedAt: Time
  disabledExpertNotifications: Boolean!
  eventRequests: [EventRequest!]
  events: [Event!]
  expertProfile: ExpertProfile
  firstName: String!
  id: ID!
  lastName: String!
  nickname: String
  notificationAuthor: [Notification!]
  notificationFronAppEnabled: Boolean!
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for UserNotifications returned from the connection."""
    orderBy: UserNotificationOrder
    """Filtering options for UserNotifications returned from the connection."""
    where: UserNotificationWhereInput
  ): UserNotificationConnection!
  organizatorProfile: Organizator
  platforms: UserPlatform
  privacy: String
  promoWords: [EventPromoWord!]
  referalExpertID: ID
  referalExpertProfile: ExpertProfile
  representativeEvents: [Event!]
  """запросы от пользователя"""
  representativeUser: [RepresentativeExpertRequest!]
  rights: Int!
  tariffLimits: Tariff!
  tariffSubscription: TariffSubscription
  tariffSubscriptionsLog: [TariffSubscriptionLog!]
  updatedAt: Time!
  usedPromocodes: [Promocode!]
  userBlock: UserBlock
  """запросы к пользователю"""
  userRepresentative: [RepresentativeExpertRequest!]
  username: String!
  verifiedEventRequests: [EventRequest!]
  verifiedEvents: [Event!]
  verifiedProfileRequests: [ProfileRequest!]
}

type UserBlock implements Node {
  createdAt: Time!
  deletedAt: Time
  enabled: Boolean!
  id: ID!
  reason: String!
  user: User!
}

"""
UserBlockWhereInput is used for filtering UserBlock objects.
Input was generated by ent.
"""
input UserBlockWhereInput {
  and: [UserBlockWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: UserBlockWhereInput
  or: [UserBlockWhereInput!]
  """reason field predicates"""
  reason: String
  reasonContains: String
  reasonContainsFold: String
  reasonEqualFold: String
  reasonGT: String
  reasonGTE: String
  reasonHasPrefix: String
  reasonHasSuffix: String
  reasonIn: [String!]
  reasonLT: String
  reasonLTE: String
  reasonNEQ: String
  reasonNotIn: [String!]
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: User
}

type UserNotification implements Node {
  createdAt: Time!
  id: ID!
  notification: Notification!
  readAt: Time
  updatedAt: Time!
  user: User!
}

"""A connection to a list of items."""
type UserNotificationConnection {
  """A list of edges."""
  edges: [UserNotificationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserNotificationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: UserNotification
}

"""Ordering options for UserNotification connections"""
input UserNotificationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserNotifications."""
  field: UserNotificationOrderField!
}

"""Properties by which UserNotification connections can be ordered."""
enum UserNotificationOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
UserNotificationWhereInput is used for filtering UserNotification objects.
Input was generated by ent.
"""
input UserNotificationWhereInput {
  and: [UserNotificationWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """notification edge predicates"""
  hasNotification: Boolean
  hasNotificationWith: [NotificationWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: UserNotificationWhereInput
  or: [UserNotificationWhereInput!]
  """read_at field predicates"""
  readAt: Time
  readAtGT: Time
  readAtGTE: Time
  readAtIn: [Time!]
  readAtIsNil: Boolean
  readAtLT: Time
  readAtLTE: Time
  readAtNEQ: Time
  readAtNotIn: [Time!]
  readAtNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}

type UserPlatform implements Node {
  createdAt: Time!
  id: ID!
  platform: UserPlatformPlatform!
  platformID: String!
  user: User!
  username: String
}

"""UserPlatformPlatform is enum for the field platform"""
enum UserPlatformPlatform {
  Telegram
  VK
}

"""
UserPlatformWhereInput is used for filtering UserPlatform objects.
Input was generated by ent.
"""
input UserPlatformWhereInput {
  and: [UserPlatformWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: UserPlatformWhereInput
  or: [UserPlatformWhereInput!]
  """platform field predicates"""
  platform: UserPlatformPlatform
  """platform_id field predicates"""
  platformID: String
  platformIDContains: String
  platformIDContainsFold: String
  platformIDEqualFold: String
  platformIDGT: String
  platformIDGTE: String
  platformIDHasPrefix: String
  platformIDHasSuffix: String
  platformIDIn: [String!]
  platformIDLT: String
  platformIDLTE: String
  platformIDNEQ: String
  platformIDNotIn: [String!]
  platformIn: [UserPlatformPlatform!]
  platformNEQ: UserPlatformPlatform
  platformNotIn: [UserPlatformPlatform!]
  """username field predicates"""
  username: String
  usernameContains: String
  usernameContainsFold: String
  usernameEqualFold: String
  usernameGT: String
  usernameGTE: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIn: [String!]
  usernameIsNil: Boolean
  usernameLT: String
  usernameLTE: String
  usernameNEQ: String
  usernameNotIn: [String!]
  usernameNotNil: Boolean
}

enum UserPromocodeResult {
  activationsLimit
  activationsUserLimit
  expired
  inactive
  monthsLimit
  notFound
  success
}

interface UserView {
  """The id of the object."""
  id: ID!
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  """agrees_terms_at field predicates"""
  agreesTermsAt: Time
  agreesTermsAtGT: Time
  agreesTermsAtGTE: Time
  agreesTermsAtIn: [Time!]
  agreesTermsAtIsNil: Boolean
  agreesTermsAtLT: Time
  agreesTermsAtLTE: Time
  agreesTermsAtNEQ: Time
  agreesTermsAtNotIn: [Time!]
  agreesTermsAtNotNil: Boolean
  and: [UserWhereInput!]
  """avatar field predicates"""
  avatar: String
  avatarContains: String
  avatarContainsFold: String
  avatarEqualFold: String
  avatarGT: String
  avatarGTE: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIn: [String!]
  avatarIsNil: Boolean
  avatarLT: String
  avatarLTE: String
  avatarNEQ: String
  avatarNotIn: [String!]
  avatarNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """disabled_expert_notifications field predicates"""
  disabledExpertNotifications: Boolean
  disabledExpertNotificationsNEQ: Boolean
  """first_name field predicates"""
  firstName: String
  firstNameContains: String
  firstNameContainsFold: String
  firstNameEqualFold: String
  firstNameGT: String
  firstNameGTE: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIn: [String!]
  firstNameLT: String
  firstNameLTE: String
  firstNameNEQ: String
  firstNameNotIn: [String!]
  """created_profile_requests edge predicates"""
  hasCreatedProfileRequests: Boolean
  hasCreatedProfileRequestsWith: [ProfileRequestWhereInput!]
  """created_votes edge predicates"""
  hasCreatedVotes: Boolean
  hasCreatedVotesWith: [VoteWhereInput!]
  """event_requests edge predicates"""
  hasEventRequests: Boolean
  hasEventRequestsWith: [EventRequestWhereInput!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """expert_profile edge predicates"""
  hasExpertProfile: Boolean
  hasExpertProfileWith: [ExpertProfileWhereInput!]
  """notification_author edge predicates"""
  hasNotificationAuthor: Boolean
  hasNotificationAuthorWith: [NotificationWhereInput!]
  """notifications edge predicates"""
  hasNotifications: Boolean
  hasNotificationsWith: [UserNotificationWhereInput!]
  """organizator_profile edge predicates"""
  hasOrganizatorProfile: Boolean
  hasOrganizatorProfileWith: [OrganizatorWhereInput!]
  """platforms edge predicates"""
  hasPlatforms: Boolean
  hasPlatformsWith: [UserPlatformWhereInput!]
  """promo_words edge predicates"""
  hasPromoWords: Boolean
  hasPromoWordsWith: [EventPromoWordWhereInput!]
  """referal_expert_profile edge predicates"""
  hasReferalExpertProfile: Boolean
  hasReferalExpertProfileWith: [ExpertProfileWhereInput!]
  """representative_events edge predicates"""
  hasRepresentativeEvents: Boolean
  hasRepresentativeEventsWith: [EventWhereInput!]
  """representative_user edge predicates"""
  hasRepresentativeUser: Boolean
  hasRepresentativeUserWith: [RepresentativeExpertRequestWhereInput!]
  """tariff_subscription edge predicates"""
  hasTariffSubscription: Boolean
  hasTariffSubscriptionWith: [TariffSubscriptionWhereInput!]
  """tariff_subscriptions_log edge predicates"""
  hasTariffSubscriptionsLog: Boolean
  hasTariffSubscriptionsLogWith: [TariffSubscriptionLogWhereInput!]
  """used_promocodes edge predicates"""
  hasUsedPromocodes: Boolean
  hasUsedPromocodesWith: [PromocodeWhereInput!]
  """user_block edge predicates"""
  hasUserBlock: Boolean
  hasUserBlockWith: [UserBlockWhereInput!]
  """user_representative edge predicates"""
  hasUserRepresentative: Boolean
  hasUserRepresentativeWith: [RepresentativeExpertRequestWhereInput!]
  """verified_event_requests edge predicates"""
  hasVerifiedEventRequests: Boolean
  hasVerifiedEventRequestsWith: [EventRequestWhereInput!]
  """verified_events edge predicates"""
  hasVerifiedEvents: Boolean
  hasVerifiedEventsWith: [EventWhereInput!]
  """verified_profile_requests edge predicates"""
  hasVerifiedProfileRequests: Boolean
  hasVerifiedProfileRequestsWith: [ProfileRequestWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_name field predicates"""
  lastName: String
  lastNameContains: String
  lastNameContainsFold: String
  lastNameEqualFold: String
  lastNameGT: String
  lastNameGTE: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIn: [String!]
  lastNameLT: String
  lastNameLTE: String
  lastNameNEQ: String
  lastNameNotIn: [String!]
  """nickname field predicates"""
  nickname: String
  nicknameContains: String
  nicknameContainsFold: String
  nicknameEqualFold: String
  nicknameGT: String
  nicknameGTE: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameIn: [String!]
  nicknameIsNil: Boolean
  nicknameLT: String
  nicknameLTE: String
  nicknameNEQ: String
  nicknameNotIn: [String!]
  nicknameNotNil: Boolean
  not: UserWhereInput
  """notification_fron_app_enabled field predicates"""
  notificationFronAppEnabled: Boolean
  notificationFronAppEnabledNEQ: Boolean
  or: [UserWhereInput!]
  """privacy field predicates"""
  privacy: String
  privacyContains: String
  privacyContainsFold: String
  privacyEqualFold: String
  privacyGT: String
  privacyGTE: String
  privacyHasPrefix: String
  privacyHasSuffix: String
  privacyIn: [String!]
  privacyIsNil: Boolean
  privacyLT: String
  privacyLTE: String
  privacyNEQ: String
  privacyNotIn: [String!]
  privacyNotNil: Boolean
  """referal_expert_id field predicates"""
  referalExpertID: ID
  referalExpertIDIn: [ID!]
  referalExpertIDIsNil: Boolean
  referalExpertIDNEQ: ID
  referalExpertIDNotIn: [ID!]
  referalExpertIDNotNil: Boolean
  """rights field predicates"""
  rights: Int
  rightsGT: Int
  rightsGTE: Int
  rightsIn: [Int!]
  rightsLT: Int
  rightsLTE: Int
  rightsNEQ: Int
  rightsNotIn: [Int!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  """username field predicates"""
  username: String
  usernameContains: String
  usernameContainsFold: String
  usernameEqualFold: String
  usernameGT: String
  usernameGTE: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIn: [String!]
  usernameLT: String
  usernameLTE: String
  usernameNEQ: String
  usernameNotIn: [String!]
}

type VerifyExpertRequest implements Node {
  createdAt: Time!
  creator: User!
  expiresAt: Time!
  id: ID!
  status: VerifyExpertRequestStatus!
  updatedAt: Time!
  votes: [VoteVerifyExpert!]
}

"""Ordering options for VerifyExpertRequest connections"""
input VerifyExpertRequestOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order VerifyExpertRequests."""
  field: VerifyExpertRequestOrderField!
}

"""Properties by which VerifyExpertRequest connections can be ordered."""
enum VerifyExpertRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

"""VerifyExpertRequestStatus is enum for the field status"""
enum VerifyExpertRequestStatus {
  approved
  pending
  rejected
}

"""
VerifyExpertRequestWhereInput is used for filtering VerifyExpertRequest objects.
Input was generated by ent.
"""
input VerifyExpertRequestWhereInput {
  and: [VerifyExpertRequestWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """votes edge predicates"""
  hasVotes: Boolean
  hasVotesWith: [VoteVerifyExpertWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: VerifyExpertRequestWhereInput
  or: [VerifyExpertRequestWhereInput!]
  """status field predicates"""
  status: VerifyExpertRequestStatus
  statusIn: [VerifyExpertRequestStatus!]
  statusNEQ: VerifyExpertRequestStatus
  statusNotIn: [VerifyExpertRequestStatus!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Vote implements Node {
  deletedAt: Time
  event: Event
  id: ID!
  isLike: Boolean
  targetExpert: ExpertProfile
  targetOrganizator: Organizator
  typeRating: VoteTypeRating!
  user: User
  voteHistory: [VoteHistory!]
}

type VoteHistory implements Node {
  action: VoteHistoryAction!
  createdAt: Time!
  id: ID!
  newIsLike: Boolean
  oldIsLike: Boolean
  reason: String!
  vote: Vote!
}

"""VoteHistoryAction is enum for the field action"""
enum VoteHistoryAction {
  create
  delete
  update
}

"""
VoteHistoryWhereInput is used for filtering VoteHistory objects.
Input was generated by ent.
"""
input VoteHistoryWhereInput {
  """action field predicates"""
  action: VoteHistoryAction
  actionIn: [VoteHistoryAction!]
  actionNEQ: VoteHistoryAction
  actionNotIn: [VoteHistoryAction!]
  and: [VoteHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """vote edge predicates"""
  hasVote: Boolean
  hasVoteWith: [VoteWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """new_is_like field predicates"""
  newIsLike: Boolean
  newIsLikeIsNil: Boolean
  newIsLikeNEQ: Boolean
  newIsLikeNotNil: Boolean
  not: VoteHistoryWhereInput
  """old_is_like field predicates"""
  oldIsLike: Boolean
  oldIsLikeIsNil: Boolean
  oldIsLikeNEQ: Boolean
  oldIsLikeNotNil: Boolean
  or: [VoteHistoryWhereInput!]
  """reason field predicates"""
  reason: String
  reasonContains: String
  reasonContainsFold: String
  reasonEqualFold: String
  reasonGT: String
  reasonGTE: String
  reasonHasPrefix: String
  reasonHasSuffix: String
  reasonIn: [String!]
  reasonLT: String
  reasonLTE: String
  reasonNEQ: String
  reasonNotIn: [String!]
}

enum VoteType {
  delete
  negative
  positive
}

"""VoteTypeRating is enum for the field type_rating"""
enum VoteTypeRating {
  expert
  organizator
  people
}

type VoteVerifyExpert implements Node {
  createdAt: Time!
  expert: User!
  id: ID!
  request: VerifyExpertRequest!
  status: VoteVerifyExpertStatus!
  updatedAt: Time!
}

input VoteVerifyExpertInput {
  isNegative: Boolean!
  isPositive: Boolean!
  verifyExpertRequestId: ID!
}

"""Ordering options for VoteVerifyExpert connections"""
input VoteVerifyExpertOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order VoteVerifyExperts."""
  field: VoteVerifyExpertOrderField!
}

"""Properties by which VoteVerifyExpert connections can be ordered."""
enum VoteVerifyExpertOrderField {
  CREATED_AT
  UPDATED_AT
}

"""VoteVerifyExpertStatus is enum for the field status"""
enum VoteVerifyExpertStatus {
  approved
  pending
  rejected
}

"""
VoteVerifyExpertWhereInput is used for filtering VoteVerifyExpert objects.
Input was generated by ent.
"""
input VoteVerifyExpertWhereInput {
  and: [VoteVerifyExpertWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """expert edge predicates"""
  hasExpert: Boolean
  hasExpertWith: [UserWhereInput!]
  """request edge predicates"""
  hasRequest: Boolean
  hasRequestWith: [VerifyExpertRequestWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: VoteVerifyExpertWhereInput
  or: [VoteVerifyExpertWhereInput!]
  """status field predicates"""
  status: VoteVerifyExpertStatus
  statusIn: [VoteVerifyExpertStatus!]
  statusNEQ: VoteVerifyExpertStatus
  statusNotIn: [VoteVerifyExpertStatus!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""
VoteWhereInput is used for filtering Vote objects.
Input was generated by ent.
"""
input VoteWhereInput {
  and: [VoteWhereInput!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """event edge predicates"""
  hasEvent: Boolean
  hasEventWith: [EventWhereInput!]
  """target_expert edge predicates"""
  hasTargetExpert: Boolean
  hasTargetExpertWith: [ExpertProfileWhereInput!]
  """target_organizator edge predicates"""
  hasTargetOrganizator: Boolean
  hasTargetOrganizatorWith: [OrganizatorWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """vote_history edge predicates"""
  hasVoteHistory: Boolean
  hasVoteHistoryWith: [VoteHistoryWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """is_like field predicates"""
  isLike: Boolean
  isLikeIsNil: Boolean
  isLikeNEQ: Boolean
  isLikeNotNil: Boolean
  not: VoteWhereInput
  or: [VoteWhereInput!]
  """type_rating field predicates"""
  typeRating: VoteTypeRating
  typeRatingIn: [VoteTypeRating!]
  typeRatingNEQ: VoteTypeRating
  typeRatingNotIn: [VoteTypeRating!]
}

input acceptPlatformRightsInput {
  referalCode: String
}

input createChildrenEventInput {
  description: String!
  duration: Uint!
  promoWord: String!
  requestID: ID!
  startAt: Time!
  title: String!
}